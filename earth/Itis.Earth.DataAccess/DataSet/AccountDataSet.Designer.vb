'------------------------------------------------------------------------------
' <auto-generated>
'     このコードはツールによって生成されました。
'     ランタイム バージョン:2.0.50727.3082
'
'     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
'     コードが再生成されるときに損失したりします。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("AccountDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class AccountDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableAccountTable As AccountTableDataTable
    
    Private tableNinsyouTable As NinsyouTableDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("AccountTable")) Is Nothing) Then
                MyBase.Tables.Add(New AccountTableDataTable(ds.Tables("AccountTable")))
            End If
            If (Not (ds.Tables("NinsyouTable")) Is Nothing) Then
                MyBase.Tables.Add(New NinsyouTableDataTable(ds.Tables("NinsyouTable")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AccountTable() As AccountTableDataTable
        Get
            Return Me.tableAccountTable
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NinsyouTable() As NinsyouTableDataTable
        Get
            Return Me.tableNinsyouTable
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As AccountDataSet = CType(MyBase.Clone,AccountDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("AccountTable")) Is Nothing) Then
                MyBase.Tables.Add(New AccountTableDataTable(ds.Tables("AccountTable")))
            End If
            If (Not (ds.Tables("NinsyouTable")) Is Nothing) Then
                MyBase.Tables.Add(New NinsyouTableDataTable(ds.Tables("NinsyouTable")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableAccountTable = CType(MyBase.Tables("AccountTable"),AccountTableDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAccountTable) Is Nothing) Then
                Me.tableAccountTable.InitVars
            End If
        End If
        Me.tableNinsyouTable = CType(MyBase.Tables("NinsyouTable"),NinsyouTableDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNinsyouTable) Is Nothing) Then
                Me.tableNinsyouTable.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "AccountDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/AccountDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableAccountTable = New AccountTableDataTable
        MyBase.Tables.Add(Me.tableAccountTable)
        Me.tableNinsyouTable = New NinsyouTableDataTable
        MyBase.Tables.Add(Me.tableNinsyouTable)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAccountTable() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNinsyouTable() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As AccountDataSet = New AccountDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub AccountTableRowChangeEventHandler(ByVal sender As Object, ByVal e As AccountTableRowChangeEvent)
    
    Public Delegate Sub NinsyouTableRowChangeEventHandler(ByVal sender As Object, ByVal e As NinsyouTableRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AccountTableDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnaccount_no As Global.System.Data.DataColumn
        
        Private columnaccount As Global.System.Data.DataColumn
        
        Private columnsimei As Global.System.Data.DataColumn
        
        Private columnbikou As Global.System.Data.DataColumn
        
        Private columnirai_gyoumu_kengen As Global.System.Data.DataColumn
        
        Private columnkekka_gyoumu_kengen As Global.System.Data.DataColumn
        
        Private columnhosyou_gyoumu_kengen As Global.System.Data.DataColumn
        
        Private columnhkks_gyoumu_kengen As Global.System.Data.DataColumn
        
        Private columnkoj_gyoumu_kengen As Global.System.Data.DataColumn
        
        Private columnkeiri_gyoumu_kengen As Global.System.Data.DataColumn
        
        Private columnkaiseki_master_kanri_kengen As Global.System.Data.DataColumn
        
        Private columneigyou_master_kanri_kengen As Global.System.Data.DataColumn
        
        Private columnkkk_master_kanri_kengen As Global.System.Data.DataColumn
        
        Private columnhansoku_uriage_kengen As Global.System.Data.DataColumn
        
        Private columndata_haki_kengen As Global.System.Data.DataColumn
        
        Private columnsystem_kanrisya_kengen As Global.System.Data.DataColumn
        
        Private columnsinki_nyuuryoku_kengen As Global.System.Data.DataColumn
        
        Private columnhattyuusyo_kanri_kengen As Global.System.Data.DataColumn
        
        Private columnlogin_user_id As Global.System.Data.DataColumn
        
        Private columnDepartment As Global.System.Data.DataColumn
        
        Private columnDisplayName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AccountTable"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property account_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaccount_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property accountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaccount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property simeiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsimei
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bikouColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbikou
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property irai_gyoumu_kengenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnirai_gyoumu_kengen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kekka_gyoumu_kengenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkekka_gyoumu_kengen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property hosyou_gyoumu_kengenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhosyou_gyoumu_kengen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property hkks_gyoumu_kengenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhkks_gyoumu_kengen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property koj_gyoumu_kengenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkoj_gyoumu_kengen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property keiri_gyoumu_kengenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkeiri_gyoumu_kengen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kaiseki_master_kanri_kengenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkaiseki_master_kanri_kengen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property eigyou_master_kanri_kengenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneigyou_master_kanri_kengen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kkk_master_kanri_kengenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkkk_master_kanri_kengen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property hansoku_uriage_kengenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhansoku_uriage_kengen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property data_haki_kengenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndata_haki_kengen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property system_kanrisya_kengenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsystem_kanrisya_kengen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sinki_nyuuryoku_kengenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsinki_nyuuryoku_kengen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property hattyuusyo_kanri_kengenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhattyuusyo_kanri_kengen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property login_user_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlogin_user_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepartmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepartment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DisplayNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDisplayName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AccountTableRow
            Get
                Return CType(Me.Rows(index),AccountTableRow)
            End Get
        End Property
        
        Public Event AccountTableRowChanging As AccountTableRowChangeEventHandler
        
        Public Event AccountTableRowChanged As AccountTableRowChangeEventHandler
        
        Public Event AccountTableRowDeleting As AccountTableRowChangeEventHandler
        
        Public Event AccountTableRowDeleted As AccountTableRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAccountTableRow(ByVal row As AccountTableRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAccountTableRow( _
                    ByVal account_no As Integer,  _
                    ByVal account As String,  _
                    ByVal simei As String,  _
                    ByVal bikou As String,  _
                    ByVal irai_gyoumu_kengen As Integer,  _
                    ByVal kekka_gyoumu_kengen As Integer,  _
                    ByVal hosyou_gyoumu_kengen As Integer,  _
                    ByVal hkks_gyoumu_kengen As Integer,  _
                    ByVal koj_gyoumu_kengen As Integer,  _
                    ByVal keiri_gyoumu_kengen As Integer,  _
                    ByVal kaiseki_master_kanri_kengen As Integer,  _
                    ByVal eigyou_master_kanri_kengen As Integer,  _
                    ByVal kkk_master_kanri_kengen As Integer,  _
                    ByVal hansoku_uriage_kengen As Integer,  _
                    ByVal data_haki_kengen As Integer,  _
                    ByVal system_kanrisya_kengen As Integer,  _
                    ByVal sinki_nyuuryoku_kengen As Integer,  _
                    ByVal hattyuusyo_kanri_kengen As Integer,  _
                    ByVal login_user_id As String,  _
                    ByVal Department As String,  _
                    ByVal DisplayName As String) As AccountTableRow
            Dim rowAccountTableRow As AccountTableRow = CType(Me.NewRow,AccountTableRow)
            Dim columnValuesArray() As Object = New Object() {account_no, account, simei, bikou, irai_gyoumu_kengen, kekka_gyoumu_kengen, hosyou_gyoumu_kengen, hkks_gyoumu_kengen, koj_gyoumu_kengen, keiri_gyoumu_kengen, kaiseki_master_kanri_kengen, eigyou_master_kanri_kengen, kkk_master_kanri_kengen, hansoku_uriage_kengen, data_haki_kengen, system_kanrisya_kengen, sinki_nyuuryoku_kengen, hattyuusyo_kanri_kengen, login_user_id, Department, DisplayName}
            rowAccountTableRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAccountTableRow)
            Return rowAccountTableRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AccountTableDataTable = CType(MyBase.Clone,AccountTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AccountTableDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnaccount_no = MyBase.Columns("account_no")
            Me.columnaccount = MyBase.Columns("account")
            Me.columnsimei = MyBase.Columns("simei")
            Me.columnbikou = MyBase.Columns("bikou")
            Me.columnirai_gyoumu_kengen = MyBase.Columns("irai_gyoumu_kengen")
            Me.columnkekka_gyoumu_kengen = MyBase.Columns("kekka_gyoumu_kengen")
            Me.columnhosyou_gyoumu_kengen = MyBase.Columns("hosyou_gyoumu_kengen")
            Me.columnhkks_gyoumu_kengen = MyBase.Columns("hkks_gyoumu_kengen")
            Me.columnkoj_gyoumu_kengen = MyBase.Columns("koj_gyoumu_kengen")
            Me.columnkeiri_gyoumu_kengen = MyBase.Columns("keiri_gyoumu_kengen")
            Me.columnkaiseki_master_kanri_kengen = MyBase.Columns("kaiseki_master_kanri_kengen")
            Me.columneigyou_master_kanri_kengen = MyBase.Columns("eigyou_master_kanri_kengen")
            Me.columnkkk_master_kanri_kengen = MyBase.Columns("kkk_master_kanri_kengen")
            Me.columnhansoku_uriage_kengen = MyBase.Columns("hansoku_uriage_kengen")
            Me.columndata_haki_kengen = MyBase.Columns("data_haki_kengen")
            Me.columnsystem_kanrisya_kengen = MyBase.Columns("system_kanrisya_kengen")
            Me.columnsinki_nyuuryoku_kengen = MyBase.Columns("sinki_nyuuryoku_kengen")
            Me.columnhattyuusyo_kanri_kengen = MyBase.Columns("hattyuusyo_kanri_kengen")
            Me.columnlogin_user_id = MyBase.Columns("login_user_id")
            Me.columnDepartment = MyBase.Columns("Department")
            Me.columnDisplayName = MyBase.Columns("DisplayName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnaccount_no = New Global.System.Data.DataColumn("account_no", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaccount_no)
            Me.columnaccount = New Global.System.Data.DataColumn("account", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaccount)
            Me.columnsimei = New Global.System.Data.DataColumn("simei", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsimei)
            Me.columnbikou = New Global.System.Data.DataColumn("bikou", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbikou)
            Me.columnirai_gyoumu_kengen = New Global.System.Data.DataColumn("irai_gyoumu_kengen", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnirai_gyoumu_kengen)
            Me.columnkekka_gyoumu_kengen = New Global.System.Data.DataColumn("kekka_gyoumu_kengen", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkekka_gyoumu_kengen)
            Me.columnhosyou_gyoumu_kengen = New Global.System.Data.DataColumn("hosyou_gyoumu_kengen", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhosyou_gyoumu_kengen)
            Me.columnhkks_gyoumu_kengen = New Global.System.Data.DataColumn("hkks_gyoumu_kengen", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhkks_gyoumu_kengen)
            Me.columnkoj_gyoumu_kengen = New Global.System.Data.DataColumn("koj_gyoumu_kengen", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkoj_gyoumu_kengen)
            Me.columnkeiri_gyoumu_kengen = New Global.System.Data.DataColumn("keiri_gyoumu_kengen", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkeiri_gyoumu_kengen)
            Me.columnkaiseki_master_kanri_kengen = New Global.System.Data.DataColumn("kaiseki_master_kanri_kengen", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkaiseki_master_kanri_kengen)
            Me.columneigyou_master_kanri_kengen = New Global.System.Data.DataColumn("eigyou_master_kanri_kengen", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneigyou_master_kanri_kengen)
            Me.columnkkk_master_kanri_kengen = New Global.System.Data.DataColumn("kkk_master_kanri_kengen", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkkk_master_kanri_kengen)
            Me.columnhansoku_uriage_kengen = New Global.System.Data.DataColumn("hansoku_uriage_kengen", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhansoku_uriage_kengen)
            Me.columndata_haki_kengen = New Global.System.Data.DataColumn("data_haki_kengen", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndata_haki_kengen)
            Me.columnsystem_kanrisya_kengen = New Global.System.Data.DataColumn("system_kanrisya_kengen", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsystem_kanrisya_kengen)
            Me.columnsinki_nyuuryoku_kengen = New Global.System.Data.DataColumn("sinki_nyuuryoku_kengen", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsinki_nyuuryoku_kengen)
            Me.columnhattyuusyo_kanri_kengen = New Global.System.Data.DataColumn("hattyuusyo_kanri_kengen", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhattyuusyo_kanri_kengen)
            Me.columnlogin_user_id = New Global.System.Data.DataColumn("login_user_id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlogin_user_id)
            Me.columnDepartment = New Global.System.Data.DataColumn("Department", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepartment)
            Me.columnDisplayName = New Global.System.Data.DataColumn("DisplayName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDisplayName)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAccountTableRow() As AccountTableRow
            Return CType(Me.NewRow,AccountTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AccountTableRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AccountTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AccountTableRowChangedEvent) Is Nothing) Then
                RaiseEvent AccountTableRowChanged(Me, New AccountTableRowChangeEvent(CType(e.Row,AccountTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AccountTableRowChangingEvent) Is Nothing) Then
                RaiseEvent AccountTableRowChanging(Me, New AccountTableRowChangeEvent(CType(e.Row,AccountTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AccountTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent AccountTableRowDeleted(Me, New AccountTableRowChangeEvent(CType(e.Row,AccountTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AccountTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent AccountTableRowDeleting(Me, New AccountTableRowChangeEvent(CType(e.Row,AccountTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAccountTableRow(ByVal row As AccountTableRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As AccountDataSet = New AccountDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AccountTableDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NinsyouTableDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnaccount_no As Global.System.Data.DataColumn
        
        Private columnlogin_user_id As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NinsyouTable"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property account_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaccount_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property login_user_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlogin_user_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NinsyouTableRow
            Get
                Return CType(Me.Rows(index),NinsyouTableRow)
            End Get
        End Property
        
        Public Event NinsyouTableRowChanging As NinsyouTableRowChangeEventHandler
        
        Public Event NinsyouTableRowChanged As NinsyouTableRowChangeEventHandler
        
        Public Event NinsyouTableRowDeleting As NinsyouTableRowChangeEventHandler
        
        Public Event NinsyouTableRowDeleted As NinsyouTableRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNinsyouTableRow(ByVal row As NinsyouTableRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNinsyouTableRow(ByVal account_no As Integer, ByVal login_user_id As String) As NinsyouTableRow
            Dim rowNinsyouTableRow As NinsyouTableRow = CType(Me.NewRow,NinsyouTableRow)
            Dim columnValuesArray() As Object = New Object() {account_no, login_user_id}
            rowNinsyouTableRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNinsyouTableRow)
            Return rowNinsyouTableRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NinsyouTableDataTable = CType(MyBase.Clone,NinsyouTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NinsyouTableDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnaccount_no = MyBase.Columns("account_no")
            Me.columnlogin_user_id = MyBase.Columns("login_user_id")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnaccount_no = New Global.System.Data.DataColumn("account_no", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaccount_no)
            Me.columnlogin_user_id = New Global.System.Data.DataColumn("login_user_id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlogin_user_id)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNinsyouTableRow() As NinsyouTableRow
            Return CType(Me.NewRow,NinsyouTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NinsyouTableRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NinsyouTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NinsyouTableRowChangedEvent) Is Nothing) Then
                RaiseEvent NinsyouTableRowChanged(Me, New NinsyouTableRowChangeEvent(CType(e.Row,NinsyouTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NinsyouTableRowChangingEvent) Is Nothing) Then
                RaiseEvent NinsyouTableRowChanging(Me, New NinsyouTableRowChangeEvent(CType(e.Row,NinsyouTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NinsyouTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent NinsyouTableRowDeleted(Me, New NinsyouTableRowChangeEvent(CType(e.Row,NinsyouTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NinsyouTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent NinsyouTableRowDeleting(Me, New NinsyouTableRowChangeEvent(CType(e.Row,NinsyouTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNinsyouTableRow(ByVal row As NinsyouTableRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As AccountDataSet = New AccountDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NinsyouTableDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AccountTableRow
        Inherits Global.System.Data.DataRow
        
        Private tableAccountTable As AccountTableDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAccountTable = CType(Me.Table,AccountTableDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property account_no() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.account_noColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'account_no' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.account_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property account() As String
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.accountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'account' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.accountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property simei() As String
            Get
                If Me.IssimeiNull Then
                    Return Nothing
                Else
                    Return CType(Me(Me.tableAccountTable.simeiColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAccountTable.simeiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bikou() As String
            Get
                If Me.IsbikouNull Then
                    Return Nothing
                Else
                    Return CType(Me(Me.tableAccountTable.bikouColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAccountTable.bikouColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property irai_gyoumu_kengen() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.irai_gyoumu_kengenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'irai_gyoumu_kengen' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.irai_gyoumu_kengenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kekka_gyoumu_kengen() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.kekka_gyoumu_kengenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'kekka_gyoumu_kengen' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.kekka_gyoumu_kengenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property hosyou_gyoumu_kengen() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.hosyou_gyoumu_kengenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'hosyou_gyoumu_kengen' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.hosyou_gyoumu_kengenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property hkks_gyoumu_kengen() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.hkks_gyoumu_kengenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'hkks_gyoumu_kengen' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.hkks_gyoumu_kengenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property koj_gyoumu_kengen() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.koj_gyoumu_kengenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'koj_gyoumu_kengen' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.koj_gyoumu_kengenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property keiri_gyoumu_kengen() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.keiri_gyoumu_kengenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'keiri_gyoumu_kengen' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.keiri_gyoumu_kengenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kaiseki_master_kanri_kengen() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.kaiseki_master_kanri_kengenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'kaiseki_master_kanri_kengen' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.kaiseki_master_kanri_kengenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property eigyou_master_kanri_kengen() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.eigyou_master_kanri_kengenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'eigyou_master_kanri_kengen' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.eigyou_master_kanri_kengenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kkk_master_kanri_kengen() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.kkk_master_kanri_kengenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'kkk_master_kanri_kengen' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.kkk_master_kanri_kengenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property hansoku_uriage_kengen() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.hansoku_uriage_kengenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'hansoku_uriage_kengen' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.hansoku_uriage_kengenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property data_haki_kengen() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.data_haki_kengenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'data_haki_kengen' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.data_haki_kengenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property system_kanrisya_kengen() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.system_kanrisya_kengenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'system_kanrisya_kengen' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.system_kanrisya_kengenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sinki_nyuuryoku_kengen() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.sinki_nyuuryoku_kengenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'sinki_nyuuryoku_kengen' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.sinki_nyuuryoku_kengenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property hattyuusyo_kanri_kengen() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.hattyuusyo_kanri_kengenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'hattyuusyo_kanri_kengen' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.hattyuusyo_kanri_kengenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property login_user_id() As String
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.login_user_idColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'login_user_id' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.login_user_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Department() As String
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.DepartmentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'Department' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.DepartmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DisplayName() As String
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.DisplayNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'DisplayName' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.DisplayNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isaccount_noNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.account_noColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setaccount_noNull()
            Me(Me.tableAccountTable.account_noColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsaccountNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.accountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetaccountNull()
            Me(Me.tableAccountTable.accountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssimeiNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.simeiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsimeiNull()
            Me(Me.tableAccountTable.simeiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbikouNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.bikouColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbikouNull()
            Me(Me.tableAccountTable.bikouColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isirai_gyoumu_kengenNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.irai_gyoumu_kengenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setirai_gyoumu_kengenNull()
            Me(Me.tableAccountTable.irai_gyoumu_kengenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iskekka_gyoumu_kengenNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.kekka_gyoumu_kengenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setkekka_gyoumu_kengenNull()
            Me(Me.tableAccountTable.kekka_gyoumu_kengenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ishosyou_gyoumu_kengenNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.hosyou_gyoumu_kengenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sethosyou_gyoumu_kengenNull()
            Me(Me.tableAccountTable.hosyou_gyoumu_kengenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ishkks_gyoumu_kengenNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.hkks_gyoumu_kengenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sethkks_gyoumu_kengenNull()
            Me(Me.tableAccountTable.hkks_gyoumu_kengenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iskoj_gyoumu_kengenNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.koj_gyoumu_kengenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setkoj_gyoumu_kengenNull()
            Me(Me.tableAccountTable.koj_gyoumu_kengenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iskeiri_gyoumu_kengenNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.keiri_gyoumu_kengenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setkeiri_gyoumu_kengenNull()
            Me(Me.tableAccountTable.keiri_gyoumu_kengenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iskaiseki_master_kanri_kengenNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.kaiseki_master_kanri_kengenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setkaiseki_master_kanri_kengenNull()
            Me(Me.tableAccountTable.kaiseki_master_kanri_kengenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iseigyou_master_kanri_kengenNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.eigyou_master_kanri_kengenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Seteigyou_master_kanri_kengenNull()
            Me(Me.tableAccountTable.eigyou_master_kanri_kengenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iskkk_master_kanri_kengenNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.kkk_master_kanri_kengenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setkkk_master_kanri_kengenNull()
            Me(Me.tableAccountTable.kkk_master_kanri_kengenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ishansoku_uriage_kengenNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.hansoku_uriage_kengenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sethansoku_uriage_kengenNull()
            Me(Me.tableAccountTable.hansoku_uriage_kengenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdata_haki_kengenNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.data_haki_kengenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdata_haki_kengenNull()
            Me(Me.tableAccountTable.data_haki_kengenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issystem_kanrisya_kengenNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.system_kanrisya_kengenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsystem_kanrisya_kengenNull()
            Me(Me.tableAccountTable.system_kanrisya_kengenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issinki_nyuuryoku_kengenNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.sinki_nyuuryoku_kengenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsinki_nyuuryoku_kengenNull()
            Me(Me.tableAccountTable.sinki_nyuuryoku_kengenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ishattyuusyo_kanri_kengenNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.hattyuusyo_kanri_kengenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sethattyuusyo_kanri_kengenNull()
            Me(Me.tableAccountTable.hattyuusyo_kanri_kengenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islogin_user_idNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.login_user_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlogin_user_idNull()
            Me(Me.tableAccountTable.login_user_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepartmentNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.DepartmentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepartmentNull()
            Me(Me.tableAccountTable.DepartmentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDisplayNameNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.DisplayNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDisplayNameNull()
            Me(Me.tableAccountTable.DisplayNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NinsyouTableRow
        Inherits Global.System.Data.DataRow
        
        Private tableNinsyouTable As NinsyouTableDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNinsyouTable = CType(Me.Table,NinsyouTableDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property account_no() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNinsyouTable.account_noColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'NinsyouTable' にある列 'account_no' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableNinsyouTable.account_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property login_user_id() As String
            Get
                If Me.Islogin_user_idNull Then
                    Return Nothing
                Else
                    Return CType(Me(Me.tableNinsyouTable.login_user_idColumn),String)
                End If
            End Get
            Set
                Me(Me.tableNinsyouTable.login_user_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isaccount_noNull() As Boolean
            Return Me.IsNull(Me.tableNinsyouTable.account_noColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setaccount_noNull()
            Me(Me.tableNinsyouTable.account_noColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islogin_user_idNull() As Boolean
            Return Me.IsNull(Me.tableNinsyouTable.login_user_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlogin_user_idNull()
            Me(Me.tableNinsyouTable.login_user_idColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AccountTableRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AccountTableRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AccountTableRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AccountTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NinsyouTableRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NinsyouTableRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NinsyouTableRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NinsyouTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
