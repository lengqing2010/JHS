'------------------------------------------------------------------------------
' <auto-generated>
'     このコードはツールによって生成されました。
'     ランタイム バージョン:2.0.50727.3603
'
'     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
'     コードが再生成されるときに損失したりします。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("NyuukinCsvDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class NyuukinCsvDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableNyuukinKey As NyuukinKeyDataTable
    
    Private tableNyuukinGassan As NyuukinGassanDataTable
    
    Private tableNyuukinErr As NyuukinErrDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("NyuukinKey")) Is Nothing) Then
                MyBase.Tables.Add(New NyuukinKeyDataTable(ds.Tables("NyuukinKey")))
            End If
            If (Not (ds.Tables("NyuukinGassan")) Is Nothing) Then
                MyBase.Tables.Add(New NyuukinGassanDataTable(ds.Tables("NyuukinGassan")))
            End If
            If (Not (ds.Tables("NyuukinErr")) Is Nothing) Then
                MyBase.Tables.Add(New NyuukinErrDataTable(ds.Tables("NyuukinErr")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NyuukinKey() As NyuukinKeyDataTable
        Get
            Return Me.tableNyuukinKey
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NyuukinGassan() As NyuukinGassanDataTable
        Get
            Return Me.tableNyuukinGassan
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NyuukinErr() As NyuukinErrDataTable
        Get
            Return Me.tableNyuukinErr
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As NyuukinCsvDataSet = CType(MyBase.Clone,NyuukinCsvDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("NyuukinKey")) Is Nothing) Then
                MyBase.Tables.Add(New NyuukinKeyDataTable(ds.Tables("NyuukinKey")))
            End If
            If (Not (ds.Tables("NyuukinGassan")) Is Nothing) Then
                MyBase.Tables.Add(New NyuukinGassanDataTable(ds.Tables("NyuukinGassan")))
            End If
            If (Not (ds.Tables("NyuukinErr")) Is Nothing) Then
                MyBase.Tables.Add(New NyuukinErrDataTable(ds.Tables("NyuukinErr")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableNyuukinKey = CType(MyBase.Tables("NyuukinKey"),NyuukinKeyDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNyuukinKey) Is Nothing) Then
                Me.tableNyuukinKey.InitVars
            End If
        End If
        Me.tableNyuukinGassan = CType(MyBase.Tables("NyuukinGassan"),NyuukinGassanDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNyuukinGassan) Is Nothing) Then
                Me.tableNyuukinGassan.InitVars
            End If
        End If
        Me.tableNyuukinErr = CType(MyBase.Tables("NyuukinErr"),NyuukinErrDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNyuukinErr) Is Nothing) Then
                Me.tableNyuukinErr.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "NyuukinCsvDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/NyuukinCsvDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableNyuukinKey = New NyuukinKeyDataTable
        MyBase.Tables.Add(Me.tableNyuukinKey)
        Me.tableNyuukinGassan = New NyuukinGassanDataTable
        MyBase.Tables.Add(Me.tableNyuukinGassan)
        Me.tableNyuukinErr = New NyuukinErrDataTable
        MyBase.Tables.Add(Me.tableNyuukinErr)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNyuukinKey() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNyuukinGassan() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNyuukinErr() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As NyuukinCsvDataSet = New NyuukinCsvDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub NyuukinKeyRowChangeEventHandler(ByVal sender As Object, ByVal e As NyuukinKeyRowChangeEvent)
    
    Public Delegate Sub NyuukinGassanRowChangeEventHandler(ByVal sender As Object, ByVal e As NyuukinGassanRowChangeEvent)
    
    Public Delegate Sub NyuukinErrRowChangeEventHandler(ByVal sender As Object, ByVal e As NyuukinErrRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NyuukinKeyDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnkbn As Global.System.Data.DataColumn
        
        Private columnhosyousyo_no As Global.System.Data.DataColumn
        
        Private columnbunrui_cd As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NyuukinKey"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kbnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkbn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property hosyousyo_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhosyousyo_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bunrui_cdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbunrui_cd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NyuukinKeyRow
            Get
                Return CType(Me.Rows(index),NyuukinKeyRow)
            End Get
        End Property
        
        Public Event NyuukinKeyRowChanging As NyuukinKeyRowChangeEventHandler
        
        Public Event NyuukinKeyRowChanged As NyuukinKeyRowChangeEventHandler
        
        Public Event NyuukinKeyRowDeleting As NyuukinKeyRowChangeEventHandler
        
        Public Event NyuukinKeyRowDeleted As NyuukinKeyRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNyuukinKeyRow(ByVal row As NyuukinKeyRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNyuukinKeyRow(ByVal kbn As String, ByVal hosyousyo_no As String, ByVal bunrui_cd As String) As NyuukinKeyRow
            Dim rowNyuukinKeyRow As NyuukinKeyRow = CType(Me.NewRow,NyuukinKeyRow)
            Dim columnValuesArray() As Object = New Object() {kbn, hosyousyo_no, bunrui_cd}
            rowNyuukinKeyRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNyuukinKeyRow)
            Return rowNyuukinKeyRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NyuukinKeyDataTable = CType(MyBase.Clone,NyuukinKeyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NyuukinKeyDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnkbn = MyBase.Columns("kbn")
            Me.columnhosyousyo_no = MyBase.Columns("hosyousyo_no")
            Me.columnbunrui_cd = MyBase.Columns("bunrui_cd")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnkbn = New Global.System.Data.DataColumn("kbn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkbn)
            Me.columnhosyousyo_no = New Global.System.Data.DataColumn("hosyousyo_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhosyousyo_no)
            Me.columnbunrui_cd = New Global.System.Data.DataColumn("bunrui_cd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbunrui_cd)
            Me.columnkbn.AllowDBNull = false
            Me.columnkbn.MaxLength = 1
            Me.columnhosyousyo_no.AllowDBNull = false
            Me.columnhosyousyo_no.MaxLength = 10
            Me.columnbunrui_cd.AllowDBNull = false
            Me.columnbunrui_cd.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNyuukinKeyRow() As NyuukinKeyRow
            Return CType(Me.NewRow,NyuukinKeyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NyuukinKeyRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NyuukinKeyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NyuukinKeyRowChangedEvent) Is Nothing) Then
                RaiseEvent NyuukinKeyRowChanged(Me, New NyuukinKeyRowChangeEvent(CType(e.Row,NyuukinKeyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NyuukinKeyRowChangingEvent) Is Nothing) Then
                RaiseEvent NyuukinKeyRowChanging(Me, New NyuukinKeyRowChangeEvent(CType(e.Row,NyuukinKeyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NyuukinKeyRowDeletedEvent) Is Nothing) Then
                RaiseEvent NyuukinKeyRowDeleted(Me, New NyuukinKeyRowChangeEvent(CType(e.Row,NyuukinKeyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NyuukinKeyRowDeletingEvent) Is Nothing) Then
                RaiseEvent NyuukinKeyRowDeleting(Me, New NyuukinKeyRowChangeEvent(CType(e.Row,NyuukinKeyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNyuukinKeyRow(ByVal row As NyuukinKeyRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As NyuukinCsvDataSet = New NyuukinCsvDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NyuukinKeyDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NyuukinGassanDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnkbn As Global.System.Data.DataColumn
        
        Private columnhosyousyo_no As Global.System.Data.DataColumn
        
        Private columnbunrui_cd As Global.System.Data.DataColumn
        
        Private columnzeikomi_nyuukin_gaku As Global.System.Data.DataColumn
        
        Private columnzeikomi_henkin_gaku As Global.System.Data.DataColumn
        
        Private columnsaisyuu_nyuukin_date As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NyuukinGassan"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kbnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkbn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property hosyousyo_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhosyousyo_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bunrui_cdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbunrui_cd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property zeikomi_nyuukin_gakuColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnzeikomi_nyuukin_gaku
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property zeikomi_henkin_gakuColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnzeikomi_henkin_gaku
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saisyuu_nyuukin_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaisyuu_nyuukin_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NyuukinGassanRow
            Get
                Return CType(Me.Rows(index),NyuukinGassanRow)
            End Get
        End Property
        
        Public Event NyuukinGassanRowChanging As NyuukinGassanRowChangeEventHandler
        
        Public Event NyuukinGassanRowChanged As NyuukinGassanRowChangeEventHandler
        
        Public Event NyuukinGassanRowDeleting As NyuukinGassanRowChangeEventHandler
        
        Public Event NyuukinGassanRowDeleted As NyuukinGassanRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNyuukinGassanRow(ByVal row As NyuukinGassanRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNyuukinGassanRow(ByVal kbn As String, ByVal hosyousyo_no As String, ByVal bunrui_cd As String, ByVal zeikomi_nyuukin_gaku As Integer, ByVal zeikomi_henkin_gaku As Integer, ByVal saisyuu_nyuukin_date As Date) As NyuukinGassanRow
            Dim rowNyuukinGassanRow As NyuukinGassanRow = CType(Me.NewRow,NyuukinGassanRow)
            Dim columnValuesArray() As Object = New Object() {kbn, hosyousyo_no, bunrui_cd, zeikomi_nyuukin_gaku, zeikomi_henkin_gaku, saisyuu_nyuukin_date}
            rowNyuukinGassanRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNyuukinGassanRow)
            Return rowNyuukinGassanRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBykbnhosyousyo_nobunrui_cd(ByVal kbn As String, ByVal hosyousyo_no As String, ByVal bunrui_cd As String) As NyuukinGassanRow
            Return CType(Me.Rows.Find(New Object() {kbn, hosyousyo_no, bunrui_cd}),NyuukinGassanRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NyuukinGassanDataTable = CType(MyBase.Clone,NyuukinGassanDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NyuukinGassanDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnkbn = MyBase.Columns("kbn")
            Me.columnhosyousyo_no = MyBase.Columns("hosyousyo_no")
            Me.columnbunrui_cd = MyBase.Columns("bunrui_cd")
            Me.columnzeikomi_nyuukin_gaku = MyBase.Columns("zeikomi_nyuukin_gaku")
            Me.columnzeikomi_henkin_gaku = MyBase.Columns("zeikomi_henkin_gaku")
            Me.columnsaisyuu_nyuukin_date = MyBase.Columns("saisyuu_nyuukin_date")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnkbn = New Global.System.Data.DataColumn("kbn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkbn)
            Me.columnhosyousyo_no = New Global.System.Data.DataColumn("hosyousyo_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhosyousyo_no)
            Me.columnbunrui_cd = New Global.System.Data.DataColumn("bunrui_cd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbunrui_cd)
            Me.columnzeikomi_nyuukin_gaku = New Global.System.Data.DataColumn("zeikomi_nyuukin_gaku", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnzeikomi_nyuukin_gaku)
            Me.columnzeikomi_henkin_gaku = New Global.System.Data.DataColumn("zeikomi_henkin_gaku", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnzeikomi_henkin_gaku)
            Me.columnsaisyuu_nyuukin_date = New Global.System.Data.DataColumn("saisyuu_nyuukin_date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaisyuu_nyuukin_date)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnkbn, Me.columnhosyousyo_no, Me.columnbunrui_cd}, true))
            Me.columnkbn.AllowDBNull = false
            Me.columnkbn.MaxLength = 1
            Me.columnhosyousyo_no.AllowDBNull = false
            Me.columnhosyousyo_no.MaxLength = 10
            Me.columnbunrui_cd.AllowDBNull = false
            Me.columnbunrui_cd.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNyuukinGassanRow() As NyuukinGassanRow
            Return CType(Me.NewRow,NyuukinGassanRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NyuukinGassanRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NyuukinGassanRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NyuukinGassanRowChangedEvent) Is Nothing) Then
                RaiseEvent NyuukinGassanRowChanged(Me, New NyuukinGassanRowChangeEvent(CType(e.Row,NyuukinGassanRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NyuukinGassanRowChangingEvent) Is Nothing) Then
                RaiseEvent NyuukinGassanRowChanging(Me, New NyuukinGassanRowChangeEvent(CType(e.Row,NyuukinGassanRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NyuukinGassanRowDeletedEvent) Is Nothing) Then
                RaiseEvent NyuukinGassanRowDeleted(Me, New NyuukinGassanRowChangeEvent(CType(e.Row,NyuukinGassanRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NyuukinGassanRowDeletingEvent) Is Nothing) Then
                RaiseEvent NyuukinGassanRowDeleting(Me, New NyuukinGassanRowChangeEvent(CType(e.Row,NyuukinGassanRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNyuukinGassanRow(ByVal row As NyuukinGassanRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As NyuukinCsvDataSet = New NyuukinCsvDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NyuukinGassanDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NyuukinErrDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnkbn As Global.System.Data.DataColumn
        
        Private columnhosyousyo_no As Global.System.Data.DataColumn
        
        Private columnbunrui_cd As Global.System.Data.DataColumn
        
        Private columnedi_jouhou_sakusei_date As Global.System.Data.DataColumn
        
        Private columngyou_no As Global.System.Data.DataColumn
        
        Private columnsyori_datetime As Global.System.Data.DataColumn
        
        Private columngroup_cd As Global.System.Data.DataColumn
        
        Private columnkokyaku_cd As Global.System.Data.DataColumn
        
        Private columntekiyou As Global.System.Data.DataColumn
        
        Private columnzeikomi_nyuukin_gaku As Global.System.Data.DataColumn
        
        Private columnsyouhin_cd As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NyuukinErr"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kbnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkbn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property hosyousyo_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhosyousyo_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bunrui_cdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbunrui_cd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property edi_jouhou_sakusei_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnedi_jouhou_sakusei_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gyou_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngyou_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syori_datetimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyori_datetime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property group_cdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngroup_cd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kokyaku_cdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkokyaku_cd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tekiyouColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntekiyou
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property zeikomi_nyuukin_gakuColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnzeikomi_nyuukin_gaku
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syouhin_cdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyouhin_cd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NyuukinErrRow
            Get
                Return CType(Me.Rows(index),NyuukinErrRow)
            End Get
        End Property
        
        Public Event NyuukinErrRowChanging As NyuukinErrRowChangeEventHandler
        
        Public Event NyuukinErrRowChanged As NyuukinErrRowChangeEventHandler
        
        Public Event NyuukinErrRowDeleting As NyuukinErrRowChangeEventHandler
        
        Public Event NyuukinErrRowDeleted As NyuukinErrRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNyuukinErrRow(ByVal row As NyuukinErrRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNyuukinErrRow(ByVal kbn As String, ByVal hosyousyo_no As String, ByVal bunrui_cd As String, ByVal edi_jouhou_sakusei_date As String, ByVal gyou_no As Integer, ByVal syori_datetime As Date, ByVal group_cd As String, ByVal kokyaku_cd As String, ByVal tekiyou As String, ByVal zeikomi_nyuukin_gaku As Integer, ByVal syouhin_cd As String) As NyuukinErrRow
            Dim rowNyuukinErrRow As NyuukinErrRow = CType(Me.NewRow,NyuukinErrRow)
            Dim columnValuesArray() As Object = New Object() {kbn, hosyousyo_no, bunrui_cd, edi_jouhou_sakusei_date, gyou_no, syori_datetime, group_cd, kokyaku_cd, tekiyou, zeikomi_nyuukin_gaku, syouhin_cd}
            rowNyuukinErrRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNyuukinErrRow)
            Return rowNyuukinErrRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NyuukinErrDataTable = CType(MyBase.Clone,NyuukinErrDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NyuukinErrDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnkbn = MyBase.Columns("kbn")
            Me.columnhosyousyo_no = MyBase.Columns("hosyousyo_no")
            Me.columnbunrui_cd = MyBase.Columns("bunrui_cd")
            Me.columnedi_jouhou_sakusei_date = MyBase.Columns("edi_jouhou_sakusei_date")
            Me.columngyou_no = MyBase.Columns("gyou_no")
            Me.columnsyori_datetime = MyBase.Columns("syori_datetime")
            Me.columngroup_cd = MyBase.Columns("group_cd")
            Me.columnkokyaku_cd = MyBase.Columns("kokyaku_cd")
            Me.columntekiyou = MyBase.Columns("tekiyou")
            Me.columnzeikomi_nyuukin_gaku = MyBase.Columns("zeikomi_nyuukin_gaku")
            Me.columnsyouhin_cd = MyBase.Columns("syouhin_cd")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnkbn = New Global.System.Data.DataColumn("kbn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkbn)
            Me.columnhosyousyo_no = New Global.System.Data.DataColumn("hosyousyo_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhosyousyo_no)
            Me.columnbunrui_cd = New Global.System.Data.DataColumn("bunrui_cd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbunrui_cd)
            Me.columnedi_jouhou_sakusei_date = New Global.System.Data.DataColumn("edi_jouhou_sakusei_date", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnedi_jouhou_sakusei_date)
            Me.columngyou_no = New Global.System.Data.DataColumn("gyou_no", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngyou_no)
            Me.columnsyori_datetime = New Global.System.Data.DataColumn("syori_datetime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyori_datetime)
            Me.columngroup_cd = New Global.System.Data.DataColumn("group_cd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngroup_cd)
            Me.columnkokyaku_cd = New Global.System.Data.DataColumn("kokyaku_cd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkokyaku_cd)
            Me.columntekiyou = New Global.System.Data.DataColumn("tekiyou", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntekiyou)
            Me.columnzeikomi_nyuukin_gaku = New Global.System.Data.DataColumn("zeikomi_nyuukin_gaku", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnzeikomi_nyuukin_gaku)
            Me.columnsyouhin_cd = New Global.System.Data.DataColumn("syouhin_cd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyouhin_cd)
            Me.columnkbn.MaxLength = 1
            Me.columnhosyousyo_no.MaxLength = 10
            Me.columnbunrui_cd.MaxLength = 3
            Me.columnedi_jouhou_sakusei_date.MaxLength = 40
            Me.columngroup_cd.MaxLength = 30
            Me.columnkokyaku_cd.MaxLength = 30
            Me.columntekiyou.MaxLength = 510
            Me.columnsyouhin_cd.MaxLength = 8
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNyuukinErrRow() As NyuukinErrRow
            Return CType(Me.NewRow,NyuukinErrRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NyuukinErrRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NyuukinErrRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NyuukinErrRowChangedEvent) Is Nothing) Then
                RaiseEvent NyuukinErrRowChanged(Me, New NyuukinErrRowChangeEvent(CType(e.Row,NyuukinErrRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NyuukinErrRowChangingEvent) Is Nothing) Then
                RaiseEvent NyuukinErrRowChanging(Me, New NyuukinErrRowChangeEvent(CType(e.Row,NyuukinErrRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NyuukinErrRowDeletedEvent) Is Nothing) Then
                RaiseEvent NyuukinErrRowDeleted(Me, New NyuukinErrRowChangeEvent(CType(e.Row,NyuukinErrRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NyuukinErrRowDeletingEvent) Is Nothing) Then
                RaiseEvent NyuukinErrRowDeleting(Me, New NyuukinErrRowChangeEvent(CType(e.Row,NyuukinErrRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNyuukinErrRow(ByVal row As NyuukinErrRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As NyuukinCsvDataSet = New NyuukinCsvDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NyuukinErrDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NyuukinKeyRow
        Inherits Global.System.Data.DataRow
        
        Private tableNyuukinKey As NyuukinKeyDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNyuukinKey = CType(Me.Table,NyuukinKeyDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kbn() As String
            Get
                Return CType(Me(Me.tableNyuukinKey.kbnColumn),String)
            End Get
            Set
                Me(Me.tableNyuukinKey.kbnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property hosyousyo_no() As String
            Get
                Return CType(Me(Me.tableNyuukinKey.hosyousyo_noColumn),String)
            End Get
            Set
                Me(Me.tableNyuukinKey.hosyousyo_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bunrui_cd() As String
            Get
                Return CType(Me(Me.tableNyuukinKey.bunrui_cdColumn),String)
            End Get
            Set
                Me(Me.tableNyuukinKey.bunrui_cdColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NyuukinGassanRow
        Inherits Global.System.Data.DataRow
        
        Private tableNyuukinGassan As NyuukinGassanDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNyuukinGassan = CType(Me.Table,NyuukinGassanDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kbn() As String
            Get
                Return CType(Me(Me.tableNyuukinGassan.kbnColumn),String)
            End Get
            Set
                Me(Me.tableNyuukinGassan.kbnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property hosyousyo_no() As String
            Get
                Return CType(Me(Me.tableNyuukinGassan.hosyousyo_noColumn),String)
            End Get
            Set
                Me(Me.tableNyuukinGassan.hosyousyo_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bunrui_cd() As String
            Get
                Return CType(Me(Me.tableNyuukinGassan.bunrui_cdColumn),String)
            End Get
            Set
                Me(Me.tableNyuukinGassan.bunrui_cdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property zeikomi_nyuukin_gaku() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNyuukinGassan.zeikomi_nyuukin_gakuColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'NyuukinGassan' にある列 'zeikomi_nyuukin_gaku' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableNyuukinGassan.zeikomi_nyuukin_gakuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property zeikomi_henkin_gaku() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNyuukinGassan.zeikomi_henkin_gakuColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'NyuukinGassan' にある列 'zeikomi_henkin_gaku' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableNyuukinGassan.zeikomi_henkin_gakuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saisyuu_nyuukin_date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableNyuukinGassan.saisyuu_nyuukin_dateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'NyuukinGassan' にある列 'saisyuu_nyuukin_date' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableNyuukinGassan.saisyuu_nyuukin_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iszeikomi_nyuukin_gakuNull() As Boolean
            Return Me.IsNull(Me.tableNyuukinGassan.zeikomi_nyuukin_gakuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setzeikomi_nyuukin_gakuNull()
            Me(Me.tableNyuukinGassan.zeikomi_nyuukin_gakuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iszeikomi_henkin_gakuNull() As Boolean
            Return Me.IsNull(Me.tableNyuukinGassan.zeikomi_henkin_gakuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setzeikomi_henkin_gakuNull()
            Me(Me.tableNyuukinGassan.zeikomi_henkin_gakuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issaisyuu_nyuukin_dateNull() As Boolean
            Return Me.IsNull(Me.tableNyuukinGassan.saisyuu_nyuukin_dateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsaisyuu_nyuukin_dateNull()
            Me(Me.tableNyuukinGassan.saisyuu_nyuukin_dateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NyuukinErrRow
        Inherits Global.System.Data.DataRow
        
        Private tableNyuukinErr As NyuukinErrDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNyuukinErr = CType(Me.Table,NyuukinErrDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kbn() As String
            Get
                Try 
                    Return CType(Me(Me.tableNyuukinErr.kbnColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'NyuukinErr' にある列 'kbn' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableNyuukinErr.kbnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property hosyousyo_no() As String
            Get
                Try 
                    Return CType(Me(Me.tableNyuukinErr.hosyousyo_noColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'NyuukinErr' にある列 'hosyousyo_no' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableNyuukinErr.hosyousyo_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bunrui_cd() As String
            Get
                Try 
                    Return CType(Me(Me.tableNyuukinErr.bunrui_cdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'NyuukinErr' にある列 'bunrui_cd' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableNyuukinErr.bunrui_cdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property edi_jouhou_sakusei_date() As String
            Get
                Try 
                    Return CType(Me(Me.tableNyuukinErr.edi_jouhou_sakusei_dateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'NyuukinErr' にある列 'edi_jouhou_sakusei_date' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableNyuukinErr.edi_jouhou_sakusei_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property gyou_no() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNyuukinErr.gyou_noColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'NyuukinErr' にある列 'gyou_no' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableNyuukinErr.gyou_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syori_datetime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableNyuukinErr.syori_datetimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'NyuukinErr' にある列 'syori_datetime' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableNyuukinErr.syori_datetimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property group_cd() As String
            Get
                Try 
                    Return CType(Me(Me.tableNyuukinErr.group_cdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'NyuukinErr' にある列 'group_cd' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableNyuukinErr.group_cdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kokyaku_cd() As String
            Get
                Try 
                    Return CType(Me(Me.tableNyuukinErr.kokyaku_cdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'NyuukinErr' にある列 'kokyaku_cd' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableNyuukinErr.kokyaku_cdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tekiyou() As String
            Get
                Try 
                    Return CType(Me(Me.tableNyuukinErr.tekiyouColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'NyuukinErr' にある列 'tekiyou' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableNyuukinErr.tekiyouColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property zeikomi_nyuukin_gaku() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNyuukinErr.zeikomi_nyuukin_gakuColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'NyuukinErr' にある列 'zeikomi_nyuukin_gaku' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableNyuukinErr.zeikomi_nyuukin_gakuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syouhin_cd() As String
            Get
                Try 
                    Return CType(Me(Me.tableNyuukinErr.syouhin_cdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'NyuukinErr' にある列 'syouhin_cd' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableNyuukinErr.syouhin_cdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IskbnNull() As Boolean
            Return Me.IsNull(Me.tableNyuukinErr.kbnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetkbnNull()
            Me(Me.tableNyuukinErr.kbnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ishosyousyo_noNull() As Boolean
            Return Me.IsNull(Me.tableNyuukinErr.hosyousyo_noColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sethosyousyo_noNull()
            Me(Me.tableNyuukinErr.hosyousyo_noColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isbunrui_cdNull() As Boolean
            Return Me.IsNull(Me.tableNyuukinErr.bunrui_cdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setbunrui_cdNull()
            Me(Me.tableNyuukinErr.bunrui_cdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isedi_jouhou_sakusei_dateNull() As Boolean
            Return Me.IsNull(Me.tableNyuukinErr.edi_jouhou_sakusei_dateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setedi_jouhou_sakusei_dateNull()
            Me(Me.tableNyuukinErr.edi_jouhou_sakusei_dateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isgyou_noNull() As Boolean
            Return Me.IsNull(Me.tableNyuukinErr.gyou_noColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setgyou_noNull()
            Me(Me.tableNyuukinErr.gyou_noColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issyori_datetimeNull() As Boolean
            Return Me.IsNull(Me.tableNyuukinErr.syori_datetimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsyori_datetimeNull()
            Me(Me.tableNyuukinErr.syori_datetimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isgroup_cdNull() As Boolean
            Return Me.IsNull(Me.tableNyuukinErr.group_cdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setgroup_cdNull()
            Me(Me.tableNyuukinErr.group_cdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iskokyaku_cdNull() As Boolean
            Return Me.IsNull(Me.tableNyuukinErr.kokyaku_cdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setkokyaku_cdNull()
            Me(Me.tableNyuukinErr.kokyaku_cdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstekiyouNull() As Boolean
            Return Me.IsNull(Me.tableNyuukinErr.tekiyouColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettekiyouNull()
            Me(Me.tableNyuukinErr.tekiyouColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iszeikomi_nyuukin_gakuNull() As Boolean
            Return Me.IsNull(Me.tableNyuukinErr.zeikomi_nyuukin_gakuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setzeikomi_nyuukin_gakuNull()
            Me(Me.tableNyuukinErr.zeikomi_nyuukin_gakuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issyouhin_cdNull() As Boolean
            Return Me.IsNull(Me.tableNyuukinErr.syouhin_cdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsyouhin_cdNull()
            Me(Me.tableNyuukinErr.syouhin_cdColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NyuukinKeyRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NyuukinKeyRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NyuukinKeyRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NyuukinKeyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NyuukinGassanRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NyuukinGassanRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NyuukinGassanRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NyuukinGassanRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NyuukinErrRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NyuukinErrRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NyuukinErrRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NyuukinErrRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
