'------------------------------------------------------------------------------
' <auto-generated>
'     このコードはツールによって生成されました。
'     ランタイム バージョン:2.0.50727.3053
'
'     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
'     コードが再生成されるときに損失したりします。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("EigyouJyouhouDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class EigyouJyouhouDataSet
    Inherits Global.System.Data.DataSet
    
    Private tablesosikiLabel As sosikiLabelDataTable
    
    Private tablebusyoCd As busyoCdDataTable
    
    Private tableeigyouManKbn As eigyouManKbnDataTable
    
    Private tableeigyouJyouhou As eigyouJyouhouDataTable
    
    Private tableparamEigyouJyouhou As paramEigyouJyouhouDataTable
    
    Private tableeigyouJyouhouCount As eigyouJyouhouCountDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("sosikiLabel")) Is Nothing) Then
                MyBase.Tables.Add(New sosikiLabelDataTable(ds.Tables("sosikiLabel")))
            End If
            If (Not (ds.Tables("busyoCd")) Is Nothing) Then
                MyBase.Tables.Add(New busyoCdDataTable(ds.Tables("busyoCd")))
            End If
            If (Not (ds.Tables("eigyouManKbn")) Is Nothing) Then
                MyBase.Tables.Add(New eigyouManKbnDataTable(ds.Tables("eigyouManKbn")))
            End If
            If (Not (ds.Tables("eigyouJyouhou")) Is Nothing) Then
                MyBase.Tables.Add(New eigyouJyouhouDataTable(ds.Tables("eigyouJyouhou")))
            End If
            If (Not (ds.Tables("paramEigyouJyouhou")) Is Nothing) Then
                MyBase.Tables.Add(New paramEigyouJyouhouDataTable(ds.Tables("paramEigyouJyouhou")))
            End If
            If (Not (ds.Tables("eigyouJyouhouCount")) Is Nothing) Then
                MyBase.Tables.Add(New eigyouJyouhouCountDataTable(ds.Tables("eigyouJyouhouCount")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sosikiLabel() As sosikiLabelDataTable
        Get
            Return Me.tablesosikiLabel
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property busyoCd() As busyoCdDataTable
        Get
            Return Me.tablebusyoCd
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property eigyouManKbn() As eigyouManKbnDataTable
        Get
            Return Me.tableeigyouManKbn
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property eigyouJyouhou() As eigyouJyouhouDataTable
        Get
            Return Me.tableeigyouJyouhou
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property paramEigyouJyouhou() As paramEigyouJyouhouDataTable
        Get
            Return Me.tableparamEigyouJyouhou
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property eigyouJyouhouCount() As eigyouJyouhouCountDataTable
        Get
            Return Me.tableeigyouJyouhouCount
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As EigyouJyouhouDataSet = CType(MyBase.Clone,EigyouJyouhouDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("sosikiLabel")) Is Nothing) Then
                MyBase.Tables.Add(New sosikiLabelDataTable(ds.Tables("sosikiLabel")))
            End If
            If (Not (ds.Tables("busyoCd")) Is Nothing) Then
                MyBase.Tables.Add(New busyoCdDataTable(ds.Tables("busyoCd")))
            End If
            If (Not (ds.Tables("eigyouManKbn")) Is Nothing) Then
                MyBase.Tables.Add(New eigyouManKbnDataTable(ds.Tables("eigyouManKbn")))
            End If
            If (Not (ds.Tables("eigyouJyouhou")) Is Nothing) Then
                MyBase.Tables.Add(New eigyouJyouhouDataTable(ds.Tables("eigyouJyouhou")))
            End If
            If (Not (ds.Tables("paramEigyouJyouhou")) Is Nothing) Then
                MyBase.Tables.Add(New paramEigyouJyouhouDataTable(ds.Tables("paramEigyouJyouhou")))
            End If
            If (Not (ds.Tables("eigyouJyouhouCount")) Is Nothing) Then
                MyBase.Tables.Add(New eigyouJyouhouCountDataTable(ds.Tables("eigyouJyouhouCount")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablesosikiLabel = CType(MyBase.Tables("sosikiLabel"),sosikiLabelDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesosikiLabel) Is Nothing) Then
                Me.tablesosikiLabel.InitVars
            End If
        End If
        Me.tablebusyoCd = CType(MyBase.Tables("busyoCd"),busyoCdDataTable)
        If (initTable = true) Then
            If (Not (Me.tablebusyoCd) Is Nothing) Then
                Me.tablebusyoCd.InitVars
            End If
        End If
        Me.tableeigyouManKbn = CType(MyBase.Tables("eigyouManKbn"),eigyouManKbnDataTable)
        If (initTable = true) Then
            If (Not (Me.tableeigyouManKbn) Is Nothing) Then
                Me.tableeigyouManKbn.InitVars
            End If
        End If
        Me.tableeigyouJyouhou = CType(MyBase.Tables("eigyouJyouhou"),eigyouJyouhouDataTable)
        If (initTable = true) Then
            If (Not (Me.tableeigyouJyouhou) Is Nothing) Then
                Me.tableeigyouJyouhou.InitVars
            End If
        End If
        Me.tableparamEigyouJyouhou = CType(MyBase.Tables("paramEigyouJyouhou"),paramEigyouJyouhouDataTable)
        If (initTable = true) Then
            If (Not (Me.tableparamEigyouJyouhou) Is Nothing) Then
                Me.tableparamEigyouJyouhou.InitVars
            End If
        End If
        Me.tableeigyouJyouhouCount = CType(MyBase.Tables("eigyouJyouhouCount"),eigyouJyouhouCountDataTable)
        If (initTable = true) Then
            If (Not (Me.tableeigyouJyouhouCount) Is Nothing) Then
                Me.tableeigyouJyouhouCount.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "EigyouJyouhouDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/EigyouJyouhouDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablesosikiLabel = New sosikiLabelDataTable
        MyBase.Tables.Add(Me.tablesosikiLabel)
        Me.tablebusyoCd = New busyoCdDataTable
        MyBase.Tables.Add(Me.tablebusyoCd)
        Me.tableeigyouManKbn = New eigyouManKbnDataTable
        MyBase.Tables.Add(Me.tableeigyouManKbn)
        Me.tableeigyouJyouhou = New eigyouJyouhouDataTable
        MyBase.Tables.Add(Me.tableeigyouJyouhou)
        Me.tableparamEigyouJyouhou = New paramEigyouJyouhouDataTable
        MyBase.Tables.Add(Me.tableparamEigyouJyouhou)
        Me.tableeigyouJyouhouCount = New eigyouJyouhouCountDataTable
        MyBase.Tables.Add(Me.tableeigyouJyouhouCount)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesosikiLabel() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializebusyoCd() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeeigyouManKbn() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeeigyouJyouhou() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeparamEigyouJyouhou() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeeigyouJyouhouCount() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As EigyouJyouhouDataSet = New EigyouJyouhouDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub sosikiLabelRowChangeEventHandler(ByVal sender As Object, ByVal e As sosikiLabelRowChangeEvent)
    
    Public Delegate Sub busyoCdRowChangeEventHandler(ByVal sender As Object, ByVal e As busyoCdRowChangeEvent)
    
    Public Delegate Sub eigyouManKbnRowChangeEventHandler(ByVal sender As Object, ByVal e As eigyouManKbnRowChangeEvent)
    
    Public Delegate Sub eigyouJyouhouRowChangeEventHandler(ByVal sender As Object, ByVal e As eigyouJyouhouRowChangeEvent)
    
    Public Delegate Sub paramEigyouJyouhouRowChangeEventHandler(ByVal sender As Object, ByVal e As paramEigyouJyouhouRowChangeEvent)
    
    Public Delegate Sub eigyouJyouhouCountRowChangeEventHandler(ByVal sender As Object, ByVal e As eigyouJyouhouCountRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sosikiLabelDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncode As Global.System.Data.DataColumn
        
        Private columnmeisyou As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sosikiLabel"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property meisyouColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeisyou
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sosikiLabelRow
            Get
                Return CType(Me.Rows(index),sosikiLabelRow)
            End Get
        End Property
        
        Public Event sosikiLabelRowChanging As sosikiLabelRowChangeEventHandler
        
        Public Event sosikiLabelRowChanged As sosikiLabelRowChangeEventHandler
        
        Public Event sosikiLabelRowDeleting As sosikiLabelRowChangeEventHandler
        
        Public Event sosikiLabelRowDeleted As sosikiLabelRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddsosikiLabelRow(ByVal row As sosikiLabelRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddsosikiLabelRow(ByVal code As String, ByVal meisyou As String) As sosikiLabelRow
            Dim rowsosikiLabelRow As sosikiLabelRow = CType(Me.NewRow,sosikiLabelRow)
            Dim columnValuesArray() As Object = New Object() {code, meisyou}
            rowsosikiLabelRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsosikiLabelRow)
            Return rowsosikiLabelRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sosikiLabelDataTable = CType(MyBase.Clone,sosikiLabelDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sosikiLabelDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncode = MyBase.Columns("code")
            Me.columnmeisyou = MyBase.Columns("meisyou")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncode = New Global.System.Data.DataColumn("code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncode)
            Me.columnmeisyou = New Global.System.Data.DataColumn("meisyou", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeisyou)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewsosikiLabelRow() As sosikiLabelRow
            Return CType(Me.NewRow,sosikiLabelRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sosikiLabelRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sosikiLabelRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sosikiLabelRowChangedEvent) Is Nothing) Then
                RaiseEvent sosikiLabelRowChanged(Me, New sosikiLabelRowChangeEvent(CType(e.Row,sosikiLabelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sosikiLabelRowChangingEvent) Is Nothing) Then
                RaiseEvent sosikiLabelRowChanging(Me, New sosikiLabelRowChangeEvent(CType(e.Row,sosikiLabelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sosikiLabelRowDeletedEvent) Is Nothing) Then
                RaiseEvent sosikiLabelRowDeleted(Me, New sosikiLabelRowChangeEvent(CType(e.Row,sosikiLabelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sosikiLabelRowDeletingEvent) Is Nothing) Then
                RaiseEvent sosikiLabelRowDeleting(Me, New sosikiLabelRowChangeEvent(CType(e.Row,sosikiLabelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovesosikiLabelRow(ByVal row As sosikiLabelRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As EigyouJyouhouDataSet = New EigyouJyouhouDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sosikiLabelDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class busyoCdDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnbusyo_cd As Global.System.Data.DataColumn
        
        Private columnbusyo_mei As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "busyoCd"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property busyo_cdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbusyo_cd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property busyo_meiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbusyo_mei
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As busyoCdRow
            Get
                Return CType(Me.Rows(index),busyoCdRow)
            End Get
        End Property
        
        Public Event busyoCdRowChanging As busyoCdRowChangeEventHandler
        
        Public Event busyoCdRowChanged As busyoCdRowChangeEventHandler
        
        Public Event busyoCdRowDeleting As busyoCdRowChangeEventHandler
        
        Public Event busyoCdRowDeleted As busyoCdRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddbusyoCdRow(ByVal row As busyoCdRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddbusyoCdRow(ByVal busyo_cd As String, ByVal busyo_mei As String) As busyoCdRow
            Dim rowbusyoCdRow As busyoCdRow = CType(Me.NewRow,busyoCdRow)
            Dim columnValuesArray() As Object = New Object() {busyo_cd, busyo_mei}
            rowbusyoCdRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowbusyoCdRow)
            Return rowbusyoCdRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As busyoCdDataTable = CType(MyBase.Clone,busyoCdDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New busyoCdDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnbusyo_cd = MyBase.Columns("busyo_cd")
            Me.columnbusyo_mei = MyBase.Columns("busyo_mei")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnbusyo_cd = New Global.System.Data.DataColumn("busyo_cd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbusyo_cd)
            Me.columnbusyo_mei = New Global.System.Data.DataColumn("busyo_mei", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbusyo_mei)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewbusyoCdRow() As busyoCdRow
            Return CType(Me.NewRow,busyoCdRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New busyoCdRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(busyoCdRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.busyoCdRowChangedEvent) Is Nothing) Then
                RaiseEvent busyoCdRowChanged(Me, New busyoCdRowChangeEvent(CType(e.Row,busyoCdRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.busyoCdRowChangingEvent) Is Nothing) Then
                RaiseEvent busyoCdRowChanging(Me, New busyoCdRowChangeEvent(CType(e.Row,busyoCdRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.busyoCdRowDeletedEvent) Is Nothing) Then
                RaiseEvent busyoCdRowDeleted(Me, New busyoCdRowChangeEvent(CType(e.Row,busyoCdRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.busyoCdRowDeletingEvent) Is Nothing) Then
                RaiseEvent busyoCdRowDeleting(Me, New busyoCdRowChangeEvent(CType(e.Row,busyoCdRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovebusyoCdRow(ByVal row As busyoCdRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As EigyouJyouhouDataSet = New EigyouJyouhouDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "busyoCdDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class eigyouManKbnDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columneigyou_man_kbn As Global.System.Data.DataColumn
        
        Private columnlogin_user_id As Global.System.Data.DataColumn
        
        Private columnsosiki_level As Global.System.Data.DataColumn
        
        Private columnt_sansyou_busyo_cd As Global.System.Data.DataColumn
        
        Private columnbusyo_cd As Global.System.Data.DataColumn
        
        Private columnsosiki_level2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "eigyouManKbn"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property eigyou_man_kbnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneigyou_man_kbn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property login_user_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlogin_user_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sosiki_levelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsosiki_level
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property t_sansyou_busyo_cdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnt_sansyou_busyo_cd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property busyo_cdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbusyo_cd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sosiki_level2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnsosiki_level2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As eigyouManKbnRow
            Get
                Return CType(Me.Rows(index),eigyouManKbnRow)
            End Get
        End Property
        
        Public Event eigyouManKbnRowChanging As eigyouManKbnRowChangeEventHandler
        
        Public Event eigyouManKbnRowChanged As eigyouManKbnRowChangeEventHandler
        
        Public Event eigyouManKbnRowDeleting As eigyouManKbnRowChangeEventHandler
        
        Public Event eigyouManKbnRowDeleted As eigyouManKbnRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddeigyouManKbnRow(ByVal row As eigyouManKbnRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddeigyouManKbnRow(ByVal eigyou_man_kbn As String, ByVal login_user_id As String, ByVal sosiki_level As String, ByVal t_sansyou_busyo_cd As String, ByVal busyo_cd As String, ByVal sosiki_level2 As String) As eigyouManKbnRow
            Dim roweigyouManKbnRow As eigyouManKbnRow = CType(Me.NewRow,eigyouManKbnRow)
            Dim columnValuesArray() As Object = New Object() {eigyou_man_kbn, login_user_id, sosiki_level, t_sansyou_busyo_cd, busyo_cd, sosiki_level2}
            roweigyouManKbnRow.ItemArray = columnValuesArray
            Me.Rows.Add(roweigyouManKbnRow)
            Return roweigyouManKbnRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As eigyouManKbnDataTable = CType(MyBase.Clone,eigyouManKbnDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New eigyouManKbnDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columneigyou_man_kbn = MyBase.Columns("eigyou_man_kbn")
            Me.columnlogin_user_id = MyBase.Columns("login_user_id")
            Me.columnsosiki_level = MyBase.Columns("sosiki_level")
            Me.columnt_sansyou_busyo_cd = MyBase.Columns("t_sansyou_busyo_cd")
            Me.columnbusyo_cd = MyBase.Columns("busyo_cd")
            Me.columnsosiki_level2 = MyBase.Columns("sosiki_level2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columneigyou_man_kbn = New Global.System.Data.DataColumn("eigyou_man_kbn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneigyou_man_kbn)
            Me.columnlogin_user_id = New Global.System.Data.DataColumn("login_user_id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlogin_user_id)
            Me.columnsosiki_level = New Global.System.Data.DataColumn("sosiki_level", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsosiki_level)
            Me.columnt_sansyou_busyo_cd = New Global.System.Data.DataColumn("t_sansyou_busyo_cd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnt_sansyou_busyo_cd)
            Me.columnbusyo_cd = New Global.System.Data.DataColumn("busyo_cd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbusyo_cd)
            Me.columnsosiki_level2 = New Global.System.Data.DataColumn("sosiki_level2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsosiki_level2)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NeweigyouManKbnRow() As eigyouManKbnRow
            Return CType(Me.NewRow,eigyouManKbnRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New eigyouManKbnRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(eigyouManKbnRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.eigyouManKbnRowChangedEvent) Is Nothing) Then
                RaiseEvent eigyouManKbnRowChanged(Me, New eigyouManKbnRowChangeEvent(CType(e.Row,eigyouManKbnRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.eigyouManKbnRowChangingEvent) Is Nothing) Then
                RaiseEvent eigyouManKbnRowChanging(Me, New eigyouManKbnRowChangeEvent(CType(e.Row,eigyouManKbnRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.eigyouManKbnRowDeletedEvent) Is Nothing) Then
                RaiseEvent eigyouManKbnRowDeleted(Me, New eigyouManKbnRowChangeEvent(CType(e.Row,eigyouManKbnRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.eigyouManKbnRowDeletingEvent) Is Nothing) Then
                RaiseEvent eigyouManKbnRowDeleting(Me, New eigyouManKbnRowChangeEvent(CType(e.Row,eigyouManKbnRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveeigyouManKbnRow(ByVal row As eigyouManKbnRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As EigyouJyouhouDataSet = New EigyouJyouhouDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "eigyouManKbnDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class eigyouJyouhouDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnbusyo_mei As Global.System.Data.DataColumn
        
        Private columnDisplayName As Global.System.Data.DataColumn
        
        Private columnkameiten_cd As Global.System.Data.DataColumn
        
        Private columnkameiten_mei As Global.System.Data.DataColumn
        
        Private columntodouhuken_mei As Global.System.Data.DataColumn
        
        Private columntyousa As Global.System.Data.DataColumn
        
        Private columnkouji As Global.System.Data.DataColumn
        
        Private columnsonota As Global.System.Data.DataColumn
        
        Private columntorikesi As Global.System.Data.DataColumn
        
        Private columntorikesi_txt As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "eigyouJyouhou"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property busyo_meiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbusyo_mei
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DisplayNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDisplayName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kameiten_cdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkameiten_cd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kameiten_meiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkameiten_mei
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property todouhuken_meiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntodouhuken_mei
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tyousaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntyousa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property koujiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkouji
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sonotaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsonota
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property torikesiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntorikesi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property torikesi_txtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntorikesi_txt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As eigyouJyouhouRow
            Get
                Return CType(Me.Rows(index),eigyouJyouhouRow)
            End Get
        End Property
        
        Public Event eigyouJyouhouRowChanging As eigyouJyouhouRowChangeEventHandler
        
        Public Event eigyouJyouhouRowChanged As eigyouJyouhouRowChangeEventHandler
        
        Public Event eigyouJyouhouRowDeleting As eigyouJyouhouRowChangeEventHandler
        
        Public Event eigyouJyouhouRowDeleted As eigyouJyouhouRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddeigyouJyouhouRow(ByVal row As eigyouJyouhouRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddeigyouJyouhouRow(ByVal busyo_mei As String, ByVal DisplayName As String, ByVal kameiten_cd As String, ByVal kameiten_mei As String, ByVal todouhuken_mei As String, ByVal tyousa As String, ByVal kouji As String, ByVal sonota As String, ByVal torikesi As Long, ByVal torikesi_txt As String) As eigyouJyouhouRow
            Dim roweigyouJyouhouRow As eigyouJyouhouRow = CType(Me.NewRow,eigyouJyouhouRow)
            Dim columnValuesArray() As Object = New Object() {busyo_mei, DisplayName, kameiten_cd, kameiten_mei, todouhuken_mei, tyousa, kouji, sonota, torikesi, torikesi_txt}
            roweigyouJyouhouRow.ItemArray = columnValuesArray
            Me.Rows.Add(roweigyouJyouhouRow)
            Return roweigyouJyouhouRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As eigyouJyouhouDataTable = CType(MyBase.Clone,eigyouJyouhouDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New eigyouJyouhouDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnbusyo_mei = MyBase.Columns("busyo_mei")
            Me.columnDisplayName = MyBase.Columns("DisplayName")
            Me.columnkameiten_cd = MyBase.Columns("kameiten_cd")
            Me.columnkameiten_mei = MyBase.Columns("kameiten_mei")
            Me.columntodouhuken_mei = MyBase.Columns("todouhuken_mei")
            Me.columntyousa = MyBase.Columns("tyousa")
            Me.columnkouji = MyBase.Columns("kouji")
            Me.columnsonota = MyBase.Columns("sonota")
            Me.columntorikesi = MyBase.Columns("torikesi")
            Me.columntorikesi_txt = MyBase.Columns("torikesi_txt")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnbusyo_mei = New Global.System.Data.DataColumn("busyo_mei", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbusyo_mei)
            Me.columnDisplayName = New Global.System.Data.DataColumn("DisplayName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDisplayName)
            Me.columnkameiten_cd = New Global.System.Data.DataColumn("kameiten_cd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkameiten_cd)
            Me.columnkameiten_mei = New Global.System.Data.DataColumn("kameiten_mei", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkameiten_mei)
            Me.columntodouhuken_mei = New Global.System.Data.DataColumn("todouhuken_mei", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntodouhuken_mei)
            Me.columntyousa = New Global.System.Data.DataColumn("tyousa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntyousa)
            Me.columnkouji = New Global.System.Data.DataColumn("kouji", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkouji)
            Me.columnsonota = New Global.System.Data.DataColumn("sonota", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsonota)
            Me.columntorikesi = New Global.System.Data.DataColumn("torikesi", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntorikesi)
            Me.columntorikesi_txt = New Global.System.Data.DataColumn("torikesi_txt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntorikesi_txt)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NeweigyouJyouhouRow() As eigyouJyouhouRow
            Return CType(Me.NewRow,eigyouJyouhouRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New eigyouJyouhouRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(eigyouJyouhouRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.eigyouJyouhouRowChangedEvent) Is Nothing) Then
                RaiseEvent eigyouJyouhouRowChanged(Me, New eigyouJyouhouRowChangeEvent(CType(e.Row,eigyouJyouhouRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.eigyouJyouhouRowChangingEvent) Is Nothing) Then
                RaiseEvent eigyouJyouhouRowChanging(Me, New eigyouJyouhouRowChangeEvent(CType(e.Row,eigyouJyouhouRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.eigyouJyouhouRowDeletedEvent) Is Nothing) Then
                RaiseEvent eigyouJyouhouRowDeleted(Me, New eigyouJyouhouRowChangeEvent(CType(e.Row,eigyouJyouhouRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.eigyouJyouhouRowDeletingEvent) Is Nothing) Then
                RaiseEvent eigyouJyouhouRowDeleting(Me, New eigyouJyouhouRowChangeEvent(CType(e.Row,eigyouJyouhouRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveeigyouJyouhouRow(ByVal row As eigyouJyouhouRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As EigyouJyouhouDataSet = New EigyouJyouhouDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "eigyouJyouhouDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class paramEigyouJyouhouDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnkbn As Global.System.Data.DataColumn
        
        Private columntorikesi As Global.System.Data.DataColumn
        
        Private columnkameitenCd As Global.System.Data.DataColumn
        
        Private columnkameitenKana As Global.System.Data.DataColumn
        
        Private columnkeiretuCd As Global.System.Data.DataColumn
        
        Private columntel As Global.System.Data.DataColumn
        
        Private columntodouhukenCd As Global.System.Data.DataColumn
        
        Private columnsosikiLevel As Global.System.Data.DataColumn
        
        Private columnBusyoCd As Global.System.Data.DataColumn
        
        Private columntantouEigyouId As Global.System.Data.DataColumn
        
        Private columnloginUserId As Global.System.Data.DataColumn
        
        Private columneigyouManKbn As Global.System.Data.DataColumn
        
        Private columnuserSosikiLevel As Global.System.Data.DataColumn
        
        Private columnkensakuCount As Global.System.Data.DataColumn
        
        Private columnbusyo_cd As Global.System.Data.DataColumn
        
        Private columnt_sansyou_busyo_cd As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "paramEigyouJyouhou"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kbnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkbn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property torikesiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntorikesi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kameitenCdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkameitenCd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kameitenKanaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkameitenKana
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property keiretuCdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkeiretuCd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property telColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property todouhukenCdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntodouhukenCd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sosikiLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsosikiLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BusyoCdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBusyoCd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tantouEigyouIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntantouEigyouId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property loginUserIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnloginUserId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property eigyouManKbnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneigyouManKbn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property userSosikiLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuserSosikiLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kensakuCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkensakuCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property busyo_cdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbusyo_cd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property t_sansyou_busyo_cdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnt_sansyou_busyo_cd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As paramEigyouJyouhouRow
            Get
                Return CType(Me.Rows(index),paramEigyouJyouhouRow)
            End Get
        End Property
        
        Public Event paramEigyouJyouhouRowChanging As paramEigyouJyouhouRowChangeEventHandler
        
        Public Event paramEigyouJyouhouRowChanged As paramEigyouJyouhouRowChangeEventHandler
        
        Public Event paramEigyouJyouhouRowDeleting As paramEigyouJyouhouRowChangeEventHandler
        
        Public Event paramEigyouJyouhouRowDeleted As paramEigyouJyouhouRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddparamEigyouJyouhouRow(ByVal row As paramEigyouJyouhouRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddparamEigyouJyouhouRow( _
                    ByVal kbn As String,  _
                    ByVal torikesi As String,  _
                    ByVal kameitenCd As String,  _
                    ByVal kameitenKana As String,  _
                    ByVal keiretuCd As String,  _
                    ByVal tel As String,  _
                    ByVal todouhukenCd As String,  _
                    ByVal sosikiLevel As String,  _
                    ByVal BusyoCd As String,  _
                    ByVal tantouEigyouId As String,  _
                    ByVal loginUserId As String,  _
                    ByVal eigyouManKbn As String,  _
                    ByVal userSosikiLevel As String,  _
                    ByVal kensakuCount As String,  _
                    ByVal busyo_cd As String,  _
                    ByVal t_sansyou_busyo_cd As String) As paramEigyouJyouhouRow
            Dim rowparamEigyouJyouhouRow As paramEigyouJyouhouRow = CType(Me.NewRow,paramEigyouJyouhouRow)
            Dim columnValuesArray() As Object = New Object() {kbn, torikesi, kameitenCd, kameitenKana, keiretuCd, tel, todouhukenCd, sosikiLevel, BusyoCd, tantouEigyouId, loginUserId, eigyouManKbn, userSosikiLevel, kensakuCount, busyo_cd, t_sansyou_busyo_cd}
            rowparamEigyouJyouhouRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowparamEigyouJyouhouRow)
            Return rowparamEigyouJyouhouRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As paramEigyouJyouhouDataTable = CType(MyBase.Clone,paramEigyouJyouhouDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New paramEigyouJyouhouDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnkbn = MyBase.Columns("kbn")
            Me.columntorikesi = MyBase.Columns("torikesi")
            Me.columnkameitenCd = MyBase.Columns("kameitenCd")
            Me.columnkameitenKana = MyBase.Columns("kameitenKana")
            Me.columnkeiretuCd = MyBase.Columns("keiretuCd")
            Me.columntel = MyBase.Columns("tel")
            Me.columntodouhukenCd = MyBase.Columns("todouhukenCd")
            Me.columnsosikiLevel = MyBase.Columns("sosikiLevel")
            Me.columnBusyoCd = MyBase.Columns("busyoCd")
            Me.columntantouEigyouId = MyBase.Columns("tantouEigyouId")
            Me.columnloginUserId = MyBase.Columns("loginUserId")
            Me.columneigyouManKbn = MyBase.Columns("eigyouManKbn")
            Me.columnuserSosikiLevel = MyBase.Columns("userSosikiLevel")
            Me.columnkensakuCount = MyBase.Columns("kensakuCount")
            Me.columnbusyo_cd = MyBase.Columns("busyo_cd")
            Me.columnt_sansyou_busyo_cd = MyBase.Columns("t_sansyou_busyo_cd")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnkbn = New Global.System.Data.DataColumn("kbn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkbn)
            Me.columntorikesi = New Global.System.Data.DataColumn("torikesi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntorikesi)
            Me.columnkameitenCd = New Global.System.Data.DataColumn("kameitenCd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkameitenCd)
            Me.columnkameitenKana = New Global.System.Data.DataColumn("kameitenKana", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkameitenKana)
            Me.columnkeiretuCd = New Global.System.Data.DataColumn("keiretuCd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkeiretuCd)
            Me.columntel = New Global.System.Data.DataColumn("tel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntel)
            Me.columntodouhukenCd = New Global.System.Data.DataColumn("todouhukenCd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntodouhukenCd)
            Me.columnsosikiLevel = New Global.System.Data.DataColumn("sosikiLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsosikiLevel)
            Me.columnBusyoCd = New Global.System.Data.DataColumn("busyoCd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnBusyoCd.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "BusyoCd")
            Me.columnBusyoCd.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "BusyoCdColumn")
            Me.columnBusyoCd.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnBusyoCd")
            Me.columnBusyoCd.ExtendedProperties.Add("Generator_UserColumnName", "busyoCd")
            MyBase.Columns.Add(Me.columnBusyoCd)
            Me.columntantouEigyouId = New Global.System.Data.DataColumn("tantouEigyouId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntantouEigyouId)
            Me.columnloginUserId = New Global.System.Data.DataColumn("loginUserId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnloginUserId)
            Me.columneigyouManKbn = New Global.System.Data.DataColumn("eigyouManKbn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneigyouManKbn)
            Me.columnuserSosikiLevel = New Global.System.Data.DataColumn("userSosikiLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuserSosikiLevel)
            Me.columnkensakuCount = New Global.System.Data.DataColumn("kensakuCount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkensakuCount)
            Me.columnbusyo_cd = New Global.System.Data.DataColumn("busyo_cd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbusyo_cd)
            Me.columnt_sansyou_busyo_cd = New Global.System.Data.DataColumn("t_sansyou_busyo_cd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnt_sansyou_busyo_cd)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewparamEigyouJyouhouRow() As paramEigyouJyouhouRow
            Return CType(Me.NewRow,paramEigyouJyouhouRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New paramEigyouJyouhouRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(paramEigyouJyouhouRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.paramEigyouJyouhouRowChangedEvent) Is Nothing) Then
                RaiseEvent paramEigyouJyouhouRowChanged(Me, New paramEigyouJyouhouRowChangeEvent(CType(e.Row,paramEigyouJyouhouRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.paramEigyouJyouhouRowChangingEvent) Is Nothing) Then
                RaiseEvent paramEigyouJyouhouRowChanging(Me, New paramEigyouJyouhouRowChangeEvent(CType(e.Row,paramEigyouJyouhouRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.paramEigyouJyouhouRowDeletedEvent) Is Nothing) Then
                RaiseEvent paramEigyouJyouhouRowDeleted(Me, New paramEigyouJyouhouRowChangeEvent(CType(e.Row,paramEigyouJyouhouRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.paramEigyouJyouhouRowDeletingEvent) Is Nothing) Then
                RaiseEvent paramEigyouJyouhouRowDeleting(Me, New paramEigyouJyouhouRowChangeEvent(CType(e.Row,paramEigyouJyouhouRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveparamEigyouJyouhouRow(ByVal row As paramEigyouJyouhouRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As EigyouJyouhouDataSet = New EigyouJyouhouDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "paramEigyouJyouhouDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class eigyouJyouhouCountDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnkameiten_cd_count As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "eigyouJyouhouCount"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kameiten_cd_countColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkameiten_cd_count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As eigyouJyouhouCountRow
            Get
                Return CType(Me.Rows(index),eigyouJyouhouCountRow)
            End Get
        End Property
        
        Public Event eigyouJyouhouCountRowChanging As eigyouJyouhouCountRowChangeEventHandler
        
        Public Event eigyouJyouhouCountRowChanged As eigyouJyouhouCountRowChangeEventHandler
        
        Public Event eigyouJyouhouCountRowDeleting As eigyouJyouhouCountRowChangeEventHandler
        
        Public Event eigyouJyouhouCountRowDeleted As eigyouJyouhouCountRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddeigyouJyouhouCountRow(ByVal row As eigyouJyouhouCountRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddeigyouJyouhouCountRow(ByVal kameiten_cd_count As Long) As eigyouJyouhouCountRow
            Dim roweigyouJyouhouCountRow As eigyouJyouhouCountRow = CType(Me.NewRow,eigyouJyouhouCountRow)
            Dim columnValuesArray() As Object = New Object() {kameiten_cd_count}
            roweigyouJyouhouCountRow.ItemArray = columnValuesArray
            Me.Rows.Add(roweigyouJyouhouCountRow)
            Return roweigyouJyouhouCountRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As eigyouJyouhouCountDataTable = CType(MyBase.Clone,eigyouJyouhouCountDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New eigyouJyouhouCountDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnkameiten_cd_count = MyBase.Columns("kameiten_cd_count")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnkameiten_cd_count = New Global.System.Data.DataColumn("kameiten_cd_count", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkameiten_cd_count)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NeweigyouJyouhouCountRow() As eigyouJyouhouCountRow
            Return CType(Me.NewRow,eigyouJyouhouCountRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New eigyouJyouhouCountRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(eigyouJyouhouCountRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.eigyouJyouhouCountRowChangedEvent) Is Nothing) Then
                RaiseEvent eigyouJyouhouCountRowChanged(Me, New eigyouJyouhouCountRowChangeEvent(CType(e.Row,eigyouJyouhouCountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.eigyouJyouhouCountRowChangingEvent) Is Nothing) Then
                RaiseEvent eigyouJyouhouCountRowChanging(Me, New eigyouJyouhouCountRowChangeEvent(CType(e.Row,eigyouJyouhouCountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.eigyouJyouhouCountRowDeletedEvent) Is Nothing) Then
                RaiseEvent eigyouJyouhouCountRowDeleted(Me, New eigyouJyouhouCountRowChangeEvent(CType(e.Row,eigyouJyouhouCountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.eigyouJyouhouCountRowDeletingEvent) Is Nothing) Then
                RaiseEvent eigyouJyouhouCountRowDeleting(Me, New eigyouJyouhouCountRowChangeEvent(CType(e.Row,eigyouJyouhouCountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveeigyouJyouhouCountRow(ByVal row As eigyouJyouhouCountRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As EigyouJyouhouDataSet = New EigyouJyouhouDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "eigyouJyouhouCountDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sosikiLabelRow
        Inherits Global.System.Data.DataRow
        
        Private tablesosikiLabel As sosikiLabelDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesosikiLabel = CType(Me.Table,sosikiLabelDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property code() As String
            Get
                Try 
                    Return CType(Me(Me.tablesosikiLabel.codeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'sosikiLabel' にある列 'code' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tablesosikiLabel.codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property meisyou() As String
            Get
                Try 
                    Return CType(Me(Me.tablesosikiLabel.meisyouColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'sosikiLabel' にある列 'meisyou' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tablesosikiLabel.meisyouColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodeNull() As Boolean
            Return Me.IsNull(Me.tablesosikiLabel.codeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodeNull()
            Me(Me.tablesosikiLabel.codeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmeisyouNull() As Boolean
            Return Me.IsNull(Me.tablesosikiLabel.meisyouColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmeisyouNull()
            Me(Me.tablesosikiLabel.meisyouColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class busyoCdRow
        Inherits Global.System.Data.DataRow
        
        Private tablebusyoCd As busyoCdDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablebusyoCd = CType(Me.Table,busyoCdDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property busyo_cd() As String
            Get
                Try 
                    Return CType(Me(Me.tablebusyoCd.busyo_cdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'busyoCd' にある列 'busyo_cd' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tablebusyoCd.busyo_cdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property busyo_mei() As String
            Get
                Try 
                    Return CType(Me(Me.tablebusyoCd.busyo_meiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'busyoCd' にある列 'busyo_mei' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tablebusyoCd.busyo_meiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isbusyo_cdNull() As Boolean
            Return Me.IsNull(Me.tablebusyoCd.busyo_cdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setbusyo_cdNull()
            Me(Me.tablebusyoCd.busyo_cdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isbusyo_meiNull() As Boolean
            Return Me.IsNull(Me.tablebusyoCd.busyo_meiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setbusyo_meiNull()
            Me(Me.tablebusyoCd.busyo_meiColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class eigyouManKbnRow
        Inherits Global.System.Data.DataRow
        
        Private tableeigyouManKbn As eigyouManKbnDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableeigyouManKbn = CType(Me.Table,eigyouManKbnDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property eigyou_man_kbn() As String
            Get
                Try 
                    Return CType(Me(Me.tableeigyouManKbn.eigyou_man_kbnColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'eigyouManKbn' にある列 'eigyou_man_kbn' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableeigyouManKbn.eigyou_man_kbnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property login_user_id() As String
            Get
                Try 
                    Return CType(Me(Me.tableeigyouManKbn.login_user_idColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'eigyouManKbn' にある列 'login_user_id' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableeigyouManKbn.login_user_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sosiki_level() As String
            Get
                Try 
                    Return CType(Me(Me.tableeigyouManKbn.sosiki_levelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'eigyouManKbn' にある列 'sosiki_level' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableeigyouManKbn.sosiki_levelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property t_sansyou_busyo_cd() As String
            Get
                Try 
                    Return CType(Me(Me.tableeigyouManKbn.t_sansyou_busyo_cdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'eigyouManKbn' にある列 't_sansyou_busyo_cd' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableeigyouManKbn.t_sansyou_busyo_cdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property busyo_cd() As String
            Get
                Try 
                    Return CType(Me(Me.tableeigyouManKbn.busyo_cdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'eigyouManKbn' にある列 'busyo_cd' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableeigyouManKbn.busyo_cdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sosiki_level2() As String
            Get
                Try 
                    Return CType(Me(Me.tableeigyouManKbn.sosiki_level2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'eigyouManKbn' にある列 'sosiki_level2' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableeigyouManKbn.sosiki_level2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iseigyou_man_kbnNull() As Boolean
            Return Me.IsNull(Me.tableeigyouManKbn.eigyou_man_kbnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Seteigyou_man_kbnNull()
            Me(Me.tableeigyouManKbn.eigyou_man_kbnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islogin_user_idNull() As Boolean
            Return Me.IsNull(Me.tableeigyouManKbn.login_user_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlogin_user_idNull()
            Me(Me.tableeigyouManKbn.login_user_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issosiki_levelNull() As Boolean
            Return Me.IsNull(Me.tableeigyouManKbn.sosiki_levelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsosiki_levelNull()
            Me(Me.tableeigyouManKbn.sosiki_levelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ist_sansyou_busyo_cdNull() As Boolean
            Return Me.IsNull(Me.tableeigyouManKbn.t_sansyou_busyo_cdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sett_sansyou_busyo_cdNull()
            Me(Me.tableeigyouManKbn.t_sansyou_busyo_cdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isbusyo_cdNull() As Boolean
            Return Me.IsNull(Me.tableeigyouManKbn.busyo_cdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setbusyo_cdNull()
            Me(Me.tableeigyouManKbn.busyo_cdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issosiki_level2Null() As Boolean
            Return Me.IsNull(Me.tableeigyouManKbn.sosiki_level2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsosiki_level2Null()
            Me(Me.tableeigyouManKbn.sosiki_level2Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class eigyouJyouhouRow
        Inherits Global.System.Data.DataRow
        
        Private tableeigyouJyouhou As eigyouJyouhouDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableeigyouJyouhou = CType(Me.Table,eigyouJyouhouDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property busyo_mei() As String
            Get
                Try 
                    Return CType(Me(Me.tableeigyouJyouhou.busyo_meiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'eigyouJyouhou' にある列 'busyo_mei' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableeigyouJyouhou.busyo_meiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DisplayName() As String
            Get
                Try 
                    Return CType(Me(Me.tableeigyouJyouhou.DisplayNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'eigyouJyouhou' にある列 'DisplayName' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableeigyouJyouhou.DisplayNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kameiten_cd() As String
            Get
                Try 
                    Return CType(Me(Me.tableeigyouJyouhou.kameiten_cdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'eigyouJyouhou' にある列 'kameiten_cd' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableeigyouJyouhou.kameiten_cdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kameiten_mei() As String
            Get
                Try 
                    Return CType(Me(Me.tableeigyouJyouhou.kameiten_meiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'eigyouJyouhou' にある列 'kameiten_mei' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableeigyouJyouhou.kameiten_meiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property todouhuken_mei() As String
            Get
                Try 
                    Return CType(Me(Me.tableeigyouJyouhou.todouhuken_meiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'eigyouJyouhou' にある列 'todouhuken_mei' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableeigyouJyouhou.todouhuken_meiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tyousa() As String
            Get
                Try 
                    Return CType(Me(Me.tableeigyouJyouhou.tyousaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'eigyouJyouhou' にある列 'tyousa' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableeigyouJyouhou.tyousaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kouji() As String
            Get
                Try 
                    Return CType(Me(Me.tableeigyouJyouhou.koujiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'eigyouJyouhou' にある列 'kouji' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableeigyouJyouhou.koujiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sonota() As String
            Get
                Try 
                    Return CType(Me(Me.tableeigyouJyouhou.sonotaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'eigyouJyouhou' にある列 'sonota' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableeigyouJyouhou.sonotaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property torikesi() As Long
            Get
                Try 
                    Return CType(Me(Me.tableeigyouJyouhou.torikesiColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'eigyouJyouhou' にある列 'torikesi' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableeigyouJyouhou.torikesiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property torikesi_txt() As String
            Get
                If Me.Istorikesi_txtNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableeigyouJyouhou.torikesi_txtColumn),String)
                End If
            End Get
            Set
                Me(Me.tableeigyouJyouhou.torikesi_txtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isbusyo_meiNull() As Boolean
            Return Me.IsNull(Me.tableeigyouJyouhou.busyo_meiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setbusyo_meiNull()
            Me(Me.tableeigyouJyouhou.busyo_meiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDisplayNameNull() As Boolean
            Return Me.IsNull(Me.tableeigyouJyouhou.DisplayNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDisplayNameNull()
            Me(Me.tableeigyouJyouhou.DisplayNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iskameiten_cdNull() As Boolean
            Return Me.IsNull(Me.tableeigyouJyouhou.kameiten_cdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setkameiten_cdNull()
            Me(Me.tableeigyouJyouhou.kameiten_cdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iskameiten_meiNull() As Boolean
            Return Me.IsNull(Me.tableeigyouJyouhou.kameiten_meiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setkameiten_meiNull()
            Me(Me.tableeigyouJyouhou.kameiten_meiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istodouhuken_meiNull() As Boolean
            Return Me.IsNull(Me.tableeigyouJyouhou.todouhuken_meiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settodouhuken_meiNull()
            Me(Me.tableeigyouJyouhou.todouhuken_meiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstyousaNull() As Boolean
            Return Me.IsNull(Me.tableeigyouJyouhou.tyousaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettyousaNull()
            Me(Me.tableeigyouJyouhou.tyousaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IskoujiNull() As Boolean
            Return Me.IsNull(Me.tableeigyouJyouhou.koujiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetkoujiNull()
            Me(Me.tableeigyouJyouhou.koujiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssonotaNull() As Boolean
            Return Me.IsNull(Me.tableeigyouJyouhou.sonotaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsonotaNull()
            Me(Me.tableeigyouJyouhou.sonotaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstorikesiNull() As Boolean
            Return Me.IsNull(Me.tableeigyouJyouhou.torikesiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettorikesiNull()
            Me(Me.tableeigyouJyouhou.torikesiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istorikesi_txtNull() As Boolean
            Return Me.IsNull(Me.tableeigyouJyouhou.torikesi_txtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settorikesi_txtNull()
            Me(Me.tableeigyouJyouhou.torikesi_txtColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class paramEigyouJyouhouRow
        Inherits Global.System.Data.DataRow
        
        Private tableparamEigyouJyouhou As paramEigyouJyouhouDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableparamEigyouJyouhou = CType(Me.Table,paramEigyouJyouhouDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kbn() As String
            Get
                Try 
                    Return CType(Me(Me.tableparamEigyouJyouhou.kbnColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'paramEigyouJyouhou' にある列 'kbn' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableparamEigyouJyouhou.kbnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property torikesi() As String
            Get
                Try 
                    Return CType(Me(Me.tableparamEigyouJyouhou.torikesiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'paramEigyouJyouhou' にある列 'torikesi' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableparamEigyouJyouhou.torikesiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kameitenCd() As String
            Get
                Try 
                    Return CType(Me(Me.tableparamEigyouJyouhou.kameitenCdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'paramEigyouJyouhou' にある列 'kameitenCd' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableparamEigyouJyouhou.kameitenCdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kameitenKana() As String
            Get
                Try 
                    Return CType(Me(Me.tableparamEigyouJyouhou.kameitenKanaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'paramEigyouJyouhou' にある列 'kameitenKana' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableparamEigyouJyouhou.kameitenKanaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property keiretuCd() As String
            Get
                Try 
                    Return CType(Me(Me.tableparamEigyouJyouhou.keiretuCdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'paramEigyouJyouhou' にある列 'keiretuCd' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableparamEigyouJyouhou.keiretuCdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tel() As String
            Get
                Try 
                    Return CType(Me(Me.tableparamEigyouJyouhou.telColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'paramEigyouJyouhou' にある列 'tel' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableparamEigyouJyouhou.telColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property todouhukenCd() As String
            Get
                Try 
                    Return CType(Me(Me.tableparamEigyouJyouhou.todouhukenCdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'paramEigyouJyouhou' にある列 'todouhukenCd' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableparamEigyouJyouhou.todouhukenCdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sosikiLevel() As String
            Get
                Try 
                    Return CType(Me(Me.tableparamEigyouJyouhou.sosikiLevelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'paramEigyouJyouhou' にある列 'sosikiLevel' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableparamEigyouJyouhou.sosikiLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BusyoCd() As String
            Get
                Try 
                    Return CType(Me(Me.tableparamEigyouJyouhou.BusyoCdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'paramEigyouJyouhou' にある列 'busyoCd' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableparamEigyouJyouhou.BusyoCdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tantouEigyouId() As String
            Get
                Try 
                    Return CType(Me(Me.tableparamEigyouJyouhou.tantouEigyouIdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'paramEigyouJyouhou' にある列 'tantouEigyouId' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableparamEigyouJyouhou.tantouEigyouIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property loginUserId() As String
            Get
                Try 
                    Return CType(Me(Me.tableparamEigyouJyouhou.loginUserIdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'paramEigyouJyouhou' にある列 'loginUserId' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableparamEigyouJyouhou.loginUserIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property eigyouManKbn() As String
            Get
                Try 
                    Return CType(Me(Me.tableparamEigyouJyouhou.eigyouManKbnColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'paramEigyouJyouhou' にある列 'eigyouManKbn' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableparamEigyouJyouhou.eigyouManKbnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property userSosikiLevel() As String
            Get
                Try 
                    Return CType(Me(Me.tableparamEigyouJyouhou.userSosikiLevelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'paramEigyouJyouhou' にある列 'userSosikiLevel' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableparamEigyouJyouhou.userSosikiLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kensakuCount() As String
            Get
                Try 
                    Return CType(Me(Me.tableparamEigyouJyouhou.kensakuCountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'paramEigyouJyouhou' にある列 'kensakuCount' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableparamEigyouJyouhou.kensakuCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property busyo_cd() As String
            Get
                Try 
                    Return CType(Me(Me.tableparamEigyouJyouhou.busyo_cdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'paramEigyouJyouhou' にある列 'busyo_cd' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableparamEigyouJyouhou.busyo_cdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property t_sansyou_busyo_cd() As String
            Get
                Try 
                    Return CType(Me(Me.tableparamEigyouJyouhou.t_sansyou_busyo_cdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'paramEigyouJyouhou' にある列 't_sansyou_busyo_cd' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableparamEigyouJyouhou.t_sansyou_busyo_cdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IskbnNull() As Boolean
            Return Me.IsNull(Me.tableparamEigyouJyouhou.kbnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetkbnNull()
            Me(Me.tableparamEigyouJyouhou.kbnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstorikesiNull() As Boolean
            Return Me.IsNull(Me.tableparamEigyouJyouhou.torikesiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettorikesiNull()
            Me(Me.tableparamEigyouJyouhou.torikesiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IskameitenCdNull() As Boolean
            Return Me.IsNull(Me.tableparamEigyouJyouhou.kameitenCdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetkameitenCdNull()
            Me(Me.tableparamEigyouJyouhou.kameitenCdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IskameitenKanaNull() As Boolean
            Return Me.IsNull(Me.tableparamEigyouJyouhou.kameitenKanaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetkameitenKanaNull()
            Me(Me.tableparamEigyouJyouhou.kameitenKanaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IskeiretuCdNull() As Boolean
            Return Me.IsNull(Me.tableparamEigyouJyouhou.keiretuCdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetkeiretuCdNull()
            Me(Me.tableparamEigyouJyouhou.keiretuCdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstelNull() As Boolean
            Return Me.IsNull(Me.tableparamEigyouJyouhou.telColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettelNull()
            Me(Me.tableparamEigyouJyouhou.telColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstodouhukenCdNull() As Boolean
            Return Me.IsNull(Me.tableparamEigyouJyouhou.todouhukenCdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettodouhukenCdNull()
            Me(Me.tableparamEigyouJyouhou.todouhukenCdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssosikiLevelNull() As Boolean
            Return Me.IsNull(Me.tableparamEigyouJyouhou.sosikiLevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsosikiLevelNull()
            Me(Me.tableparamEigyouJyouhou.sosikiLevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBusyoCdNull() As Boolean
            Return Me.IsNull(Me.tableparamEigyouJyouhou.BusyoCdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBusyoCdNull()
            Me(Me.tableparamEigyouJyouhou.BusyoCdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstantouEigyouIdNull() As Boolean
            Return Me.IsNull(Me.tableparamEigyouJyouhou.tantouEigyouIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettantouEigyouIdNull()
            Me(Me.tableparamEigyouJyouhou.tantouEigyouIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsloginUserIdNull() As Boolean
            Return Me.IsNull(Me.tableparamEigyouJyouhou.loginUserIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetloginUserIdNull()
            Me(Me.tableparamEigyouJyouhou.loginUserIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IseigyouManKbnNull() As Boolean
            Return Me.IsNull(Me.tableparamEigyouJyouhou.eigyouManKbnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SeteigyouManKbnNull()
            Me(Me.tableparamEigyouJyouhou.eigyouManKbnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsuserSosikiLevelNull() As Boolean
            Return Me.IsNull(Me.tableparamEigyouJyouhou.userSosikiLevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetuserSosikiLevelNull()
            Me(Me.tableparamEigyouJyouhou.userSosikiLevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IskensakuCountNull() As Boolean
            Return Me.IsNull(Me.tableparamEigyouJyouhou.kensakuCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetkensakuCountNull()
            Me(Me.tableparamEigyouJyouhou.kensakuCountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isbusyo_cdNull() As Boolean
            Return Me.IsNull(Me.tableparamEigyouJyouhou.busyo_cdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setbusyo_cdNull()
            Me(Me.tableparamEigyouJyouhou.busyo_cdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ist_sansyou_busyo_cdNull() As Boolean
            Return Me.IsNull(Me.tableparamEigyouJyouhou.t_sansyou_busyo_cdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sett_sansyou_busyo_cdNull()
            Me(Me.tableparamEigyouJyouhou.t_sansyou_busyo_cdColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class eigyouJyouhouCountRow
        Inherits Global.System.Data.DataRow
        
        Private tableeigyouJyouhouCount As eigyouJyouhouCountDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableeigyouJyouhouCount = CType(Me.Table,eigyouJyouhouCountDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kameiten_cd_count() As Long
            Get
                Try 
                    Return CType(Me(Me.tableeigyouJyouhouCount.kameiten_cd_countColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'eigyouJyouhouCount' にある列 'kameiten_cd_count' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableeigyouJyouhouCount.kameiten_cd_countColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iskameiten_cd_countNull() As Boolean
            Return Me.IsNull(Me.tableeigyouJyouhouCount.kameiten_cd_countColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setkameiten_cd_countNull()
            Me(Me.tableeigyouJyouhouCount.kameiten_cd_countColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sosikiLabelRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sosikiLabelRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sosikiLabelRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sosikiLabelRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class busyoCdRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As busyoCdRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As busyoCdRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As busyoCdRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class eigyouManKbnRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As eigyouManKbnRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As eigyouManKbnRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As eigyouManKbnRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class eigyouJyouhouRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As eigyouJyouhouRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As eigyouJyouhouRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As eigyouJyouhouRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class paramEigyouJyouhouRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As paramEigyouJyouhouRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As paramEigyouJyouhouRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As paramEigyouJyouhouRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class eigyouJyouhouCountRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As eigyouJyouhouCountRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As eigyouJyouhouCountRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As eigyouJyouhouCountRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
