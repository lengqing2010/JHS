'------------------------------------------------------------------------------
' <auto-generated>
'     このコードはツールによって生成されました。
'     ランタイム バージョン:2.0.50727.42
'
'     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
'     コードが再生成されるときに損失したりします。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("TyuiJyouhouDataSet"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class TyuiJyouhouDataSet
    Inherits System.Data.DataSet
    
    Private tableTyuuiJikouTable As TyuuiJikouTableDataTable
    
    Private tableMeisyouTable As MeisyouTableDataTable
    
    Private tableKaisyaTable As KaisyaTableDataTable
    
    Private tableTyuuiJikouUPDTable As TyuuiJikouUPDTableDataTable
    
    Private tableTyousaKaisyaUPDTable As TyousaKaisyaUPDTableDataTable
    
    Private tableKisoSiyouTable As KisoSiyouTableDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("TyuuiJikouTable")) Is Nothing) Then
                MyBase.Tables.Add(New TyuuiJikouTableDataTable(ds.Tables("TyuuiJikouTable")))
            End If
            If (Not (ds.Tables("MeisyouTable")) Is Nothing) Then
                MyBase.Tables.Add(New MeisyouTableDataTable(ds.Tables("MeisyouTable")))
            End If
            If (Not (ds.Tables("KaisyaTable")) Is Nothing) Then
                MyBase.Tables.Add(New KaisyaTableDataTable(ds.Tables("KaisyaTable")))
            End If
            If (Not (ds.Tables("TyuuiJikouUPDTable")) Is Nothing) Then
                MyBase.Tables.Add(New TyuuiJikouUPDTableDataTable(ds.Tables("TyuuiJikouUPDTable")))
            End If
            If (Not (ds.Tables("TyousaKaisyaUPDTable")) Is Nothing) Then
                MyBase.Tables.Add(New TyousaKaisyaUPDTableDataTable(ds.Tables("TyousaKaisyaUPDTable")))
            End If
            If (Not (ds.Tables("KisoSiyouTable")) Is Nothing) Then
                MyBase.Tables.Add(New KisoSiyouTableDataTable(ds.Tables("KisoSiyouTable")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TyuuiJikouTable() As TyuuiJikouTableDataTable
        Get
            Return Me.tableTyuuiJikouTable
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MeisyouTable() As MeisyouTableDataTable
        Get
            Return Me.tableMeisyouTable
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property KaisyaTable() As KaisyaTableDataTable
        Get
            Return Me.tableKaisyaTable
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TyuuiJikouUPDTable() As TyuuiJikouUPDTableDataTable
        Get
            Return Me.tableTyuuiJikouUPDTable
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TyousaKaisyaUPDTable() As TyousaKaisyaUPDTableDataTable
        Get
            Return Me.tableTyousaKaisyaUPDTable
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property KisoSiyouTable() As KisoSiyouTableDataTable
        Get
            Return Me.tableKisoSiyouTable
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As TyuiJyouhouDataSet = CType(MyBase.Clone,TyuiJyouhouDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("TyuuiJikouTable")) Is Nothing) Then
                MyBase.Tables.Add(New TyuuiJikouTableDataTable(ds.Tables("TyuuiJikouTable")))
            End If
            If (Not (ds.Tables("MeisyouTable")) Is Nothing) Then
                MyBase.Tables.Add(New MeisyouTableDataTable(ds.Tables("MeisyouTable")))
            End If
            If (Not (ds.Tables("KaisyaTable")) Is Nothing) Then
                MyBase.Tables.Add(New KaisyaTableDataTable(ds.Tables("KaisyaTable")))
            End If
            If (Not (ds.Tables("TyuuiJikouUPDTable")) Is Nothing) Then
                MyBase.Tables.Add(New TyuuiJikouUPDTableDataTable(ds.Tables("TyuuiJikouUPDTable")))
            End If
            If (Not (ds.Tables("TyousaKaisyaUPDTable")) Is Nothing) Then
                MyBase.Tables.Add(New TyousaKaisyaUPDTableDataTable(ds.Tables("TyousaKaisyaUPDTable")))
            End If
            If (Not (ds.Tables("KisoSiyouTable")) Is Nothing) Then
                MyBase.Tables.Add(New KisoSiyouTableDataTable(ds.Tables("KisoSiyouTable")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableTyuuiJikouTable = CType(MyBase.Tables("TyuuiJikouTable"),TyuuiJikouTableDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTyuuiJikouTable) Is Nothing) Then
                Me.tableTyuuiJikouTable.InitVars
            End If
        End If
        Me.tableMeisyouTable = CType(MyBase.Tables("MeisyouTable"),MeisyouTableDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMeisyouTable) Is Nothing) Then
                Me.tableMeisyouTable.InitVars
            End If
        End If
        Me.tableKaisyaTable = CType(MyBase.Tables("KaisyaTable"),KaisyaTableDataTable)
        If (initTable = true) Then
            If (Not (Me.tableKaisyaTable) Is Nothing) Then
                Me.tableKaisyaTable.InitVars
            End If
        End If
        Me.tableTyuuiJikouUPDTable = CType(MyBase.Tables("TyuuiJikouUPDTable"),TyuuiJikouUPDTableDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTyuuiJikouUPDTable) Is Nothing) Then
                Me.tableTyuuiJikouUPDTable.InitVars
            End If
        End If
        Me.tableTyousaKaisyaUPDTable = CType(MyBase.Tables("TyousaKaisyaUPDTable"),TyousaKaisyaUPDTableDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTyousaKaisyaUPDTable) Is Nothing) Then
                Me.tableTyousaKaisyaUPDTable.InitVars
            End If
        End If
        Me.tableKisoSiyouTable = CType(MyBase.Tables("KisoSiyouTable"),KisoSiyouTableDataTable)
        If (initTable = true) Then
            If (Not (Me.tableKisoSiyouTable) Is Nothing) Then
                Me.tableKisoSiyouTable.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "TyuiJyouhouDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/TyuiJyouhouDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableTyuuiJikouTable = New TyuuiJikouTableDataTable
        MyBase.Tables.Add(Me.tableTyuuiJikouTable)
        Me.tableMeisyouTable = New MeisyouTableDataTable
        MyBase.Tables.Add(Me.tableMeisyouTable)
        Me.tableKaisyaTable = New KaisyaTableDataTable
        MyBase.Tables.Add(Me.tableKaisyaTable)
        Me.tableTyuuiJikouUPDTable = New TyuuiJikouUPDTableDataTable
        MyBase.Tables.Add(Me.tableTyuuiJikouUPDTable)
        Me.tableTyousaKaisyaUPDTable = New TyousaKaisyaUPDTableDataTable
        MyBase.Tables.Add(Me.tableTyousaKaisyaUPDTable)
        Me.tableKisoSiyouTable = New KisoSiyouTableDataTable
        MyBase.Tables.Add(Me.tableKisoSiyouTable)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTyuuiJikouTable() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMeisyouTable() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeKaisyaTable() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTyuuiJikouUPDTable() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTyousaKaisyaUPDTable() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeKisoSiyouTable() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As TyuiJyouhouDataSet = New TyuiJyouhouDataSet
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub TyuuiJikouTableRowChangeEventHandler(ByVal sender As Object, ByVal e As TyuuiJikouTableRowChangeEvent)
    
    Public Delegate Sub MeisyouTableRowChangeEventHandler(ByVal sender As Object, ByVal e As MeisyouTableRowChangeEvent)
    
    Public Delegate Sub KaisyaTableRowChangeEventHandler(ByVal sender As Object, ByVal e As KaisyaTableRowChangeEvent)
    
    Public Delegate Sub TyuuiJikouUPDTableRowChangeEventHandler(ByVal sender As Object, ByVal e As TyuuiJikouUPDTableRowChangeEvent)
    
    Public Delegate Sub TyousaKaisyaUPDTableRowChangeEventHandler(ByVal sender As Object, ByVal e As TyousaKaisyaUPDTableRowChangeEvent)
    
    Public Delegate Sub KisoSiyouTableRowChangeEventHandler(ByVal sender As Object, ByVal e As KisoSiyouTableRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TyuuiJikouTableDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columntyuuijikou_syubetu As System.Data.DataColumn
        
        Private columnnyuuryoku_date As System.Data.DataColumn
        
        Private columnuketukesya_mei As System.Data.DataColumn
        
        Private columnnaiyou As System.Data.DataColumn
        
        Private columnupd_datetime As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TyuuiJikouTable"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tyuuijikou_syubetuColumn() As System.Data.DataColumn
            Get
                Return Me.columntyuuijikou_syubetu
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nyuuryoku_dateColumn() As System.Data.DataColumn
            Get
                Return Me.columnnyuuryoku_date
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property uketukesya_meiColumn() As System.Data.DataColumn
            Get
                Return Me.columnuketukesya_mei
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property naiyouColumn() As System.Data.DataColumn
            Get
                Return Me.columnnaiyou
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property upd_datetimeColumn() As System.Data.DataColumn
            Get
                Return Me.columnupd_datetime
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TyuuiJikouTableRow
            Get
                Return CType(Me.Rows(index),TyuuiJikouTableRow)
            End Get
        End Property
        
        Public Event TyuuiJikouTableRowChanging As TyuuiJikouTableRowChangeEventHandler
        
        Public Event TyuuiJikouTableRowChanged As TyuuiJikouTableRowChangeEventHandler
        
        Public Event TyuuiJikouTableRowDeleting As TyuuiJikouTableRowChangeEventHandler
        
        Public Event TyuuiJikouTableRowDeleted As TyuuiJikouTableRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTyuuiJikouTableRow(ByVal row As TyuuiJikouTableRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTyuuiJikouTableRow(ByVal tyuuijikou_syubetu As String, ByVal nyuuryoku_date As String, ByVal uketukesya_mei As String, ByVal naiyou As String, ByVal upd_datetime As Date) As TyuuiJikouTableRow
            Dim rowTyuuiJikouTableRow As TyuuiJikouTableRow = CType(Me.NewRow,TyuuiJikouTableRow)
            rowTyuuiJikouTableRow.ItemArray = New Object() {tyuuijikou_syubetu, nyuuryoku_date, uketukesya_mei, naiyou, upd_datetime}
            Me.Rows.Add(rowTyuuiJikouTableRow)
            Return rowTyuuiJikouTableRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As TyuuiJikouTableDataTable = CType(MyBase.Clone,TyuuiJikouTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New TyuuiJikouTableDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columntyuuijikou_syubetu = MyBase.Columns("tyuuijikou_syubetu")
            Me.columnnyuuryoku_date = MyBase.Columns("nyuuryoku_date")
            Me.columnuketukesya_mei = MyBase.Columns("uketukesya_mei")
            Me.columnnaiyou = MyBase.Columns("naiyou")
            Me.columnupd_datetime = MyBase.Columns("upd_datetime")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columntyuuijikou_syubetu = New System.Data.DataColumn("tyuuijikou_syubetu", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntyuuijikou_syubetu)
            Me.columnnyuuryoku_date = New System.Data.DataColumn("nyuuryoku_date", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnyuuryoku_date)
            Me.columnuketukesya_mei = New System.Data.DataColumn("uketukesya_mei", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuketukesya_mei)
            Me.columnnaiyou = New System.Data.DataColumn("naiyou", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnaiyou)
            Me.columnupd_datetime = New System.Data.DataColumn("upd_datetime", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnupd_datetime)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTyuuiJikouTableRow() As TyuuiJikouTableRow
            Return CType(Me.NewRow,TyuuiJikouTableRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New TyuuiJikouTableRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TyuuiJikouTableRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TyuuiJikouTableRowChangedEvent) Is Nothing) Then
                RaiseEvent TyuuiJikouTableRowChanged(Me, New TyuuiJikouTableRowChangeEvent(CType(e.Row,TyuuiJikouTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TyuuiJikouTableRowChangingEvent) Is Nothing) Then
                RaiseEvent TyuuiJikouTableRowChanging(Me, New TyuuiJikouTableRowChangeEvent(CType(e.Row,TyuuiJikouTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TyuuiJikouTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent TyuuiJikouTableRowDeleted(Me, New TyuuiJikouTableRowChangeEvent(CType(e.Row,TyuuiJikouTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TyuuiJikouTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent TyuuiJikouTableRowDeleting(Me, New TyuuiJikouTableRowChangeEvent(CType(e.Row,TyuuiJikouTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTyuuiJikouTableRow(ByVal row As TyuuiJikouTableRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As TyuiJyouhouDataSet = New TyuiJyouhouDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TyuuiJikouTableDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MeisyouTableDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columncode As System.Data.DataColumn
        
        Private columnmeisyou As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MeisyouTable"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codeColumn() As System.Data.DataColumn
            Get
                Return Me.columncode
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property meisyouColumn() As System.Data.DataColumn
            Get
                Return Me.columnmeisyou
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MeisyouTableRow
            Get
                Return CType(Me.Rows(index),MeisyouTableRow)
            End Get
        End Property
        
        Public Event MeisyouTableRowChanging As MeisyouTableRowChangeEventHandler
        
        Public Event MeisyouTableRowChanged As MeisyouTableRowChangeEventHandler
        
        Public Event MeisyouTableRowDeleting As MeisyouTableRowChangeEventHandler
        
        Public Event MeisyouTableRowDeleted As MeisyouTableRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMeisyouTableRow(ByVal row As MeisyouTableRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMeisyouTableRow(ByVal code As String, ByVal meisyou As String) As MeisyouTableRow
            Dim rowMeisyouTableRow As MeisyouTableRow = CType(Me.NewRow,MeisyouTableRow)
            rowMeisyouTableRow.ItemArray = New Object() {code, meisyou}
            Me.Rows.Add(rowMeisyouTableRow)
            Return rowMeisyouTableRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As MeisyouTableDataTable = CType(MyBase.Clone,MeisyouTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New MeisyouTableDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncode = MyBase.Columns("code")
            Me.columnmeisyou = MyBase.Columns("meisyou")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncode = New System.Data.DataColumn("code", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncode)
            Me.columnmeisyou = New System.Data.DataColumn("meisyou", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeisyou)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMeisyouTableRow() As MeisyouTableRow
            Return CType(Me.NewRow,MeisyouTableRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New MeisyouTableRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MeisyouTableRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MeisyouTableRowChangedEvent) Is Nothing) Then
                RaiseEvent MeisyouTableRowChanged(Me, New MeisyouTableRowChangeEvent(CType(e.Row,MeisyouTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MeisyouTableRowChangingEvent) Is Nothing) Then
                RaiseEvent MeisyouTableRowChanging(Me, New MeisyouTableRowChangeEvent(CType(e.Row,MeisyouTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MeisyouTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent MeisyouTableRowDeleted(Me, New MeisyouTableRowChangeEvent(CType(e.Row,MeisyouTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MeisyouTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent MeisyouTableRowDeleting(Me, New MeisyouTableRowChangeEvent(CType(e.Row,MeisyouTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMeisyouTableRow(ByVal row As MeisyouTableRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As TyuiJyouhouDataSet = New TyuiJyouhouDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MeisyouTableDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class KaisyaTableDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnnyuuryoku_no As System.Data.DataColumn
        
        Private columntys_code As System.Data.DataColumn
        
        Private columnupd_datetime As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "KaisyaTable"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nyuuryoku_noColumn() As System.Data.DataColumn
            Get
                Return Me.columnnyuuryoku_no
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tys_codeColumn() As System.Data.DataColumn
            Get
                Return Me.columntys_code
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property upd_datetimeColumn() As System.Data.DataColumn
            Get
                Return Me.columnupd_datetime
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As KaisyaTableRow
            Get
                Return CType(Me.Rows(index),KaisyaTableRow)
            End Get
        End Property
        
        Public Event KaisyaTableRowChanging As KaisyaTableRowChangeEventHandler
        
        Public Event KaisyaTableRowChanged As KaisyaTableRowChangeEventHandler
        
        Public Event KaisyaTableRowDeleting As KaisyaTableRowChangeEventHandler
        
        Public Event KaisyaTableRowDeleted As KaisyaTableRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddKaisyaTableRow(ByVal row As KaisyaTableRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddKaisyaTableRow(ByVal nyuuryoku_no As String, ByVal tys_code As String, ByVal upd_datetime As Date) As KaisyaTableRow
            Dim rowKaisyaTableRow As KaisyaTableRow = CType(Me.NewRow,KaisyaTableRow)
            rowKaisyaTableRow.ItemArray = New Object() {nyuuryoku_no, tys_code, upd_datetime}
            Me.Rows.Add(rowKaisyaTableRow)
            Return rowKaisyaTableRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As KaisyaTableDataTable = CType(MyBase.Clone,KaisyaTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New KaisyaTableDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnyuuryoku_no = MyBase.Columns("nyuuryoku_no")
            Me.columntys_code = MyBase.Columns("tys_code")
            Me.columnupd_datetime = MyBase.Columns("upd_datetime")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnyuuryoku_no = New System.Data.DataColumn("nyuuryoku_no", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnyuuryoku_no)
            Me.columntys_code = New System.Data.DataColumn("tys_code", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntys_code)
            Me.columnupd_datetime = New System.Data.DataColumn("upd_datetime", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnupd_datetime)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewKaisyaTableRow() As KaisyaTableRow
            Return CType(Me.NewRow,KaisyaTableRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New KaisyaTableRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(KaisyaTableRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.KaisyaTableRowChangedEvent) Is Nothing) Then
                RaiseEvent KaisyaTableRowChanged(Me, New KaisyaTableRowChangeEvent(CType(e.Row,KaisyaTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.KaisyaTableRowChangingEvent) Is Nothing) Then
                RaiseEvent KaisyaTableRowChanging(Me, New KaisyaTableRowChangeEvent(CType(e.Row,KaisyaTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.KaisyaTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent KaisyaTableRowDeleted(Me, New KaisyaTableRowChangeEvent(CType(e.Row,KaisyaTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.KaisyaTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent KaisyaTableRowDeleting(Me, New KaisyaTableRowChangeEvent(CType(e.Row,KaisyaTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveKaisyaTableRow(ByVal row As KaisyaTableRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As TyuiJyouhouDataSet = New TyuiJyouhouDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "KaisyaTableDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TyuuiJikouUPDTableDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnkameiten_cd As System.Data.DataColumn
        
        Private columntyuuijikou_syubetu As System.Data.DataColumn
        
        Private columnnyuuryoku_no As System.Data.DataColumn
        
        Private columnnyuuryoku_date As System.Data.DataColumn
        
        Private columnuketukesya_mei As System.Data.DataColumn
        
        Private columnnaiyou As System.Data.DataColumn
        
        Private columnkousinsya As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TyuuiJikouUPDTable"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kameiten_cdColumn() As System.Data.DataColumn
            Get
                Return Me.columnkameiten_cd
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tyuuijikou_syubetuColumn() As System.Data.DataColumn
            Get
                Return Me.columntyuuijikou_syubetu
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nyuuryoku_noColumn() As System.Data.DataColumn
            Get
                Return Me.columnnyuuryoku_no
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nyuuryoku_dateColumn() As System.Data.DataColumn
            Get
                Return Me.columnnyuuryoku_date
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property uketukesya_meiColumn() As System.Data.DataColumn
            Get
                Return Me.columnuketukesya_mei
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property naiyouColumn() As System.Data.DataColumn
            Get
                Return Me.columnnaiyou
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kousinsyaColumn() As System.Data.DataColumn
            Get
                Return Me.columnkousinsya
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TyuuiJikouUPDTableRow
            Get
                Return CType(Me.Rows(index),TyuuiJikouUPDTableRow)
            End Get
        End Property
        
        Public Event TyuuiJikouUPDTableRowChanging As TyuuiJikouUPDTableRowChangeEventHandler
        
        Public Event TyuuiJikouUPDTableRowChanged As TyuuiJikouUPDTableRowChangeEventHandler
        
        Public Event TyuuiJikouUPDTableRowDeleting As TyuuiJikouUPDTableRowChangeEventHandler
        
        Public Event TyuuiJikouUPDTableRowDeleted As TyuuiJikouUPDTableRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTyuuiJikouUPDTableRow(ByVal row As TyuuiJikouUPDTableRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTyuuiJikouUPDTableRow(ByVal kameiten_cd As String, ByVal tyuuijikou_syubetu As String, ByVal nyuuryoku_no As String, ByVal nyuuryoku_date As String, ByVal uketukesya_mei As String, ByVal naiyou As String, ByVal kousinsya As String) As TyuuiJikouUPDTableRow
            Dim rowTyuuiJikouUPDTableRow As TyuuiJikouUPDTableRow = CType(Me.NewRow,TyuuiJikouUPDTableRow)
            rowTyuuiJikouUPDTableRow.ItemArray = New Object() {kameiten_cd, tyuuijikou_syubetu, nyuuryoku_no, nyuuryoku_date, uketukesya_mei, naiyou, kousinsya}
            Me.Rows.Add(rowTyuuiJikouUPDTableRow)
            Return rowTyuuiJikouUPDTableRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As TyuuiJikouUPDTableDataTable = CType(MyBase.Clone,TyuuiJikouUPDTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New TyuuiJikouUPDTableDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnkameiten_cd = MyBase.Columns("kameiten_cd")
            Me.columntyuuijikou_syubetu = MyBase.Columns("tyuuijikou_syubetu")
            Me.columnnyuuryoku_no = MyBase.Columns("nyuuryoku_no")
            Me.columnnyuuryoku_date = MyBase.Columns("nyuuryoku_date")
            Me.columnuketukesya_mei = MyBase.Columns("uketukesya_mei")
            Me.columnnaiyou = MyBase.Columns("naiyou")
            Me.columnkousinsya = MyBase.Columns("kousinsya")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnkameiten_cd = New System.Data.DataColumn("kameiten_cd", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkameiten_cd)
            Me.columntyuuijikou_syubetu = New System.Data.DataColumn("tyuuijikou_syubetu", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntyuuijikou_syubetu)
            Me.columnnyuuryoku_no = New System.Data.DataColumn("nyuuryoku_no", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnyuuryoku_no)
            Me.columnnyuuryoku_date = New System.Data.DataColumn("nyuuryoku_date", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnyuuryoku_date)
            Me.columnuketukesya_mei = New System.Data.DataColumn("uketukesya_mei", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuketukesya_mei)
            Me.columnnaiyou = New System.Data.DataColumn("naiyou", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnaiyou)
            Me.columnkousinsya = New System.Data.DataColumn("kousinsya", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkousinsya)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTyuuiJikouUPDTableRow() As TyuuiJikouUPDTableRow
            Return CType(Me.NewRow,TyuuiJikouUPDTableRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New TyuuiJikouUPDTableRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TyuuiJikouUPDTableRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TyuuiJikouUPDTableRowChangedEvent) Is Nothing) Then
                RaiseEvent TyuuiJikouUPDTableRowChanged(Me, New TyuuiJikouUPDTableRowChangeEvent(CType(e.Row,TyuuiJikouUPDTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TyuuiJikouUPDTableRowChangingEvent) Is Nothing) Then
                RaiseEvent TyuuiJikouUPDTableRowChanging(Me, New TyuuiJikouUPDTableRowChangeEvent(CType(e.Row,TyuuiJikouUPDTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TyuuiJikouUPDTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent TyuuiJikouUPDTableRowDeleted(Me, New TyuuiJikouUPDTableRowChangeEvent(CType(e.Row,TyuuiJikouUPDTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TyuuiJikouUPDTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent TyuuiJikouUPDTableRowDeleting(Me, New TyuuiJikouUPDTableRowChangeEvent(CType(e.Row,TyuuiJikouUPDTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTyuuiJikouUPDTableRow(ByVal row As TyuuiJikouUPDTableRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As TyuiJyouhouDataSet = New TyuiJyouhouDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TyuuiJikouUPDTableDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TyousaKaisyaUPDTableDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnkameiten_cd As System.Data.DataColumn
        
        Private columnkaisya_kbn As System.Data.DataColumn
        
        Private columnkahi_kbn As System.Data.DataColumn
        
        Private columntys_kaisya_cd As System.Data.DataColumn
        
        Private columnjigyousyo_cd As System.Data.DataColumn
        
        Private columnkousinsya As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TyousaKaisyaUPDTable"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kameiten_cdColumn() As System.Data.DataColumn
            Get
                Return Me.columnkameiten_cd
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kaisya_kbnColumn() As System.Data.DataColumn
            Get
                Return Me.columnkaisya_kbn
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kahi_kbnColumn() As System.Data.DataColumn
            Get
                Return Me.columnkahi_kbn
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tys_kaisya_cdColumn() As System.Data.DataColumn
            Get
                Return Me.columntys_kaisya_cd
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jigyousyo_cdColumn() As System.Data.DataColumn
            Get
                Return Me.columnjigyousyo_cd
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kousinsyaColumn() As System.Data.DataColumn
            Get
                Return Me.columnkousinsya
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TyousaKaisyaUPDTableRow
            Get
                Return CType(Me.Rows(index),TyousaKaisyaUPDTableRow)
            End Get
        End Property
        
        Public Event TyousaKaisyaUPDTableRowChanging As TyousaKaisyaUPDTableRowChangeEventHandler
        
        Public Event TyousaKaisyaUPDTableRowChanged As TyousaKaisyaUPDTableRowChangeEventHandler
        
        Public Event TyousaKaisyaUPDTableRowDeleting As TyousaKaisyaUPDTableRowChangeEventHandler
        
        Public Event TyousaKaisyaUPDTableRowDeleted As TyousaKaisyaUPDTableRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTyousaKaisyaUPDTableRow(ByVal row As TyousaKaisyaUPDTableRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTyousaKaisyaUPDTableRow(ByVal kameiten_cd As String, ByVal kaisya_kbn As String, ByVal kahi_kbn As String, ByVal tys_kaisya_cd As String, ByVal jigyousyo_cd As String, ByVal kousinsya As String) As TyousaKaisyaUPDTableRow
            Dim rowTyousaKaisyaUPDTableRow As TyousaKaisyaUPDTableRow = CType(Me.NewRow,TyousaKaisyaUPDTableRow)
            rowTyousaKaisyaUPDTableRow.ItemArray = New Object() {kameiten_cd, kaisya_kbn, kahi_kbn, tys_kaisya_cd, jigyousyo_cd, kousinsya}
            Me.Rows.Add(rowTyousaKaisyaUPDTableRow)
            Return rowTyousaKaisyaUPDTableRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As TyousaKaisyaUPDTableDataTable = CType(MyBase.Clone,TyousaKaisyaUPDTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New TyousaKaisyaUPDTableDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnkameiten_cd = MyBase.Columns("kameiten_cd")
            Me.columnkaisya_kbn = MyBase.Columns("kaisya_kbn")
            Me.columnkahi_kbn = MyBase.Columns("kahi_kbn")
            Me.columntys_kaisya_cd = MyBase.Columns("tys_kaisya_cd")
            Me.columnjigyousyo_cd = MyBase.Columns("jigyousyo_cd")
            Me.columnkousinsya = MyBase.Columns("kousinsya")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnkameiten_cd = New System.Data.DataColumn("kameiten_cd", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkameiten_cd)
            Me.columnkaisya_kbn = New System.Data.DataColumn("kaisya_kbn", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkaisya_kbn)
            Me.columnkahi_kbn = New System.Data.DataColumn("kahi_kbn", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkahi_kbn)
            Me.columntys_kaisya_cd = New System.Data.DataColumn("tys_kaisya_cd", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntys_kaisya_cd)
            Me.columnjigyousyo_cd = New System.Data.DataColumn("jigyousyo_cd", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjigyousyo_cd)
            Me.columnkousinsya = New System.Data.DataColumn("kousinsya", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkousinsya)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTyousaKaisyaUPDTableRow() As TyousaKaisyaUPDTableRow
            Return CType(Me.NewRow,TyousaKaisyaUPDTableRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New TyousaKaisyaUPDTableRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TyousaKaisyaUPDTableRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TyousaKaisyaUPDTableRowChangedEvent) Is Nothing) Then
                RaiseEvent TyousaKaisyaUPDTableRowChanged(Me, New TyousaKaisyaUPDTableRowChangeEvent(CType(e.Row,TyousaKaisyaUPDTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TyousaKaisyaUPDTableRowChangingEvent) Is Nothing) Then
                RaiseEvent TyousaKaisyaUPDTableRowChanging(Me, New TyousaKaisyaUPDTableRowChangeEvent(CType(e.Row,TyousaKaisyaUPDTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TyousaKaisyaUPDTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent TyousaKaisyaUPDTableRowDeleted(Me, New TyousaKaisyaUPDTableRowChangeEvent(CType(e.Row,TyousaKaisyaUPDTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TyousaKaisyaUPDTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent TyousaKaisyaUPDTableRowDeleting(Me, New TyousaKaisyaUPDTableRowChangeEvent(CType(e.Row,TyousaKaisyaUPDTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTyousaKaisyaUPDTableRow(ByVal row As TyousaKaisyaUPDTableRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As TyuiJyouhouDataSet = New TyuiJyouhouDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TyousaKaisyaUPDTableDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class KisoSiyouTableDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnnyuuryoku_no As System.Data.DataColumn
        
        Private columnks_siyou_no As System.Data.DataColumn
        
        Private columnupd_datetime As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "KisoSiyouTable"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nyuuryoku_noColumn() As System.Data.DataColumn
            Get
                Return Me.columnnyuuryoku_no
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ks_siyou_noColumn() As System.Data.DataColumn
            Get
                Return Me.columnks_siyou_no
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property upd_datetimeColumn() As System.Data.DataColumn
            Get
                Return Me.columnupd_datetime
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As KisoSiyouTableRow
            Get
                Return CType(Me.Rows(index),KisoSiyouTableRow)
            End Get
        End Property
        
        Public Event KisoSiyouTableRowChanging As KisoSiyouTableRowChangeEventHandler
        
        Public Event KisoSiyouTableRowChanged As KisoSiyouTableRowChangeEventHandler
        
        Public Event KisoSiyouTableRowDeleting As KisoSiyouTableRowChangeEventHandler
        
        Public Event KisoSiyouTableRowDeleted As KisoSiyouTableRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddKisoSiyouTableRow(ByVal row As KisoSiyouTableRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddKisoSiyouTableRow(ByVal nyuuryoku_no As String, ByVal ks_siyou_no As String, ByVal upd_datetime As String) As KisoSiyouTableRow
            Dim rowKisoSiyouTableRow As KisoSiyouTableRow = CType(Me.NewRow,KisoSiyouTableRow)
            rowKisoSiyouTableRow.ItemArray = New Object() {nyuuryoku_no, ks_siyou_no, upd_datetime}
            Me.Rows.Add(rowKisoSiyouTableRow)
            Return rowKisoSiyouTableRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As KisoSiyouTableDataTable = CType(MyBase.Clone,KisoSiyouTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New KisoSiyouTableDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnyuuryoku_no = MyBase.Columns("nyuuryoku_no")
            Me.columnks_siyou_no = MyBase.Columns("ks_siyou_no")
            Me.columnupd_datetime = MyBase.Columns("upd_datetime")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnyuuryoku_no = New System.Data.DataColumn("nyuuryoku_no", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnyuuryoku_no)
            Me.columnks_siyou_no = New System.Data.DataColumn("ks_siyou_no", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnks_siyou_no)
            Me.columnupd_datetime = New System.Data.DataColumn("upd_datetime", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnupd_datetime)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewKisoSiyouTableRow() As KisoSiyouTableRow
            Return CType(Me.NewRow,KisoSiyouTableRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New KisoSiyouTableRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(KisoSiyouTableRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.KisoSiyouTableRowChangedEvent) Is Nothing) Then
                RaiseEvent KisoSiyouTableRowChanged(Me, New KisoSiyouTableRowChangeEvent(CType(e.Row,KisoSiyouTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.KisoSiyouTableRowChangingEvent) Is Nothing) Then
                RaiseEvent KisoSiyouTableRowChanging(Me, New KisoSiyouTableRowChangeEvent(CType(e.Row,KisoSiyouTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.KisoSiyouTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent KisoSiyouTableRowDeleted(Me, New KisoSiyouTableRowChangeEvent(CType(e.Row,KisoSiyouTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.KisoSiyouTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent KisoSiyouTableRowDeleting(Me, New KisoSiyouTableRowChangeEvent(CType(e.Row,KisoSiyouTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveKisoSiyouTableRow(ByVal row As KisoSiyouTableRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As TyuiJyouhouDataSet = New TyuiJyouhouDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "KisoSiyouTableDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TyuuiJikouTableRow
        Inherits System.Data.DataRow
        
        Private tableTyuuiJikouTable As TyuuiJikouTableDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTyuuiJikouTable = CType(Me.Table,TyuuiJikouTableDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tyuuijikou_syubetu() As String
            Get
                Try 
                    Return CType(Me(Me.tableTyuuiJikouTable.tyuuijikou_syubetuColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'TyuuiJikouTable' にある列 'tyuuijikou_syubetu' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableTyuuiJikouTable.tyuuijikou_syubetuColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nyuuryoku_date() As String
            Get
                Try 
                    Return CType(Me(Me.tableTyuuiJikouTable.nyuuryoku_dateColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'TyuuiJikouTable' にある列 'nyuuryoku_date' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableTyuuiJikouTable.nyuuryoku_dateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property uketukesya_mei() As String
            Get
                Try 
                    Return CType(Me(Me.tableTyuuiJikouTable.uketukesya_meiColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'TyuuiJikouTable' にある列 'uketukesya_mei' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableTyuuiJikouTable.uketukesya_meiColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property naiyou() As String
            Get
                Try 
                    Return CType(Me(Me.tableTyuuiJikouTable.naiyouColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'TyuuiJikouTable' にある列 'naiyou' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableTyuuiJikouTable.naiyouColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property upd_datetime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTyuuiJikouTable.upd_datetimeColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'TyuuiJikouTable' にある列 'upd_datetime' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableTyuuiJikouTable.upd_datetimeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istyuuijikou_syubetuNull() As Boolean
            Return Me.IsNull(Me.tableTyuuiJikouTable.tyuuijikou_syubetuColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settyuuijikou_syubetuNull()
            Me(Me.tableTyuuiJikouTable.tyuuijikou_syubetuColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnyuuryoku_dateNull() As Boolean
            Return Me.IsNull(Me.tableTyuuiJikouTable.nyuuryoku_dateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnyuuryoku_dateNull()
            Me(Me.tableTyuuiJikouTable.nyuuryoku_dateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isuketukesya_meiNull() As Boolean
            Return Me.IsNull(Me.tableTyuuiJikouTable.uketukesya_meiColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setuketukesya_meiNull()
            Me(Me.tableTyuuiJikouTable.uketukesya_meiColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnaiyouNull() As Boolean
            Return Me.IsNull(Me.tableTyuuiJikouTable.naiyouColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnaiyouNull()
            Me(Me.tableTyuuiJikouTable.naiyouColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isupd_datetimeNull() As Boolean
            Return Me.IsNull(Me.tableTyuuiJikouTable.upd_datetimeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setupd_datetimeNull()
            Me(Me.tableTyuuiJikouTable.upd_datetimeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MeisyouTableRow
        Inherits System.Data.DataRow
        
        Private tableMeisyouTable As MeisyouTableDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMeisyouTable = CType(Me.Table,MeisyouTableDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property code() As String
            Get
                Try 
                    Return CType(Me(Me.tableMeisyouTable.codeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'MeisyouTable' にある列 'code' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableMeisyouTable.codeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property meisyou() As String
            Get
                Try 
                    Return CType(Me(Me.tableMeisyouTable.meisyouColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'MeisyouTable' にある列 'meisyou' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableMeisyouTable.meisyouColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodeNull() As Boolean
            Return Me.IsNull(Me.tableMeisyouTable.codeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodeNull()
            Me(Me.tableMeisyouTable.codeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmeisyouNull() As Boolean
            Return Me.IsNull(Me.tableMeisyouTable.meisyouColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmeisyouNull()
            Me(Me.tableMeisyouTable.meisyouColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class KaisyaTableRow
        Inherits System.Data.DataRow
        
        Private tableKaisyaTable As KaisyaTableDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableKaisyaTable = CType(Me.Table,KaisyaTableDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nyuuryoku_no() As String
            Get
                Try 
                    Return CType(Me(Me.tableKaisyaTable.nyuuryoku_noColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'KaisyaTable' にある列 'nyuuryoku_no' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableKaisyaTable.nyuuryoku_noColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tys_code() As String
            Get
                Try 
                    Return CType(Me(Me.tableKaisyaTable.tys_codeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'KaisyaTable' にある列 'tys_code' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableKaisyaTable.tys_codeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property upd_datetime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableKaisyaTable.upd_datetimeColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'KaisyaTable' にある列 'upd_datetime' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableKaisyaTable.upd_datetimeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnyuuryoku_noNull() As Boolean
            Return Me.IsNull(Me.tableKaisyaTable.nyuuryoku_noColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnyuuryoku_noNull()
            Me(Me.tableKaisyaTable.nyuuryoku_noColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istys_codeNull() As Boolean
            Return Me.IsNull(Me.tableKaisyaTable.tys_codeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settys_codeNull()
            Me(Me.tableKaisyaTable.tys_codeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isupd_datetimeNull() As Boolean
            Return Me.IsNull(Me.tableKaisyaTable.upd_datetimeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setupd_datetimeNull()
            Me(Me.tableKaisyaTable.upd_datetimeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TyuuiJikouUPDTableRow
        Inherits System.Data.DataRow
        
        Private tableTyuuiJikouUPDTable As TyuuiJikouUPDTableDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTyuuiJikouUPDTable = CType(Me.Table,TyuuiJikouUPDTableDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kameiten_cd() As String
            Get
                Try 
                    Return CType(Me(Me.tableTyuuiJikouUPDTable.kameiten_cdColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'TyuuiJikouUPDTable' にある列 'kameiten_cd' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableTyuuiJikouUPDTable.kameiten_cdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tyuuijikou_syubetu() As String
            Get
                Try 
                    Return CType(Me(Me.tableTyuuiJikouUPDTable.tyuuijikou_syubetuColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'TyuuiJikouUPDTable' にある列 'tyuuijikou_syubetu' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableTyuuiJikouUPDTable.tyuuijikou_syubetuColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nyuuryoku_no() As String
            Get
                Try 
                    Return CType(Me(Me.tableTyuuiJikouUPDTable.nyuuryoku_noColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'TyuuiJikouUPDTable' にある列 'nyuuryoku_no' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableTyuuiJikouUPDTable.nyuuryoku_noColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nyuuryoku_date() As String
            Get
                Try 
                    Return CType(Me(Me.tableTyuuiJikouUPDTable.nyuuryoku_dateColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'TyuuiJikouUPDTable' にある列 'nyuuryoku_date' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableTyuuiJikouUPDTable.nyuuryoku_dateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property uketukesya_mei() As String
            Get
                Try 
                    Return CType(Me(Me.tableTyuuiJikouUPDTable.uketukesya_meiColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'TyuuiJikouUPDTable' にある列 'uketukesya_mei' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableTyuuiJikouUPDTable.uketukesya_meiColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property naiyou() As String
            Get
                Try 
                    Return CType(Me(Me.tableTyuuiJikouUPDTable.naiyouColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'TyuuiJikouUPDTable' にある列 'naiyou' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableTyuuiJikouUPDTable.naiyouColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kousinsya() As String
            Get
                Try 
                    Return CType(Me(Me.tableTyuuiJikouUPDTable.kousinsyaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'TyuuiJikouUPDTable' にある列 'kousinsya' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableTyuuiJikouUPDTable.kousinsyaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iskameiten_cdNull() As Boolean
            Return Me.IsNull(Me.tableTyuuiJikouUPDTable.kameiten_cdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setkameiten_cdNull()
            Me(Me.tableTyuuiJikouUPDTable.kameiten_cdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istyuuijikou_syubetuNull() As Boolean
            Return Me.IsNull(Me.tableTyuuiJikouUPDTable.tyuuijikou_syubetuColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settyuuijikou_syubetuNull()
            Me(Me.tableTyuuiJikouUPDTable.tyuuijikou_syubetuColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnyuuryoku_noNull() As Boolean
            Return Me.IsNull(Me.tableTyuuiJikouUPDTable.nyuuryoku_noColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnyuuryoku_noNull()
            Me(Me.tableTyuuiJikouUPDTable.nyuuryoku_noColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnyuuryoku_dateNull() As Boolean
            Return Me.IsNull(Me.tableTyuuiJikouUPDTable.nyuuryoku_dateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnyuuryoku_dateNull()
            Me(Me.tableTyuuiJikouUPDTable.nyuuryoku_dateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isuketukesya_meiNull() As Boolean
            Return Me.IsNull(Me.tableTyuuiJikouUPDTable.uketukesya_meiColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setuketukesya_meiNull()
            Me(Me.tableTyuuiJikouUPDTable.uketukesya_meiColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnaiyouNull() As Boolean
            Return Me.IsNull(Me.tableTyuuiJikouUPDTable.naiyouColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnaiyouNull()
            Me(Me.tableTyuuiJikouUPDTable.naiyouColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IskousinsyaNull() As Boolean
            Return Me.IsNull(Me.tableTyuuiJikouUPDTable.kousinsyaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetkousinsyaNull()
            Me(Me.tableTyuuiJikouUPDTable.kousinsyaColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TyousaKaisyaUPDTableRow
        Inherits System.Data.DataRow
        
        Private tableTyousaKaisyaUPDTable As TyousaKaisyaUPDTableDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTyousaKaisyaUPDTable = CType(Me.Table,TyousaKaisyaUPDTableDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kameiten_cd() As String
            Get
                Try 
                    Return CType(Me(Me.tableTyousaKaisyaUPDTable.kameiten_cdColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'TyousaKaisyaUPDTable' にある列 'kameiten_cd' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableTyousaKaisyaUPDTable.kameiten_cdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kaisya_kbn() As String
            Get
                Try 
                    Return CType(Me(Me.tableTyousaKaisyaUPDTable.kaisya_kbnColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'TyousaKaisyaUPDTable' にある列 'kaisya_kbn' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableTyousaKaisyaUPDTable.kaisya_kbnColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kahi_kbn() As String
            Get
                Try 
                    Return CType(Me(Me.tableTyousaKaisyaUPDTable.kahi_kbnColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'TyousaKaisyaUPDTable' にある列 'kahi_kbn' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableTyousaKaisyaUPDTable.kahi_kbnColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tys_kaisya_cd() As String
            Get
                Try 
                    Return CType(Me(Me.tableTyousaKaisyaUPDTable.tys_kaisya_cdColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'TyousaKaisyaUPDTable' にある列 'tys_kaisya_cd' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableTyousaKaisyaUPDTable.tys_kaisya_cdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jigyousyo_cd() As String
            Get
                Try 
                    Return CType(Me(Me.tableTyousaKaisyaUPDTable.jigyousyo_cdColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'TyousaKaisyaUPDTable' にある列 'jigyousyo_cd' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableTyousaKaisyaUPDTable.jigyousyo_cdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kousinsya() As String
            Get
                Try 
                    Return CType(Me(Me.tableTyousaKaisyaUPDTable.kousinsyaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'TyousaKaisyaUPDTable' にある列 'kousinsya' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableTyousaKaisyaUPDTable.kousinsyaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iskameiten_cdNull() As Boolean
            Return Me.IsNull(Me.tableTyousaKaisyaUPDTable.kameiten_cdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setkameiten_cdNull()
            Me(Me.tableTyousaKaisyaUPDTable.kameiten_cdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iskaisya_kbnNull() As Boolean
            Return Me.IsNull(Me.tableTyousaKaisyaUPDTable.kaisya_kbnColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setkaisya_kbnNull()
            Me(Me.tableTyousaKaisyaUPDTable.kaisya_kbnColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iskahi_kbnNull() As Boolean
            Return Me.IsNull(Me.tableTyousaKaisyaUPDTable.kahi_kbnColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setkahi_kbnNull()
            Me(Me.tableTyousaKaisyaUPDTable.kahi_kbnColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istys_kaisya_cdNull() As Boolean
            Return Me.IsNull(Me.tableTyousaKaisyaUPDTable.tys_kaisya_cdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settys_kaisya_cdNull()
            Me(Me.tableTyousaKaisyaUPDTable.tys_kaisya_cdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjigyousyo_cdNull() As Boolean
            Return Me.IsNull(Me.tableTyousaKaisyaUPDTable.jigyousyo_cdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjigyousyo_cdNull()
            Me(Me.tableTyousaKaisyaUPDTable.jigyousyo_cdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IskousinsyaNull() As Boolean
            Return Me.IsNull(Me.tableTyousaKaisyaUPDTable.kousinsyaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetkousinsyaNull()
            Me(Me.tableTyousaKaisyaUPDTable.kousinsyaColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class KisoSiyouTableRow
        Inherits System.Data.DataRow
        
        Private tableKisoSiyouTable As KisoSiyouTableDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableKisoSiyouTable = CType(Me.Table,KisoSiyouTableDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nyuuryoku_no() As String
            Get
                Try 
                    Return CType(Me(Me.tableKisoSiyouTable.nyuuryoku_noColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'KisoSiyouTable' にある列 'nyuuryoku_no' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableKisoSiyouTable.nyuuryoku_noColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ks_siyou_no() As String
            Get
                Try 
                    Return CType(Me(Me.tableKisoSiyouTable.ks_siyou_noColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'KisoSiyouTable' にある列 'ks_siyou_no' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableKisoSiyouTable.ks_siyou_noColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property upd_datetime() As String
            Get
                Try 
                    Return CType(Me(Me.tableKisoSiyouTable.upd_datetimeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'KisoSiyouTable' にある列 'upd_datetime' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableKisoSiyouTable.upd_datetimeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnyuuryoku_noNull() As Boolean
            Return Me.IsNull(Me.tableKisoSiyouTable.nyuuryoku_noColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnyuuryoku_noNull()
            Me(Me.tableKisoSiyouTable.nyuuryoku_noColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isks_siyou_noNull() As Boolean
            Return Me.IsNull(Me.tableKisoSiyouTable.ks_siyou_noColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setks_siyou_noNull()
            Me(Me.tableKisoSiyouTable.ks_siyou_noColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isupd_datetimeNull() As Boolean
            Return Me.IsNull(Me.tableKisoSiyouTable.upd_datetimeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setupd_datetimeNull()
            Me(Me.tableKisoSiyouTable.upd_datetimeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TyuuiJikouTableRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As TyuuiJikouTableRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TyuuiJikouTableRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TyuuiJikouTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MeisyouTableRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As MeisyouTableRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MeisyouTableRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MeisyouTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class KaisyaTableRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As KaisyaTableRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As KaisyaTableRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As KaisyaTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TyuuiJikouUPDTableRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As TyuuiJikouUPDTableRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TyuuiJikouUPDTableRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TyuuiJikouUPDTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TyousaKaisyaUPDTableRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As TyousaKaisyaUPDTableRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TyousaKaisyaUPDTableRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TyousaKaisyaUPDTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class KisoSiyouTableRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As KisoSiyouTableRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As KisoSiyouTableRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As KisoSiyouTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
