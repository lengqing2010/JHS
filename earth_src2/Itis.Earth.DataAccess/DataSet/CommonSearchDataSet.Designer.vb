'------------------------------------------------------------------------------
' <auto-generated>
'     このコードはツールによって生成されました。
'     ランタイム バージョン:2.0.50727.3053
'
'     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
'     コードが再生成されるときに損失したりします。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("CommonSearchDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class CommonSearchDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableEigyousyoTable As EigyousyoTableDataTable
    
    Private tableKameitenSearchTable As KameitenSearchTableDataTable
    
    Private tableKeiretuTable As KeiretuTableDataTable
    
    Private tableSyouhinTable As SyouhinTableDataTable
    
    Private tableBirudaTable As BirudaTableDataTable
    
    Private tableAccountTable As AccountTableDataTable
    
    Private tablemeisyouTable As meisyouTableDataTable
    
    Private tabletyousakaisyaTable As tyousakaisyaTableDataTable
    
    Private tableIntTable As IntTableDataTable
    
    Private tableSeikyuuSakiTable As SeikyuuSakiTableDataTable
    
    Private tableSeikyuuSakiTable1 As SeikyuuSakiTable1DataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("EigyousyoTable")) Is Nothing) Then
                MyBase.Tables.Add(New EigyousyoTableDataTable(ds.Tables("EigyousyoTable")))
            End If
            If (Not (ds.Tables("KameitenSearchTable")) Is Nothing) Then
                MyBase.Tables.Add(New KameitenSearchTableDataTable(ds.Tables("KameitenSearchTable")))
            End If
            If (Not (ds.Tables("KeiretuTable")) Is Nothing) Then
                MyBase.Tables.Add(New KeiretuTableDataTable(ds.Tables("KeiretuTable")))
            End If
            If (Not (ds.Tables("SyouhinTable")) Is Nothing) Then
                MyBase.Tables.Add(New SyouhinTableDataTable(ds.Tables("SyouhinTable")))
            End If
            If (Not (ds.Tables("BirudaTable")) Is Nothing) Then
                MyBase.Tables.Add(New BirudaTableDataTable(ds.Tables("BirudaTable")))
            End If
            If (Not (ds.Tables("AccountTable")) Is Nothing) Then
                MyBase.Tables.Add(New AccountTableDataTable(ds.Tables("AccountTable")))
            End If
            If (Not (ds.Tables("meisyouTable")) Is Nothing) Then
                MyBase.Tables.Add(New meisyouTableDataTable(ds.Tables("meisyouTable")))
            End If
            If (Not (ds.Tables("TyousakaisyaTable")) Is Nothing) Then
                MyBase.Tables.Add(New tyousakaisyaTableDataTable(ds.Tables("TyousakaisyaTable")))
            End If
            If (Not (ds.Tables("IntTable")) Is Nothing) Then
                MyBase.Tables.Add(New IntTableDataTable(ds.Tables("IntTable")))
            End If
            If (Not (ds.Tables("SeikyuuSakiTable")) Is Nothing) Then
                MyBase.Tables.Add(New SeikyuuSakiTableDataTable(ds.Tables("SeikyuuSakiTable")))
            End If
            If (Not (ds.Tables("SeikyuuSakiTable1")) Is Nothing) Then
                MyBase.Tables.Add(New SeikyuuSakiTable1DataTable(ds.Tables("SeikyuuSakiTable1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EigyousyoTable() As EigyousyoTableDataTable
        Get
            Return Me.tableEigyousyoTable
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property KameitenSearchTable() As KameitenSearchTableDataTable
        Get
            Return Me.tableKameitenSearchTable
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property KeiretuTable() As KeiretuTableDataTable
        Get
            Return Me.tableKeiretuTable
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SyouhinTable() As SyouhinTableDataTable
        Get
            Return Me.tableSyouhinTable
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BirudaTable() As BirudaTableDataTable
        Get
            Return Me.tableBirudaTable
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AccountTable() As AccountTableDataTable
        Get
            Return Me.tableAccountTable
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property meisyouTable() As meisyouTableDataTable
        Get
            Return Me.tablemeisyouTable
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tyousakaisyaTable() As tyousakaisyaTableDataTable
        Get
            Return Me.tabletyousakaisyaTable
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IntTable() As IntTableDataTable
        Get
            Return Me.tableIntTable
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SeikyuuSakiTable() As SeikyuuSakiTableDataTable
        Get
            Return Me.tableSeikyuuSakiTable
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SeikyuuSakiTable1() As SeikyuuSakiTable1DataTable
        Get
            Return Me.tableSeikyuuSakiTable1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As CommonSearchDataSet = CType(MyBase.Clone,CommonSearchDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("EigyousyoTable")) Is Nothing) Then
                MyBase.Tables.Add(New EigyousyoTableDataTable(ds.Tables("EigyousyoTable")))
            End If
            If (Not (ds.Tables("KameitenSearchTable")) Is Nothing) Then
                MyBase.Tables.Add(New KameitenSearchTableDataTable(ds.Tables("KameitenSearchTable")))
            End If
            If (Not (ds.Tables("KeiretuTable")) Is Nothing) Then
                MyBase.Tables.Add(New KeiretuTableDataTable(ds.Tables("KeiretuTable")))
            End If
            If (Not (ds.Tables("SyouhinTable")) Is Nothing) Then
                MyBase.Tables.Add(New SyouhinTableDataTable(ds.Tables("SyouhinTable")))
            End If
            If (Not (ds.Tables("BirudaTable")) Is Nothing) Then
                MyBase.Tables.Add(New BirudaTableDataTable(ds.Tables("BirudaTable")))
            End If
            If (Not (ds.Tables("AccountTable")) Is Nothing) Then
                MyBase.Tables.Add(New AccountTableDataTable(ds.Tables("AccountTable")))
            End If
            If (Not (ds.Tables("meisyouTable")) Is Nothing) Then
                MyBase.Tables.Add(New meisyouTableDataTable(ds.Tables("meisyouTable")))
            End If
            If (Not (ds.Tables("TyousakaisyaTable")) Is Nothing) Then
                MyBase.Tables.Add(New tyousakaisyaTableDataTable(ds.Tables("TyousakaisyaTable")))
            End If
            If (Not (ds.Tables("IntTable")) Is Nothing) Then
                MyBase.Tables.Add(New IntTableDataTable(ds.Tables("IntTable")))
            End If
            If (Not (ds.Tables("SeikyuuSakiTable")) Is Nothing) Then
                MyBase.Tables.Add(New SeikyuuSakiTableDataTable(ds.Tables("SeikyuuSakiTable")))
            End If
            If (Not (ds.Tables("SeikyuuSakiTable1")) Is Nothing) Then
                MyBase.Tables.Add(New SeikyuuSakiTable1DataTable(ds.Tables("SeikyuuSakiTable1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableEigyousyoTable = CType(MyBase.Tables("EigyousyoTable"),EigyousyoTableDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEigyousyoTable) Is Nothing) Then
                Me.tableEigyousyoTable.InitVars
            End If
        End If
        Me.tableKameitenSearchTable = CType(MyBase.Tables("KameitenSearchTable"),KameitenSearchTableDataTable)
        If (initTable = true) Then
            If (Not (Me.tableKameitenSearchTable) Is Nothing) Then
                Me.tableKameitenSearchTable.InitVars
            End If
        End If
        Me.tableKeiretuTable = CType(MyBase.Tables("KeiretuTable"),KeiretuTableDataTable)
        If (initTable = true) Then
            If (Not (Me.tableKeiretuTable) Is Nothing) Then
                Me.tableKeiretuTable.InitVars
            End If
        End If
        Me.tableSyouhinTable = CType(MyBase.Tables("SyouhinTable"),SyouhinTableDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSyouhinTable) Is Nothing) Then
                Me.tableSyouhinTable.InitVars
            End If
        End If
        Me.tableBirudaTable = CType(MyBase.Tables("BirudaTable"),BirudaTableDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBirudaTable) Is Nothing) Then
                Me.tableBirudaTable.InitVars
            End If
        End If
        Me.tableAccountTable = CType(MyBase.Tables("AccountTable"),AccountTableDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAccountTable) Is Nothing) Then
                Me.tableAccountTable.InitVars
            End If
        End If
        Me.tablemeisyouTable = CType(MyBase.Tables("meisyouTable"),meisyouTableDataTable)
        If (initTable = true) Then
            If (Not (Me.tablemeisyouTable) Is Nothing) Then
                Me.tablemeisyouTable.InitVars
            End If
        End If
        Me.tabletyousakaisyaTable = CType(MyBase.Tables("TyousakaisyaTable"),tyousakaisyaTableDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletyousakaisyaTable) Is Nothing) Then
                Me.tabletyousakaisyaTable.InitVars
            End If
        End If
        Me.tableIntTable = CType(MyBase.Tables("IntTable"),IntTableDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIntTable) Is Nothing) Then
                Me.tableIntTable.InitVars
            End If
        End If
        Me.tableSeikyuuSakiTable = CType(MyBase.Tables("SeikyuuSakiTable"),SeikyuuSakiTableDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSeikyuuSakiTable) Is Nothing) Then
                Me.tableSeikyuuSakiTable.InitVars
            End If
        End If
        Me.tableSeikyuuSakiTable1 = CType(MyBase.Tables("SeikyuuSakiTable1"),SeikyuuSakiTable1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableSeikyuuSakiTable1) Is Nothing) Then
                Me.tableSeikyuuSakiTable1.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "CommonSearchDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/CommonSearchDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableEigyousyoTable = New EigyousyoTableDataTable
        MyBase.Tables.Add(Me.tableEigyousyoTable)
        Me.tableKameitenSearchTable = New KameitenSearchTableDataTable
        MyBase.Tables.Add(Me.tableKameitenSearchTable)
        Me.tableKeiretuTable = New KeiretuTableDataTable
        MyBase.Tables.Add(Me.tableKeiretuTable)
        Me.tableSyouhinTable = New SyouhinTableDataTable
        MyBase.Tables.Add(Me.tableSyouhinTable)
        Me.tableBirudaTable = New BirudaTableDataTable
        MyBase.Tables.Add(Me.tableBirudaTable)
        Me.tableAccountTable = New AccountTableDataTable
        MyBase.Tables.Add(Me.tableAccountTable)
        Me.tablemeisyouTable = New meisyouTableDataTable
        MyBase.Tables.Add(Me.tablemeisyouTable)
        Me.tabletyousakaisyaTable = New tyousakaisyaTableDataTable
        MyBase.Tables.Add(Me.tabletyousakaisyaTable)
        Me.tableIntTable = New IntTableDataTable
        MyBase.Tables.Add(Me.tableIntTable)
        Me.tableSeikyuuSakiTable = New SeikyuuSakiTableDataTable
        MyBase.Tables.Add(Me.tableSeikyuuSakiTable)
        Me.tableSeikyuuSakiTable1 = New SeikyuuSakiTable1DataTable
        MyBase.Tables.Add(Me.tableSeikyuuSakiTable1)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEigyousyoTable() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeKameitenSearchTable() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeKeiretuTable() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSyouhinTable() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeBirudaTable() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAccountTable() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializemeisyouTable() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetyousakaisyaTable() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIntTable() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSeikyuuSakiTable() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSeikyuuSakiTable1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As CommonSearchDataSet = New CommonSearchDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub EigyousyoTableRowChangeEventHandler(ByVal sender As Object, ByVal e As EigyousyoTableRowChangeEvent)
    
    Public Delegate Sub KameitenSearchTableRowChangeEventHandler(ByVal sender As Object, ByVal e As KameitenSearchTableRowChangeEvent)
    
    Public Delegate Sub KeiretuTableRowChangeEventHandler(ByVal sender As Object, ByVal e As KeiretuTableRowChangeEvent)
    
    Public Delegate Sub SyouhinTableRowChangeEventHandler(ByVal sender As Object, ByVal e As SyouhinTableRowChangeEvent)
    
    Public Delegate Sub BirudaTableRowChangeEventHandler(ByVal sender As Object, ByVal e As BirudaTableRowChangeEvent)
    
    Public Delegate Sub AccountTableRowChangeEventHandler(ByVal sender As Object, ByVal e As AccountTableRowChangeEvent)
    
    Public Delegate Sub meisyouTableRowChangeEventHandler(ByVal sender As Object, ByVal e As meisyouTableRowChangeEvent)
    
    Public Delegate Sub tyousakaisyaTableRowChangeEventHandler(ByVal sender As Object, ByVal e As tyousakaisyaTableRowChangeEvent)
    
    Public Delegate Sub IntTableRowChangeEventHandler(ByVal sender As Object, ByVal e As IntTableRowChangeEvent)
    
    Public Delegate Sub SeikyuuSakiTableRowChangeEventHandler(ByVal sender As Object, ByVal e As SeikyuuSakiTableRowChangeEvent)
    
    Public Delegate Sub SeikyuuSakiTable1RowChangeEventHandler(ByVal sender As Object, ByVal e As SeikyuuSakiTable1RowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EigyousyoTableDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columneigyousyo_cd As Global.System.Data.DataColumn
        
        Private columneigyousyo_mei As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EigyousyoTable"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property eigyousyo_cdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneigyousyo_cd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property eigyousyo_meiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneigyousyo_mei
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EigyousyoTableRow
            Get
                Return CType(Me.Rows(index),EigyousyoTableRow)
            End Get
        End Property
        
        Public Event EigyousyoTableRowChanging As EigyousyoTableRowChangeEventHandler
        
        Public Event EigyousyoTableRowChanged As EigyousyoTableRowChangeEventHandler
        
        Public Event EigyousyoTableRowDeleting As EigyousyoTableRowChangeEventHandler
        
        Public Event EigyousyoTableRowDeleted As EigyousyoTableRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEigyousyoTableRow(ByVal row As EigyousyoTableRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEigyousyoTableRow(ByVal eigyousyo_cd As String, ByVal eigyousyo_mei As String) As EigyousyoTableRow
            Dim rowEigyousyoTableRow As EigyousyoTableRow = CType(Me.NewRow,EigyousyoTableRow)
            Dim columnValuesArray() As Object = New Object() {eigyousyo_cd, eigyousyo_mei}
            rowEigyousyoTableRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEigyousyoTableRow)
            Return rowEigyousyoTableRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EigyousyoTableDataTable = CType(MyBase.Clone,EigyousyoTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EigyousyoTableDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columneigyousyo_cd = MyBase.Columns("eigyousyo_cd")
            Me.columneigyousyo_mei = MyBase.Columns("eigyousyo_mei")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columneigyousyo_cd = New Global.System.Data.DataColumn("eigyousyo_cd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneigyousyo_cd)
            Me.columneigyousyo_mei = New Global.System.Data.DataColumn("eigyousyo_mei", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneigyousyo_mei)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEigyousyoTableRow() As EigyousyoTableRow
            Return CType(Me.NewRow,EigyousyoTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EigyousyoTableRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EigyousyoTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EigyousyoTableRowChangedEvent) Is Nothing) Then
                RaiseEvent EigyousyoTableRowChanged(Me, New EigyousyoTableRowChangeEvent(CType(e.Row,EigyousyoTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EigyousyoTableRowChangingEvent) Is Nothing) Then
                RaiseEvent EigyousyoTableRowChanging(Me, New EigyousyoTableRowChangeEvent(CType(e.Row,EigyousyoTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EigyousyoTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent EigyousyoTableRowDeleted(Me, New EigyousyoTableRowChangeEvent(CType(e.Row,EigyousyoTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EigyousyoTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent EigyousyoTableRowDeleting(Me, New EigyousyoTableRowChangeEvent(CType(e.Row,EigyousyoTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEigyousyoTableRow(ByVal row As EigyousyoTableRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CommonSearchDataSet = New CommonSearchDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EigyousyoTableDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class KameitenSearchTableDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnkameiten_cd As Global.System.Data.DataColumn
        
        Private columnkameiten_mei1 As Global.System.Data.DataColumn
        
        Private columntodouhuken_mei As Global.System.Data.DataColumn
        
        Private columntenmei_kana1 As Global.System.Data.DataColumn
        
        Private columntorikesi As Global.System.Data.DataColumn
        
        Private columntorikesi_txt As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "KameitenSearchTable"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kameiten_cdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkameiten_cd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kameiten_mei1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnkameiten_mei1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property todouhuken_meiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntodouhuken_mei
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tenmei_kana1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columntenmei_kana1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property torikesiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntorikesi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property torikesi_txtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntorikesi_txt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As KameitenSearchTableRow
            Get
                Return CType(Me.Rows(index),KameitenSearchTableRow)
            End Get
        End Property
        
        Public Event KameitenSearchTableRowChanging As KameitenSearchTableRowChangeEventHandler
        
        Public Event KameitenSearchTableRowChanged As KameitenSearchTableRowChangeEventHandler
        
        Public Event KameitenSearchTableRowDeleting As KameitenSearchTableRowChangeEventHandler
        
        Public Event KameitenSearchTableRowDeleted As KameitenSearchTableRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddKameitenSearchTableRow(ByVal row As KameitenSearchTableRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddKameitenSearchTableRow(ByVal kameiten_cd As String, ByVal kameiten_mei1 As String, ByVal todouhuken_mei As String, ByVal tenmei_kana1 As String, ByVal torikesi As Long, ByVal torikesi_txt As String) As KameitenSearchTableRow
            Dim rowKameitenSearchTableRow As KameitenSearchTableRow = CType(Me.NewRow,KameitenSearchTableRow)
            Dim columnValuesArray() As Object = New Object() {kameiten_cd, kameiten_mei1, todouhuken_mei, tenmei_kana1, torikesi, torikesi_txt}
            rowKameitenSearchTableRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowKameitenSearchTableRow)
            Return rowKameitenSearchTableRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As KameitenSearchTableDataTable = CType(MyBase.Clone,KameitenSearchTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New KameitenSearchTableDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnkameiten_cd = MyBase.Columns("kameiten_cd")
            Me.columnkameiten_mei1 = MyBase.Columns("kameiten_mei1")
            Me.columntodouhuken_mei = MyBase.Columns("todouhuken_mei")
            Me.columntenmei_kana1 = MyBase.Columns("tenmei_kana1")
            Me.columntorikesi = MyBase.Columns("torikesi")
            Me.columntorikesi_txt = MyBase.Columns("torikesi_txt")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnkameiten_cd = New Global.System.Data.DataColumn("kameiten_cd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkameiten_cd)
            Me.columnkameiten_mei1 = New Global.System.Data.DataColumn("kameiten_mei1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkameiten_mei1)
            Me.columntodouhuken_mei = New Global.System.Data.DataColumn("todouhuken_mei", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntodouhuken_mei)
            Me.columntenmei_kana1 = New Global.System.Data.DataColumn("tenmei_kana1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntenmei_kana1)
            Me.columntorikesi = New Global.System.Data.DataColumn("torikesi", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntorikesi)
            Me.columntorikesi_txt = New Global.System.Data.DataColumn("torikesi_txt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntorikesi_txt)
            Me.columnkameiten_cd.AllowDBNull = false
            Me.columnkameiten_cd.MaxLength = 5
            Me.columnkameiten_mei1.AllowDBNull = false
            Me.columnkameiten_mei1.MaxLength = 40
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewKameitenSearchTableRow() As KameitenSearchTableRow
            Return CType(Me.NewRow,KameitenSearchTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New KameitenSearchTableRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(KameitenSearchTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.KameitenSearchTableRowChangedEvent) Is Nothing) Then
                RaiseEvent KameitenSearchTableRowChanged(Me, New KameitenSearchTableRowChangeEvent(CType(e.Row,KameitenSearchTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.KameitenSearchTableRowChangingEvent) Is Nothing) Then
                RaiseEvent KameitenSearchTableRowChanging(Me, New KameitenSearchTableRowChangeEvent(CType(e.Row,KameitenSearchTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.KameitenSearchTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent KameitenSearchTableRowDeleted(Me, New KameitenSearchTableRowChangeEvent(CType(e.Row,KameitenSearchTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.KameitenSearchTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent KameitenSearchTableRowDeleting(Me, New KameitenSearchTableRowChangeEvent(CType(e.Row,KameitenSearchTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveKameitenSearchTableRow(ByVal row As KameitenSearchTableRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CommonSearchDataSet = New CommonSearchDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "KameitenSearchTableDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class KeiretuTableDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnkbn As Global.System.Data.DataColumn
        
        Private columnkeiretu_cd As Global.System.Data.DataColumn
        
        Private columnkeiretu_mei As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "KeiretuTable"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kbnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkbn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property keiretu_cdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkeiretu_cd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property keiretu_meiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkeiretu_mei
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As KeiretuTableRow
            Get
                Return CType(Me.Rows(index),KeiretuTableRow)
            End Get
        End Property
        
        Public Event KeiretuTableRowChanging As KeiretuTableRowChangeEventHandler
        
        Public Event KeiretuTableRowChanged As KeiretuTableRowChangeEventHandler
        
        Public Event KeiretuTableRowDeleting As KeiretuTableRowChangeEventHandler
        
        Public Event KeiretuTableRowDeleted As KeiretuTableRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddKeiretuTableRow(ByVal row As KeiretuTableRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddKeiretuTableRow(ByVal kbn As String, ByVal keiretu_cd As String, ByVal keiretu_mei As String) As KeiretuTableRow
            Dim rowKeiretuTableRow As KeiretuTableRow = CType(Me.NewRow,KeiretuTableRow)
            Dim columnValuesArray() As Object = New Object() {kbn, keiretu_cd, keiretu_mei}
            rowKeiretuTableRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowKeiretuTableRow)
            Return rowKeiretuTableRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As KeiretuTableDataTable = CType(MyBase.Clone,KeiretuTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New KeiretuTableDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnkbn = MyBase.Columns("kbn")
            Me.columnkeiretu_cd = MyBase.Columns("keiretu_cd")
            Me.columnkeiretu_mei = MyBase.Columns("keiretu_mei")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnkbn = New Global.System.Data.DataColumn("kbn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkbn)
            Me.columnkeiretu_cd = New Global.System.Data.DataColumn("keiretu_cd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkeiretu_cd)
            Me.columnkeiretu_mei = New Global.System.Data.DataColumn("keiretu_mei", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkeiretu_mei)
            Me.columnkeiretu_cd.Caption = "eigyousyo_cd"
            Me.columnkeiretu_mei.Caption = "eigyousyo_mei"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewKeiretuTableRow() As KeiretuTableRow
            Return CType(Me.NewRow,KeiretuTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New KeiretuTableRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(KeiretuTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.KeiretuTableRowChangedEvent) Is Nothing) Then
                RaiseEvent KeiretuTableRowChanged(Me, New KeiretuTableRowChangeEvent(CType(e.Row,KeiretuTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.KeiretuTableRowChangingEvent) Is Nothing) Then
                RaiseEvent KeiretuTableRowChanging(Me, New KeiretuTableRowChangeEvent(CType(e.Row,KeiretuTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.KeiretuTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent KeiretuTableRowDeleted(Me, New KeiretuTableRowChangeEvent(CType(e.Row,KeiretuTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.KeiretuTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent KeiretuTableRowDeleting(Me, New KeiretuTableRowChangeEvent(CType(e.Row,KeiretuTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveKeiretuTableRow(ByVal row As KeiretuTableRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CommonSearchDataSet = New CommonSearchDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "KeiretuTableDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SyouhinTableDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnsyouhin_cd As Global.System.Data.DataColumn
        
        Private columnsyouhin_mei As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SyouhinTable"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syouhin_cdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyouhin_cd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syouhin_meiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyouhin_mei
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SyouhinTableRow
            Get
                Return CType(Me.Rows(index),SyouhinTableRow)
            End Get
        End Property
        
        Public Event SyouhinTableRowChanging As SyouhinTableRowChangeEventHandler
        
        Public Event SyouhinTableRowChanged As SyouhinTableRowChangeEventHandler
        
        Public Event SyouhinTableRowDeleting As SyouhinTableRowChangeEventHandler
        
        Public Event SyouhinTableRowDeleted As SyouhinTableRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSyouhinTableRow(ByVal row As SyouhinTableRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSyouhinTableRow(ByVal syouhin_cd As String, ByVal syouhin_mei As String) As SyouhinTableRow
            Dim rowSyouhinTableRow As SyouhinTableRow = CType(Me.NewRow,SyouhinTableRow)
            Dim columnValuesArray() As Object = New Object() {syouhin_cd, syouhin_mei}
            rowSyouhinTableRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSyouhinTableRow)
            Return rowSyouhinTableRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SyouhinTableDataTable = CType(MyBase.Clone,SyouhinTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SyouhinTableDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsyouhin_cd = MyBase.Columns("syouhin_cd")
            Me.columnsyouhin_mei = MyBase.Columns("syouhin_mei")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsyouhin_cd = New Global.System.Data.DataColumn("syouhin_cd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyouhin_cd)
            Me.columnsyouhin_mei = New Global.System.Data.DataColumn("syouhin_mei", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyouhin_mei)
            Me.columnsyouhin_cd.Caption = "eigyousyo_cd"
            Me.columnsyouhin_mei.Caption = "eigyousyo_mei"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSyouhinTableRow() As SyouhinTableRow
            Return CType(Me.NewRow,SyouhinTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SyouhinTableRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SyouhinTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SyouhinTableRowChangedEvent) Is Nothing) Then
                RaiseEvent SyouhinTableRowChanged(Me, New SyouhinTableRowChangeEvent(CType(e.Row,SyouhinTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SyouhinTableRowChangingEvent) Is Nothing) Then
                RaiseEvent SyouhinTableRowChanging(Me, New SyouhinTableRowChangeEvent(CType(e.Row,SyouhinTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SyouhinTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent SyouhinTableRowDeleted(Me, New SyouhinTableRowChangeEvent(CType(e.Row,SyouhinTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SyouhinTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent SyouhinTableRowDeleting(Me, New SyouhinTableRowChangeEvent(CType(e.Row,SyouhinTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSyouhinTableRow(ByVal row As SyouhinTableRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CommonSearchDataSet = New CommonSearchDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SyouhinTableDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BirudaTableDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncd As Global.System.Data.DataColumn
        
        Private columnmei As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "BirudaTable"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property meiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmei
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BirudaTableRow
            Get
                Return CType(Me.Rows(index),BirudaTableRow)
            End Get
        End Property
        
        Public Event BirudaTableRowChanging As BirudaTableRowChangeEventHandler
        
        Public Event BirudaTableRowChanged As BirudaTableRowChangeEventHandler
        
        Public Event BirudaTableRowDeleting As BirudaTableRowChangeEventHandler
        
        Public Event BirudaTableRowDeleted As BirudaTableRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddBirudaTableRow(ByVal row As BirudaTableRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddBirudaTableRow(ByVal cd As String, ByVal mei As String) As BirudaTableRow
            Dim rowBirudaTableRow As BirudaTableRow = CType(Me.NewRow,BirudaTableRow)
            Dim columnValuesArray() As Object = New Object() {cd, mei}
            rowBirudaTableRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBirudaTableRow)
            Return rowBirudaTableRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BirudaTableDataTable = CType(MyBase.Clone,BirudaTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BirudaTableDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncd = MyBase.Columns("cd")
            Me.columnmei = MyBase.Columns("mei")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncd = New Global.System.Data.DataColumn("cd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncd)
            Me.columnmei = New Global.System.Data.DataColumn("mei", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmei)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewBirudaTableRow() As BirudaTableRow
            Return CType(Me.NewRow,BirudaTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BirudaTableRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BirudaTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BirudaTableRowChangedEvent) Is Nothing) Then
                RaiseEvent BirudaTableRowChanged(Me, New BirudaTableRowChangeEvent(CType(e.Row,BirudaTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BirudaTableRowChangingEvent) Is Nothing) Then
                RaiseEvent BirudaTableRowChanging(Me, New BirudaTableRowChangeEvent(CType(e.Row,BirudaTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BirudaTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent BirudaTableRowDeleted(Me, New BirudaTableRowChangeEvent(CType(e.Row,BirudaTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BirudaTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent BirudaTableRowDeleting(Me, New BirudaTableRowChangeEvent(CType(e.Row,BirudaTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveBirudaTableRow(ByVal row As BirudaTableRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CommonSearchDataSet = New CommonSearchDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BirudaTableDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AccountTableDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnirai_gyoumu_kengen As Global.System.Data.DataColumn
        
        Private columnkekka_gyoumu_kengen As Global.System.Data.DataColumn
        
        Private columnhosyou_gyoumu_kengen As Global.System.Data.DataColumn
        
        Private columnhkks_gyoumu_kengen As Global.System.Data.DataColumn
        
        Private columnkoj_gyoumu_kengen As Global.System.Data.DataColumn
        
        Private columnkeiri_gyoumu_kengen As Global.System.Data.DataColumn
        
        Private columnkaiseki_master_kanri_kengen As Global.System.Data.DataColumn
        
        Private columneigyou_master_kanri_kengen As Global.System.Data.DataColumn
        
        Private columnkkk_master_kanri_kengen As Global.System.Data.DataColumn
        
        Private columnhansoku_uri_kengen As Global.System.Data.DataColumn
        
        Private columndata_haki_kengen As Global.System.Data.DataColumn
        
        Private columnsystem_kanrisya_kengen As Global.System.Data.DataColumn
        
        Private columnsinki_nyuuryoku_kengen As Global.System.Data.DataColumn
        
        Private columnhattyuusyo_kanri_kengen As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AccountTable"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property irai_gyoumu_kengenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnirai_gyoumu_kengen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kekka_gyoumu_kengenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkekka_gyoumu_kengen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property hosyou_gyoumu_kengenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhosyou_gyoumu_kengen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property hkks_gyoumu_kengenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhkks_gyoumu_kengen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property koj_gyoumu_kengenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkoj_gyoumu_kengen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property keiri_gyoumu_kengenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkeiri_gyoumu_kengen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kaiseki_master_kanri_kengenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkaiseki_master_kanri_kengen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property eigyou_master_kanri_kengenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneigyou_master_kanri_kengen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kkk_master_kanri_kengenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkkk_master_kanri_kengen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property hansoku_uri_kengenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhansoku_uri_kengen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property data_haki_kengenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndata_haki_kengen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property system_kanrisya_kengenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsystem_kanrisya_kengen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sinki_nyuuryoku_kengenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsinki_nyuuryoku_kengen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property hattyuusyo_kanri_kengenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhattyuusyo_kanri_kengen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AccountTableRow
            Get
                Return CType(Me.Rows(index),AccountTableRow)
            End Get
        End Property
        
        Public Event AccountTableRowChanging As AccountTableRowChangeEventHandler
        
        Public Event AccountTableRowChanged As AccountTableRowChangeEventHandler
        
        Public Event AccountTableRowDeleting As AccountTableRowChangeEventHandler
        
        Public Event AccountTableRowDeleted As AccountTableRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAccountTableRow(ByVal row As AccountTableRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAccountTableRow(ByVal irai_gyoumu_kengen As String, ByVal kekka_gyoumu_kengen As String, ByVal hosyou_gyoumu_kengen As String, ByVal hkks_gyoumu_kengen As String, ByVal koj_gyoumu_kengen As String, ByVal keiri_gyoumu_kengen As String, ByVal kaiseki_master_kanri_kengen As String, ByVal eigyou_master_kanri_kengen As String, ByVal kkk_master_kanri_kengen As String, ByVal hansoku_uri_kengen As String, ByVal data_haki_kengen As String, ByVal system_kanrisya_kengen As String, ByVal sinki_nyuuryoku_kengen As String, ByVal hattyuusyo_kanri_kengen As String) As AccountTableRow
            Dim rowAccountTableRow As AccountTableRow = CType(Me.NewRow,AccountTableRow)
            Dim columnValuesArray() As Object = New Object() {irai_gyoumu_kengen, kekka_gyoumu_kengen, hosyou_gyoumu_kengen, hkks_gyoumu_kengen, koj_gyoumu_kengen, keiri_gyoumu_kengen, kaiseki_master_kanri_kengen, eigyou_master_kanri_kengen, kkk_master_kanri_kengen, hansoku_uri_kengen, data_haki_kengen, system_kanrisya_kengen, sinki_nyuuryoku_kengen, hattyuusyo_kanri_kengen}
            rowAccountTableRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAccountTableRow)
            Return rowAccountTableRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AccountTableDataTable = CType(MyBase.Clone,AccountTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AccountTableDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnirai_gyoumu_kengen = MyBase.Columns("irai_gyoumu_kengen")
            Me.columnkekka_gyoumu_kengen = MyBase.Columns("kekka_gyoumu_kengen")
            Me.columnhosyou_gyoumu_kengen = MyBase.Columns("hosyou_gyoumu_kengen")
            Me.columnhkks_gyoumu_kengen = MyBase.Columns("hkks_gyoumu_kengen")
            Me.columnkoj_gyoumu_kengen = MyBase.Columns("koj_gyoumu_kengen")
            Me.columnkeiri_gyoumu_kengen = MyBase.Columns("keiri_gyoumu_kengen")
            Me.columnkaiseki_master_kanri_kengen = MyBase.Columns("kaiseki_master_kanri_kengen")
            Me.columneigyou_master_kanri_kengen = MyBase.Columns("eigyou_master_kanri_kengen")
            Me.columnkkk_master_kanri_kengen = MyBase.Columns("kkk_master_kanri_kengen")
            Me.columnhansoku_uri_kengen = MyBase.Columns("hansoku_uri_kengen")
            Me.columndata_haki_kengen = MyBase.Columns("data_haki_kengen")
            Me.columnsystem_kanrisya_kengen = MyBase.Columns("system_kanrisya_kengen")
            Me.columnsinki_nyuuryoku_kengen = MyBase.Columns("sinki_nyuuryoku_kengen")
            Me.columnhattyuusyo_kanri_kengen = MyBase.Columns("hattyuusyo_kanri_kengen")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnirai_gyoumu_kengen = New Global.System.Data.DataColumn("irai_gyoumu_kengen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnirai_gyoumu_kengen)
            Me.columnkekka_gyoumu_kengen = New Global.System.Data.DataColumn("kekka_gyoumu_kengen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkekka_gyoumu_kengen)
            Me.columnhosyou_gyoumu_kengen = New Global.System.Data.DataColumn("hosyou_gyoumu_kengen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhosyou_gyoumu_kengen)
            Me.columnhkks_gyoumu_kengen = New Global.System.Data.DataColumn("hkks_gyoumu_kengen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhkks_gyoumu_kengen)
            Me.columnkoj_gyoumu_kengen = New Global.System.Data.DataColumn("koj_gyoumu_kengen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkoj_gyoumu_kengen)
            Me.columnkeiri_gyoumu_kengen = New Global.System.Data.DataColumn("keiri_gyoumu_kengen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkeiri_gyoumu_kengen)
            Me.columnkaiseki_master_kanri_kengen = New Global.System.Data.DataColumn("kaiseki_master_kanri_kengen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkaiseki_master_kanri_kengen)
            Me.columneigyou_master_kanri_kengen = New Global.System.Data.DataColumn("eigyou_master_kanri_kengen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneigyou_master_kanri_kengen)
            Me.columnkkk_master_kanri_kengen = New Global.System.Data.DataColumn("kkk_master_kanri_kengen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkkk_master_kanri_kengen)
            Me.columnhansoku_uri_kengen = New Global.System.Data.DataColumn("hansoku_uri_kengen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhansoku_uri_kengen)
            Me.columndata_haki_kengen = New Global.System.Data.DataColumn("data_haki_kengen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndata_haki_kengen)
            Me.columnsystem_kanrisya_kengen = New Global.System.Data.DataColumn("system_kanrisya_kengen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsystem_kanrisya_kengen)
            Me.columnsinki_nyuuryoku_kengen = New Global.System.Data.DataColumn("sinki_nyuuryoku_kengen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsinki_nyuuryoku_kengen)
            Me.columnhattyuusyo_kanri_kengen = New Global.System.Data.DataColumn("hattyuusyo_kanri_kengen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhattyuusyo_kanri_kengen)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAccountTableRow() As AccountTableRow
            Return CType(Me.NewRow,AccountTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AccountTableRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AccountTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AccountTableRowChangedEvent) Is Nothing) Then
                RaiseEvent AccountTableRowChanged(Me, New AccountTableRowChangeEvent(CType(e.Row,AccountTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AccountTableRowChangingEvent) Is Nothing) Then
                RaiseEvent AccountTableRowChanging(Me, New AccountTableRowChangeEvent(CType(e.Row,AccountTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AccountTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent AccountTableRowDeleted(Me, New AccountTableRowChangeEvent(CType(e.Row,AccountTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AccountTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent AccountTableRowDeleting(Me, New AccountTableRowChangeEvent(CType(e.Row,AccountTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAccountTableRow(ByVal row As AccountTableRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CommonSearchDataSet = New CommonSearchDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AccountTableDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class meisyouTableDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncd As Global.System.Data.DataColumn
        
        Private columnmei As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "meisyouTable"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property meiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmei
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As meisyouTableRow
            Get
                Return CType(Me.Rows(index),meisyouTableRow)
            End Get
        End Property
        
        Public Event meisyouTableRowChanging As meisyouTableRowChangeEventHandler
        
        Public Event meisyouTableRowChanged As meisyouTableRowChangeEventHandler
        
        Public Event meisyouTableRowDeleting As meisyouTableRowChangeEventHandler
        
        Public Event meisyouTableRowDeleted As meisyouTableRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddmeisyouTableRow(ByVal row As meisyouTableRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddmeisyouTableRow(ByVal cd As Long, ByVal mei As String) As meisyouTableRow
            Dim rowmeisyouTableRow As meisyouTableRow = CType(Me.NewRow,meisyouTableRow)
            Dim columnValuesArray() As Object = New Object() {cd, mei}
            rowmeisyouTableRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowmeisyouTableRow)
            Return rowmeisyouTableRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As meisyouTableDataTable = CType(MyBase.Clone,meisyouTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New meisyouTableDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncd = MyBase.Columns("cd")
            Me.columnmei = MyBase.Columns("mei")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncd = New Global.System.Data.DataColumn("cd", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncd)
            Me.columnmei = New Global.System.Data.DataColumn("mei", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmei)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewmeisyouTableRow() As meisyouTableRow
            Return CType(Me.NewRow,meisyouTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New meisyouTableRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(meisyouTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.meisyouTableRowChangedEvent) Is Nothing) Then
                RaiseEvent meisyouTableRowChanged(Me, New meisyouTableRowChangeEvent(CType(e.Row,meisyouTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.meisyouTableRowChangingEvent) Is Nothing) Then
                RaiseEvent meisyouTableRowChanging(Me, New meisyouTableRowChangeEvent(CType(e.Row,meisyouTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.meisyouTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent meisyouTableRowDeleted(Me, New meisyouTableRowChangeEvent(CType(e.Row,meisyouTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.meisyouTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent meisyouTableRowDeleting(Me, New meisyouTableRowChangeEvent(CType(e.Row,meisyouTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovemeisyouTableRow(ByVal row As meisyouTableRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CommonSearchDataSet = New CommonSearchDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "meisyouTableDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tyousakaisyaTableDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columntys_kaisya_cd As Global.System.Data.DataColumn
        
        Private columnjigyousyo_cd As Global.System.Data.DataColumn
        
        Private columntys_kaisya_mei As Global.System.Data.DataColumn
        
        Private columnjyuusyo1 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TyousakaisyaTable"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tys_kaisya_cdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntys_kaisya_cd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jigyousyo_cdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjigyousyo_cd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tys_kaisya_meiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntys_kaisya_mei
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jyuusyo1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnjyuusyo1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tyousakaisyaTableRow
            Get
                Return CType(Me.Rows(index),tyousakaisyaTableRow)
            End Get
        End Property
        
        Public Event tyousakaisyaTableRowChanging As tyousakaisyaTableRowChangeEventHandler
        
        Public Event tyousakaisyaTableRowChanged As tyousakaisyaTableRowChangeEventHandler
        
        Public Event tyousakaisyaTableRowDeleting As tyousakaisyaTableRowChangeEventHandler
        
        Public Event tyousakaisyaTableRowDeleted As tyousakaisyaTableRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtyousakaisyaTableRow(ByVal row As tyousakaisyaTableRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtyousakaisyaTableRow(ByVal tys_kaisya_cd As String, ByVal jigyousyo_cd As String, ByVal tys_kaisya_mei As String, ByVal jyuusyo1 As String) As tyousakaisyaTableRow
            Dim rowtyousakaisyaTableRow As tyousakaisyaTableRow = CType(Me.NewRow,tyousakaisyaTableRow)
            Dim columnValuesArray() As Object = New Object() {tys_kaisya_cd, jigyousyo_cd, tys_kaisya_mei, jyuusyo1}
            rowtyousakaisyaTableRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtyousakaisyaTableRow)
            Return rowtyousakaisyaTableRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tyousakaisyaTableDataTable = CType(MyBase.Clone,tyousakaisyaTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tyousakaisyaTableDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columntys_kaisya_cd = MyBase.Columns("tys_kaisya_cd")
            Me.columnjigyousyo_cd = MyBase.Columns("jigyousyo_cd")
            Me.columntys_kaisya_mei = MyBase.Columns("tys_kaisya_mei")
            Me.columnjyuusyo1 = MyBase.Columns("jyuusyo1")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columntys_kaisya_cd = New Global.System.Data.DataColumn("tys_kaisya_cd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntys_kaisya_cd)
            Me.columnjigyousyo_cd = New Global.System.Data.DataColumn("jigyousyo_cd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjigyousyo_cd)
            Me.columntys_kaisya_mei = New Global.System.Data.DataColumn("tys_kaisya_mei", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntys_kaisya_mei)
            Me.columnjyuusyo1 = New Global.System.Data.DataColumn("jyuusyo1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjyuusyo1)
            Me.columntys_kaisya_cd.AllowDBNull = false
            Me.columntys_kaisya_cd.Caption = "kameiten_cd"
            Me.columntys_kaisya_cd.MaxLength = 5
            Me.columnjigyousyo_cd.AllowDBNull = false
            Me.columnjigyousyo_cd.Caption = "kameiten_mei1"
            Me.columnjigyousyo_cd.MaxLength = 40
            Me.columntys_kaisya_mei.Caption = "todouhuken_mei"
            Me.columnjyuusyo1.Caption = "tenmei_kana1"
            Me.ExtendedProperties.Add("Generator_RowClassName", "tyousakaisyaTableRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "tyousakaisyaTableRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "tyousakaisyaTableRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_TableClassName", "tyousakaisyaTableDataTable")
            Me.ExtendedProperties.Add("Generator_TablePropName", "tyousakaisyaTable")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tabletyousakaisyaTable")
            Me.ExtendedProperties.Add("Generator_UserTableName", "TyousakaisyaTable")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtyousakaisyaTableRow() As tyousakaisyaTableRow
            Return CType(Me.NewRow,tyousakaisyaTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tyousakaisyaTableRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tyousakaisyaTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tyousakaisyaTableRowChangedEvent) Is Nothing) Then
                RaiseEvent tyousakaisyaTableRowChanged(Me, New tyousakaisyaTableRowChangeEvent(CType(e.Row,tyousakaisyaTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tyousakaisyaTableRowChangingEvent) Is Nothing) Then
                RaiseEvent tyousakaisyaTableRowChanging(Me, New tyousakaisyaTableRowChangeEvent(CType(e.Row,tyousakaisyaTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tyousakaisyaTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent tyousakaisyaTableRowDeleted(Me, New tyousakaisyaTableRowChangeEvent(CType(e.Row,tyousakaisyaTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tyousakaisyaTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent tyousakaisyaTableRowDeleting(Me, New tyousakaisyaTableRowChangeEvent(CType(e.Row,tyousakaisyaTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetyousakaisyaTableRow(ByVal row As tyousakaisyaTableRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CommonSearchDataSet = New CommonSearchDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tyousakaisyaTableDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IntTableDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncd As Global.System.Data.DataColumn
        
        Private columnmei As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IntTable"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property meiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmei
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IntTableRow
            Get
                Return CType(Me.Rows(index),IntTableRow)
            End Get
        End Property
        
        Public Event IntTableRowChanging As IntTableRowChangeEventHandler
        
        Public Event IntTableRowChanged As IntTableRowChangeEventHandler
        
        Public Event IntTableRowDeleting As IntTableRowChangeEventHandler
        
        Public Event IntTableRowDeleted As IntTableRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIntTableRow(ByVal row As IntTableRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIntTableRow(ByVal cd As Long, ByVal mei As String) As IntTableRow
            Dim rowIntTableRow As IntTableRow = CType(Me.NewRow,IntTableRow)
            Dim columnValuesArray() As Object = New Object() {cd, mei}
            rowIntTableRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIntTableRow)
            Return rowIntTableRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IntTableDataTable = CType(MyBase.Clone,IntTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IntTableDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncd = MyBase.Columns("cd")
            Me.columnmei = MyBase.Columns("mei")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncd = New Global.System.Data.DataColumn("cd", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncd)
            Me.columnmei = New Global.System.Data.DataColumn("mei", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmei)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIntTableRow() As IntTableRow
            Return CType(Me.NewRow,IntTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IntTableRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IntTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IntTableRowChangedEvent) Is Nothing) Then
                RaiseEvent IntTableRowChanged(Me, New IntTableRowChangeEvent(CType(e.Row,IntTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IntTableRowChangingEvent) Is Nothing) Then
                RaiseEvent IntTableRowChanging(Me, New IntTableRowChangeEvent(CType(e.Row,IntTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IntTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent IntTableRowDeleted(Me, New IntTableRowChangeEvent(CType(e.Row,IntTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IntTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent IntTableRowDeleting(Me, New IntTableRowChangeEvent(CType(e.Row,IntTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIntTableRow(ByVal row As IntTableRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CommonSearchDataSet = New CommonSearchDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IntTableDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SeikyuuSakiTableDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnseikyuu_saki_kbn As Global.System.Data.DataColumn
        
        Private columnseikyuu_saki_cd As Global.System.Data.DataColumn
        
        Private columnseikyuu_saki_brc As Global.System.Data.DataColumn
        
        Private columnseikyuu_saki_mei As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SeikyuuSakiTable"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property seikyuu_saki_kbnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnseikyuu_saki_kbn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property seikyuu_saki_cdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnseikyuu_saki_cd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property seikyuu_saki_brcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnseikyuu_saki_brc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property seikyuu_saki_meiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnseikyuu_saki_mei
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SeikyuuSakiTableRow
            Get
                Return CType(Me.Rows(index),SeikyuuSakiTableRow)
            End Get
        End Property
        
        Public Event SeikyuuSakiTableRowChanging As SeikyuuSakiTableRowChangeEventHandler
        
        Public Event SeikyuuSakiTableRowChanged As SeikyuuSakiTableRowChangeEventHandler
        
        Public Event SeikyuuSakiTableRowDeleting As SeikyuuSakiTableRowChangeEventHandler
        
        Public Event SeikyuuSakiTableRowDeleted As SeikyuuSakiTableRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSeikyuuSakiTableRow(ByVal row As SeikyuuSakiTableRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSeikyuuSakiTableRow(ByVal seikyuu_saki_kbn As String, ByVal seikyuu_saki_cd As String, ByVal seikyuu_saki_brc As String, ByVal seikyuu_saki_mei As String) As SeikyuuSakiTableRow
            Dim rowSeikyuuSakiTableRow As SeikyuuSakiTableRow = CType(Me.NewRow,SeikyuuSakiTableRow)
            Dim columnValuesArray() As Object = New Object() {seikyuu_saki_kbn, seikyuu_saki_cd, seikyuu_saki_brc, seikyuu_saki_mei}
            rowSeikyuuSakiTableRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSeikyuuSakiTableRow)
            Return rowSeikyuuSakiTableRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SeikyuuSakiTableDataTable = CType(MyBase.Clone,SeikyuuSakiTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SeikyuuSakiTableDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnseikyuu_saki_kbn = MyBase.Columns("seikyuu_saki_kbn")
            Me.columnseikyuu_saki_cd = MyBase.Columns("seikyuu_saki_cd")
            Me.columnseikyuu_saki_brc = MyBase.Columns("seikyuu_saki_brc")
            Me.columnseikyuu_saki_mei = MyBase.Columns("seikyuu_saki_mei")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnseikyuu_saki_kbn = New Global.System.Data.DataColumn("seikyuu_saki_kbn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnseikyuu_saki_kbn)
            Me.columnseikyuu_saki_cd = New Global.System.Data.DataColumn("seikyuu_saki_cd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnseikyuu_saki_cd)
            Me.columnseikyuu_saki_brc = New Global.System.Data.DataColumn("seikyuu_saki_brc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnseikyuu_saki_brc)
            Me.columnseikyuu_saki_mei = New Global.System.Data.DataColumn("seikyuu_saki_mei", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnseikyuu_saki_mei)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSeikyuuSakiTableRow() As SeikyuuSakiTableRow
            Return CType(Me.NewRow,SeikyuuSakiTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SeikyuuSakiTableRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SeikyuuSakiTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SeikyuuSakiTableRowChangedEvent) Is Nothing) Then
                RaiseEvent SeikyuuSakiTableRowChanged(Me, New SeikyuuSakiTableRowChangeEvent(CType(e.Row,SeikyuuSakiTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SeikyuuSakiTableRowChangingEvent) Is Nothing) Then
                RaiseEvent SeikyuuSakiTableRowChanging(Me, New SeikyuuSakiTableRowChangeEvent(CType(e.Row,SeikyuuSakiTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SeikyuuSakiTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent SeikyuuSakiTableRowDeleted(Me, New SeikyuuSakiTableRowChangeEvent(CType(e.Row,SeikyuuSakiTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SeikyuuSakiTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent SeikyuuSakiTableRowDeleting(Me, New SeikyuuSakiTableRowChangeEvent(CType(e.Row,SeikyuuSakiTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSeikyuuSakiTableRow(ByVal row As SeikyuuSakiTableRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CommonSearchDataSet = New CommonSearchDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SeikyuuSakiTableDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SeikyuuSakiTable1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnseikyuu_saki_kbn As Global.System.Data.DataColumn
        
        Private columnseikyuu_saki_cd As Global.System.Data.DataColumn
        
        Private columnseikyuu_saki_brc As Global.System.Data.DataColumn
        
        Private columnseikyuu_saki_mei As Global.System.Data.DataColumn
        
        Private columntorikesi As Global.System.Data.DataColumn
        
        Private columnseikyuu_sime_date As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SeikyuuSakiTable1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property seikyuu_saki_kbnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnseikyuu_saki_kbn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property seikyuu_saki_cdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnseikyuu_saki_cd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property seikyuu_saki_brcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnseikyuu_saki_brc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property seikyuu_saki_meiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnseikyuu_saki_mei
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property torikesiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntorikesi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property seikyuu_sime_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnseikyuu_sime_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SeikyuuSakiTable1Row
            Get
                Return CType(Me.Rows(index),SeikyuuSakiTable1Row)
            End Get
        End Property
        
        Public Event SeikyuuSakiTable1RowChanging As SeikyuuSakiTable1RowChangeEventHandler
        
        Public Event SeikyuuSakiTable1RowChanged As SeikyuuSakiTable1RowChangeEventHandler
        
        Public Event SeikyuuSakiTable1RowDeleting As SeikyuuSakiTable1RowChangeEventHandler
        
        Public Event SeikyuuSakiTable1RowDeleted As SeikyuuSakiTable1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSeikyuuSakiTable1Row(ByVal row As SeikyuuSakiTable1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSeikyuuSakiTable1Row(ByVal seikyuu_saki_kbn As String, ByVal seikyuu_saki_cd As String, ByVal seikyuu_saki_brc As String, ByVal seikyuu_saki_mei As String, ByVal torikesi As String, ByVal seikyuu_sime_date As String) As SeikyuuSakiTable1Row
            Dim rowSeikyuuSakiTable1Row As SeikyuuSakiTable1Row = CType(Me.NewRow,SeikyuuSakiTable1Row)
            Dim columnValuesArray() As Object = New Object() {seikyuu_saki_kbn, seikyuu_saki_cd, seikyuu_saki_brc, seikyuu_saki_mei, torikesi, seikyuu_sime_date}
            rowSeikyuuSakiTable1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowSeikyuuSakiTable1Row)
            Return rowSeikyuuSakiTable1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SeikyuuSakiTable1DataTable = CType(MyBase.Clone,SeikyuuSakiTable1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SeikyuuSakiTable1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnseikyuu_saki_kbn = MyBase.Columns("seikyuu_saki_kbn")
            Me.columnseikyuu_saki_cd = MyBase.Columns("seikyuu_saki_cd")
            Me.columnseikyuu_saki_brc = MyBase.Columns("seikyuu_saki_brc")
            Me.columnseikyuu_saki_mei = MyBase.Columns("seikyuu_saki_mei")
            Me.columntorikesi = MyBase.Columns("torikesi")
            Me.columnseikyuu_sime_date = MyBase.Columns("seikyuu_sime_date")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnseikyuu_saki_kbn = New Global.System.Data.DataColumn("seikyuu_saki_kbn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnseikyuu_saki_kbn)
            Me.columnseikyuu_saki_cd = New Global.System.Data.DataColumn("seikyuu_saki_cd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnseikyuu_saki_cd)
            Me.columnseikyuu_saki_brc = New Global.System.Data.DataColumn("seikyuu_saki_brc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnseikyuu_saki_brc)
            Me.columnseikyuu_saki_mei = New Global.System.Data.DataColumn("seikyuu_saki_mei", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnseikyuu_saki_mei)
            Me.columntorikesi = New Global.System.Data.DataColumn("torikesi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntorikesi)
            Me.columnseikyuu_sime_date = New Global.System.Data.DataColumn("seikyuu_sime_date", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnseikyuu_sime_date)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSeikyuuSakiTable1Row() As SeikyuuSakiTable1Row
            Return CType(Me.NewRow,SeikyuuSakiTable1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SeikyuuSakiTable1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SeikyuuSakiTable1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SeikyuuSakiTable1RowChangedEvent) Is Nothing) Then
                RaiseEvent SeikyuuSakiTable1RowChanged(Me, New SeikyuuSakiTable1RowChangeEvent(CType(e.Row,SeikyuuSakiTable1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SeikyuuSakiTable1RowChangingEvent) Is Nothing) Then
                RaiseEvent SeikyuuSakiTable1RowChanging(Me, New SeikyuuSakiTable1RowChangeEvent(CType(e.Row,SeikyuuSakiTable1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SeikyuuSakiTable1RowDeletedEvent) Is Nothing) Then
                RaiseEvent SeikyuuSakiTable1RowDeleted(Me, New SeikyuuSakiTable1RowChangeEvent(CType(e.Row,SeikyuuSakiTable1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SeikyuuSakiTable1RowDeletingEvent) Is Nothing) Then
                RaiseEvent SeikyuuSakiTable1RowDeleting(Me, New SeikyuuSakiTable1RowChangeEvent(CType(e.Row,SeikyuuSakiTable1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSeikyuuSakiTable1Row(ByVal row As SeikyuuSakiTable1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CommonSearchDataSet = New CommonSearchDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SeikyuuSakiTable1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EigyousyoTableRow
        Inherits Global.System.Data.DataRow
        
        Private tableEigyousyoTable As EigyousyoTableDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEigyousyoTable = CType(Me.Table,EigyousyoTableDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property eigyousyo_cd() As String
            Get
                Try 
                    Return CType(Me(Me.tableEigyousyoTable.eigyousyo_cdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'EigyousyoTable' にある列 'eigyousyo_cd' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableEigyousyoTable.eigyousyo_cdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property eigyousyo_mei() As String
            Get
                Try 
                    Return CType(Me(Me.tableEigyousyoTable.eigyousyo_meiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'EigyousyoTable' にある列 'eigyousyo_mei' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableEigyousyoTable.eigyousyo_meiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iseigyousyo_cdNull() As Boolean
            Return Me.IsNull(Me.tableEigyousyoTable.eigyousyo_cdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Seteigyousyo_cdNull()
            Me(Me.tableEigyousyoTable.eigyousyo_cdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iseigyousyo_meiNull() As Boolean
            Return Me.IsNull(Me.tableEigyousyoTable.eigyousyo_meiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Seteigyousyo_meiNull()
            Me(Me.tableEigyousyoTable.eigyousyo_meiColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class KameitenSearchTableRow
        Inherits Global.System.Data.DataRow
        
        Private tableKameitenSearchTable As KameitenSearchTableDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableKameitenSearchTable = CType(Me.Table,KameitenSearchTableDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kameiten_cd() As String
            Get
                Return CType(Me(Me.tableKameitenSearchTable.kameiten_cdColumn),String)
            End Get
            Set
                Me(Me.tableKameitenSearchTable.kameiten_cdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kameiten_mei1() As String
            Get
                Return CType(Me(Me.tableKameitenSearchTable.kameiten_mei1Column),String)
            End Get
            Set
                Me(Me.tableKameitenSearchTable.kameiten_mei1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property todouhuken_mei() As String
            Get
                Try 
                    Return CType(Me(Me.tableKameitenSearchTable.todouhuken_meiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'KameitenSearchTable' にある列 'todouhuken_mei' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableKameitenSearchTable.todouhuken_meiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tenmei_kana1() As String
            Get
                Try 
                    Return CType(Me(Me.tableKameitenSearchTable.tenmei_kana1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'KameitenSearchTable' にある列 'tenmei_kana1' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableKameitenSearchTable.tenmei_kana1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property torikesi() As Long
            Get
                Try 
                    Return CType(Me(Me.tableKameitenSearchTable.torikesiColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'KameitenSearchTable' にある列 'torikesi' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableKameitenSearchTable.torikesiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property torikesi_txt() As String
            Get
                If Me.Istorikesi_txtNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableKameitenSearchTable.torikesi_txtColumn),String)
                End If
            End Get
            Set
                Me(Me.tableKameitenSearchTable.torikesi_txtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istodouhuken_meiNull() As Boolean
            Return Me.IsNull(Me.tableKameitenSearchTable.todouhuken_meiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settodouhuken_meiNull()
            Me(Me.tableKameitenSearchTable.todouhuken_meiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istenmei_kana1Null() As Boolean
            Return Me.IsNull(Me.tableKameitenSearchTable.tenmei_kana1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settenmei_kana1Null()
            Me(Me.tableKameitenSearchTable.tenmei_kana1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstorikesiNull() As Boolean
            Return Me.IsNull(Me.tableKameitenSearchTable.torikesiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettorikesiNull()
            Me(Me.tableKameitenSearchTable.torikesiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istorikesi_txtNull() As Boolean
            Return Me.IsNull(Me.tableKameitenSearchTable.torikesi_txtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settorikesi_txtNull()
            Me(Me.tableKameitenSearchTable.torikesi_txtColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class KeiretuTableRow
        Inherits Global.System.Data.DataRow
        
        Private tableKeiretuTable As KeiretuTableDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableKeiretuTable = CType(Me.Table,KeiretuTableDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kbn() As String
            Get
                Try 
                    Return CType(Me(Me.tableKeiretuTable.kbnColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'KeiretuTable' にある列 'kbn' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableKeiretuTable.kbnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property keiretu_cd() As String
            Get
                Try 
                    Return CType(Me(Me.tableKeiretuTable.keiretu_cdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'KeiretuTable' にある列 'keiretu_cd' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableKeiretuTable.keiretu_cdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property keiretu_mei() As String
            Get
                Try 
                    Return CType(Me(Me.tableKeiretuTable.keiretu_meiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'KeiretuTable' にある列 'keiretu_mei' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableKeiretuTable.keiretu_meiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IskbnNull() As Boolean
            Return Me.IsNull(Me.tableKeiretuTable.kbnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetkbnNull()
            Me(Me.tableKeiretuTable.kbnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iskeiretu_cdNull() As Boolean
            Return Me.IsNull(Me.tableKeiretuTable.keiretu_cdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setkeiretu_cdNull()
            Me(Me.tableKeiretuTable.keiretu_cdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iskeiretu_meiNull() As Boolean
            Return Me.IsNull(Me.tableKeiretuTable.keiretu_meiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setkeiretu_meiNull()
            Me(Me.tableKeiretuTable.keiretu_meiColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SyouhinTableRow
        Inherits Global.System.Data.DataRow
        
        Private tableSyouhinTable As SyouhinTableDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSyouhinTable = CType(Me.Table,SyouhinTableDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syouhin_cd() As String
            Get
                Try 
                    Return CType(Me(Me.tableSyouhinTable.syouhin_cdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'SyouhinTable' にある列 'syouhin_cd' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableSyouhinTable.syouhin_cdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syouhin_mei() As String
            Get
                Try 
                    Return CType(Me(Me.tableSyouhinTable.syouhin_meiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'SyouhinTable' にある列 'syouhin_mei' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableSyouhinTable.syouhin_meiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issyouhin_cdNull() As Boolean
            Return Me.IsNull(Me.tableSyouhinTable.syouhin_cdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsyouhin_cdNull()
            Me(Me.tableSyouhinTable.syouhin_cdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issyouhin_meiNull() As Boolean
            Return Me.IsNull(Me.tableSyouhinTable.syouhin_meiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsyouhin_meiNull()
            Me(Me.tableSyouhinTable.syouhin_meiColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class BirudaTableRow
        Inherits Global.System.Data.DataRow
        
        Private tableBirudaTable As BirudaTableDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBirudaTable = CType(Me.Table,BirudaTableDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cd() As String
            Get
                Try 
                    Return CType(Me(Me.tableBirudaTable.cdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'BirudaTable' にある列 'cd' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableBirudaTable.cdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property mei() As String
            Get
                Try 
                    Return CType(Me(Me.tableBirudaTable.meiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'BirudaTable' にある列 'mei' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableBirudaTable.meiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscdNull() As Boolean
            Return Me.IsNull(Me.tableBirudaTable.cdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcdNull()
            Me(Me.tableBirudaTable.cdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmeiNull() As Boolean
            Return Me.IsNull(Me.tableBirudaTable.meiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmeiNull()
            Me(Me.tableBirudaTable.meiColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AccountTableRow
        Inherits Global.System.Data.DataRow
        
        Private tableAccountTable As AccountTableDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAccountTable = CType(Me.Table,AccountTableDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property irai_gyoumu_kengen() As String
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.irai_gyoumu_kengenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'irai_gyoumu_kengen' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.irai_gyoumu_kengenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kekka_gyoumu_kengen() As String
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.kekka_gyoumu_kengenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'kekka_gyoumu_kengen' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.kekka_gyoumu_kengenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property hosyou_gyoumu_kengen() As String
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.hosyou_gyoumu_kengenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'hosyou_gyoumu_kengen' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.hosyou_gyoumu_kengenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property hkks_gyoumu_kengen() As String
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.hkks_gyoumu_kengenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'hkks_gyoumu_kengen' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.hkks_gyoumu_kengenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property koj_gyoumu_kengen() As String
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.koj_gyoumu_kengenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'koj_gyoumu_kengen' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.koj_gyoumu_kengenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property keiri_gyoumu_kengen() As String
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.keiri_gyoumu_kengenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'keiri_gyoumu_kengen' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.keiri_gyoumu_kengenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kaiseki_master_kanri_kengen() As String
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.kaiseki_master_kanri_kengenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'kaiseki_master_kanri_kengen' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.kaiseki_master_kanri_kengenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property eigyou_master_kanri_kengen() As String
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.eigyou_master_kanri_kengenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'eigyou_master_kanri_kengen' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.eigyou_master_kanri_kengenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kkk_master_kanri_kengen() As String
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.kkk_master_kanri_kengenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'kkk_master_kanri_kengen' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.kkk_master_kanri_kengenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property hansoku_uri_kengen() As String
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.hansoku_uri_kengenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'hansoku_uri_kengen' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.hansoku_uri_kengenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property data_haki_kengen() As String
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.data_haki_kengenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'data_haki_kengen' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.data_haki_kengenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property system_kanrisya_kengen() As String
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.system_kanrisya_kengenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'system_kanrisya_kengen' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.system_kanrisya_kengenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sinki_nyuuryoku_kengen() As String
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.sinki_nyuuryoku_kengenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'sinki_nyuuryoku_kengen' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.sinki_nyuuryoku_kengenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property hattyuusyo_kanri_kengen() As String
            Get
                Try 
                    Return CType(Me(Me.tableAccountTable.hattyuusyo_kanri_kengenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'AccountTable' にある列 'hattyuusyo_kanri_kengen' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableAccountTable.hattyuusyo_kanri_kengenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isirai_gyoumu_kengenNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.irai_gyoumu_kengenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setirai_gyoumu_kengenNull()
            Me(Me.tableAccountTable.irai_gyoumu_kengenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iskekka_gyoumu_kengenNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.kekka_gyoumu_kengenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setkekka_gyoumu_kengenNull()
            Me(Me.tableAccountTable.kekka_gyoumu_kengenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ishosyou_gyoumu_kengenNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.hosyou_gyoumu_kengenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sethosyou_gyoumu_kengenNull()
            Me(Me.tableAccountTable.hosyou_gyoumu_kengenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ishkks_gyoumu_kengenNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.hkks_gyoumu_kengenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sethkks_gyoumu_kengenNull()
            Me(Me.tableAccountTable.hkks_gyoumu_kengenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iskoj_gyoumu_kengenNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.koj_gyoumu_kengenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setkoj_gyoumu_kengenNull()
            Me(Me.tableAccountTable.koj_gyoumu_kengenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iskeiri_gyoumu_kengenNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.keiri_gyoumu_kengenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setkeiri_gyoumu_kengenNull()
            Me(Me.tableAccountTable.keiri_gyoumu_kengenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iskaiseki_master_kanri_kengenNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.kaiseki_master_kanri_kengenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setkaiseki_master_kanri_kengenNull()
            Me(Me.tableAccountTable.kaiseki_master_kanri_kengenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iseigyou_master_kanri_kengenNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.eigyou_master_kanri_kengenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Seteigyou_master_kanri_kengenNull()
            Me(Me.tableAccountTable.eigyou_master_kanri_kengenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iskkk_master_kanri_kengenNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.kkk_master_kanri_kengenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setkkk_master_kanri_kengenNull()
            Me(Me.tableAccountTable.kkk_master_kanri_kengenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ishansoku_uri_kengenNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.hansoku_uri_kengenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sethansoku_uri_kengenNull()
            Me(Me.tableAccountTable.hansoku_uri_kengenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdata_haki_kengenNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.data_haki_kengenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdata_haki_kengenNull()
            Me(Me.tableAccountTable.data_haki_kengenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issystem_kanrisya_kengenNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.system_kanrisya_kengenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsystem_kanrisya_kengenNull()
            Me(Me.tableAccountTable.system_kanrisya_kengenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issinki_nyuuryoku_kengenNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.sinki_nyuuryoku_kengenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsinki_nyuuryoku_kengenNull()
            Me(Me.tableAccountTable.sinki_nyuuryoku_kengenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ishattyuusyo_kanri_kengenNull() As Boolean
            Return Me.IsNull(Me.tableAccountTable.hattyuusyo_kanri_kengenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sethattyuusyo_kanri_kengenNull()
            Me(Me.tableAccountTable.hattyuusyo_kanri_kengenColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class meisyouTableRow
        Inherits Global.System.Data.DataRow
        
        Private tablemeisyouTable As meisyouTableDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablemeisyouTable = CType(Me.Table,meisyouTableDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cd() As Long
            Get
                Try 
                    Return CType(Me(Me.tablemeisyouTable.cdColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'meisyouTable' にある列 'cd' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tablemeisyouTable.cdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property mei() As String
            Get
                Try 
                    Return CType(Me(Me.tablemeisyouTable.meiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'meisyouTable' にある列 'mei' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tablemeisyouTable.meiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscdNull() As Boolean
            Return Me.IsNull(Me.tablemeisyouTable.cdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcdNull()
            Me(Me.tablemeisyouTable.cdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmeiNull() As Boolean
            Return Me.IsNull(Me.tablemeisyouTable.meiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmeiNull()
            Me(Me.tablemeisyouTable.meiColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tyousakaisyaTableRow
        Inherits Global.System.Data.DataRow
        
        Private tabletyousakaisyaTable As tyousakaisyaTableDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletyousakaisyaTable = CType(Me.Table,tyousakaisyaTableDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tys_kaisya_cd() As String
            Get
                Return CType(Me(Me.tabletyousakaisyaTable.tys_kaisya_cdColumn),String)
            End Get
            Set
                Me(Me.tabletyousakaisyaTable.tys_kaisya_cdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jigyousyo_cd() As String
            Get
                Return CType(Me(Me.tabletyousakaisyaTable.jigyousyo_cdColumn),String)
            End Get
            Set
                Me(Me.tabletyousakaisyaTable.jigyousyo_cdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tys_kaisya_mei() As String
            Get
                If Me.Istys_kaisya_meiNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tabletyousakaisyaTable.tys_kaisya_meiColumn),String)
                End If
            End Get
            Set
                Me(Me.tabletyousakaisyaTable.tys_kaisya_meiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jyuusyo1() As String
            Get
                If Me.Isjyuusyo1Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tabletyousakaisyaTable.jyuusyo1Column),String)
                End If
            End Get
            Set
                Me(Me.tabletyousakaisyaTable.jyuusyo1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istys_kaisya_meiNull() As Boolean
            Return Me.IsNull(Me.tabletyousakaisyaTable.tys_kaisya_meiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settys_kaisya_meiNull()
            Me(Me.tabletyousakaisyaTable.tys_kaisya_meiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjyuusyo1Null() As Boolean
            Return Me.IsNull(Me.tabletyousakaisyaTable.jyuusyo1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjyuusyo1Null()
            Me(Me.tabletyousakaisyaTable.jyuusyo1Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IntTableRow
        Inherits Global.System.Data.DataRow
        
        Private tableIntTable As IntTableDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIntTable = CType(Me.Table,IntTableDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cd() As Long
            Get
                Try 
                    Return CType(Me(Me.tableIntTable.cdColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'IntTable' にある列 'cd' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableIntTable.cdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property mei() As String
            Get
                Try 
                    Return CType(Me(Me.tableIntTable.meiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'IntTable' にある列 'mei' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableIntTable.meiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscdNull() As Boolean
            Return Me.IsNull(Me.tableIntTable.cdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcdNull()
            Me(Me.tableIntTable.cdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmeiNull() As Boolean
            Return Me.IsNull(Me.tableIntTable.meiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmeiNull()
            Me(Me.tableIntTable.meiColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SeikyuuSakiTableRow
        Inherits Global.System.Data.DataRow
        
        Private tableSeikyuuSakiTable As SeikyuuSakiTableDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSeikyuuSakiTable = CType(Me.Table,SeikyuuSakiTableDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property seikyuu_saki_kbn() As String
            Get
                If Me.Isseikyuu_saki_kbnNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSeikyuuSakiTable.seikyuu_saki_kbnColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSeikyuuSakiTable.seikyuu_saki_kbnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property seikyuu_saki_cd() As String
            Get
                If Me.Isseikyuu_saki_cdNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSeikyuuSakiTable.seikyuu_saki_cdColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSeikyuuSakiTable.seikyuu_saki_cdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property seikyuu_saki_brc() As String
            Get
                If Me.Isseikyuu_saki_brcNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSeikyuuSakiTable.seikyuu_saki_brcColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSeikyuuSakiTable.seikyuu_saki_brcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property seikyuu_saki_mei() As String
            Get
                If Me.Isseikyuu_saki_meiNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSeikyuuSakiTable.seikyuu_saki_meiColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSeikyuuSakiTable.seikyuu_saki_meiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isseikyuu_saki_kbnNull() As Boolean
            Return Me.IsNull(Me.tableSeikyuuSakiTable.seikyuu_saki_kbnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setseikyuu_saki_kbnNull()
            Me(Me.tableSeikyuuSakiTable.seikyuu_saki_kbnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isseikyuu_saki_cdNull() As Boolean
            Return Me.IsNull(Me.tableSeikyuuSakiTable.seikyuu_saki_cdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setseikyuu_saki_cdNull()
            Me(Me.tableSeikyuuSakiTable.seikyuu_saki_cdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isseikyuu_saki_brcNull() As Boolean
            Return Me.IsNull(Me.tableSeikyuuSakiTable.seikyuu_saki_brcColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setseikyuu_saki_brcNull()
            Me(Me.tableSeikyuuSakiTable.seikyuu_saki_brcColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isseikyuu_saki_meiNull() As Boolean
            Return Me.IsNull(Me.tableSeikyuuSakiTable.seikyuu_saki_meiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setseikyuu_saki_meiNull()
            Me(Me.tableSeikyuuSakiTable.seikyuu_saki_meiColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SeikyuuSakiTable1Row
        Inherits Global.System.Data.DataRow
        
        Private tableSeikyuuSakiTable1 As SeikyuuSakiTable1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSeikyuuSakiTable1 = CType(Me.Table,SeikyuuSakiTable1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property seikyuu_saki_kbn() As String
            Get
                If Me.Isseikyuu_saki_kbnNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSeikyuuSakiTable1.seikyuu_saki_kbnColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSeikyuuSakiTable1.seikyuu_saki_kbnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property seikyuu_saki_cd() As String
            Get
                If Me.Isseikyuu_saki_cdNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSeikyuuSakiTable1.seikyuu_saki_cdColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSeikyuuSakiTable1.seikyuu_saki_cdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property seikyuu_saki_brc() As String
            Get
                If Me.Isseikyuu_saki_brcNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSeikyuuSakiTable1.seikyuu_saki_brcColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSeikyuuSakiTable1.seikyuu_saki_brcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property seikyuu_saki_mei() As String
            Get
                If Me.Isseikyuu_saki_meiNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSeikyuuSakiTable1.seikyuu_saki_meiColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSeikyuuSakiTable1.seikyuu_saki_meiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property torikesi() As String
            Get
                If Me.IstorikesiNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSeikyuuSakiTable1.torikesiColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSeikyuuSakiTable1.torikesiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property seikyuu_sime_date() As String
            Get
                If Me.Isseikyuu_sime_dateNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSeikyuuSakiTable1.seikyuu_sime_dateColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSeikyuuSakiTable1.seikyuu_sime_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isseikyuu_saki_kbnNull() As Boolean
            Return Me.IsNull(Me.tableSeikyuuSakiTable1.seikyuu_saki_kbnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setseikyuu_saki_kbnNull()
            Me(Me.tableSeikyuuSakiTable1.seikyuu_saki_kbnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isseikyuu_saki_cdNull() As Boolean
            Return Me.IsNull(Me.tableSeikyuuSakiTable1.seikyuu_saki_cdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setseikyuu_saki_cdNull()
            Me(Me.tableSeikyuuSakiTable1.seikyuu_saki_cdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isseikyuu_saki_brcNull() As Boolean
            Return Me.IsNull(Me.tableSeikyuuSakiTable1.seikyuu_saki_brcColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setseikyuu_saki_brcNull()
            Me(Me.tableSeikyuuSakiTable1.seikyuu_saki_brcColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isseikyuu_saki_meiNull() As Boolean
            Return Me.IsNull(Me.tableSeikyuuSakiTable1.seikyuu_saki_meiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setseikyuu_saki_meiNull()
            Me(Me.tableSeikyuuSakiTable1.seikyuu_saki_meiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstorikesiNull() As Boolean
            Return Me.IsNull(Me.tableSeikyuuSakiTable1.torikesiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettorikesiNull()
            Me(Me.tableSeikyuuSakiTable1.torikesiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isseikyuu_sime_dateNull() As Boolean
            Return Me.IsNull(Me.tableSeikyuuSakiTable1.seikyuu_sime_dateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setseikyuu_sime_dateNull()
            Me(Me.tableSeikyuuSakiTable1.seikyuu_sime_dateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EigyousyoTableRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EigyousyoTableRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EigyousyoTableRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EigyousyoTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class KameitenSearchTableRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As KameitenSearchTableRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As KameitenSearchTableRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As KameitenSearchTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class KeiretuTableRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As KeiretuTableRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As KeiretuTableRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As KeiretuTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SyouhinTableRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SyouhinTableRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SyouhinTableRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SyouhinTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class BirudaTableRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BirudaTableRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As BirudaTableRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As BirudaTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AccountTableRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AccountTableRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AccountTableRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AccountTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class meisyouTableRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As meisyouTableRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As meisyouTableRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As meisyouTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tyousakaisyaTableRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tyousakaisyaTableRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tyousakaisyaTableRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tyousakaisyaTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IntTableRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IntTableRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IntTableRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IntTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SeikyuuSakiTableRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SeikyuuSakiTableRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SeikyuuSakiTableRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SeikyuuSakiTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SeikyuuSakiTable1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SeikyuuSakiTable1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SeikyuuSakiTable1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SeikyuuSakiTable1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
