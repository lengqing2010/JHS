'------------------------------------------------------------------------------
' <auto-generated>
'     このコードはツールによって生成されました。
'     ランタイム バージョン:2.0.50727.42
'
'     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
'     コードが再生成されるときに損失したりします。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("WaribikiDataSet"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class WaribikiDataSet
    Inherits System.Data.DataSet
    
    Private tableWaribikiCountTable As WaribikiCountTableDataTable
    
    Private tableWaribikiTable As WaribikiTableDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("WaribikiCountTable")) Is Nothing) Then
                MyBase.Tables.Add(New WaribikiCountTableDataTable(ds.Tables("WaribikiCountTable")))
            End If
            If (Not (ds.Tables("WaribikiTable")) Is Nothing) Then
                MyBase.Tables.Add(New WaribikiTableDataTable(ds.Tables("WaribikiTable")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property WaribikiCountTable() As WaribikiCountTableDataTable
        Get
            Return Me.tableWaribikiCountTable
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property WaribikiTable() As WaribikiTableDataTable
        Get
            Return Me.tableWaribikiTable
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As WaribikiDataSet = CType(MyBase.Clone,WaribikiDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("WaribikiCountTable")) Is Nothing) Then
                MyBase.Tables.Add(New WaribikiCountTableDataTable(ds.Tables("WaribikiCountTable")))
            End If
            If (Not (ds.Tables("WaribikiTable")) Is Nothing) Then
                MyBase.Tables.Add(New WaribikiTableDataTable(ds.Tables("WaribikiTable")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableWaribikiCountTable = CType(MyBase.Tables("WaribikiCountTable"),WaribikiCountTableDataTable)
        If (initTable = true) Then
            If (Not (Me.tableWaribikiCountTable) Is Nothing) Then
                Me.tableWaribikiCountTable.InitVars
            End If
        End If
        Me.tableWaribikiTable = CType(MyBase.Tables("WaribikiTable"),WaribikiTableDataTable)
        If (initTable = true) Then
            If (Not (Me.tableWaribikiTable) Is Nothing) Then
                Me.tableWaribikiTable.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "WaribikiDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/WaribikiDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableWaribikiCountTable = New WaribikiCountTableDataTable
        MyBase.Tables.Add(Me.tableWaribikiCountTable)
        Me.tableWaribikiTable = New WaribikiTableDataTable
        MyBase.Tables.Add(Me.tableWaribikiTable)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeWaribikiCountTable() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeWaribikiTable() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As WaribikiDataSet = New WaribikiDataSet
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub WaribikiCountTableRowChangeEventHandler(ByVal sender As Object, ByVal e As WaribikiCountTableRowChangeEvent)
    
    Public Delegate Sub WaribikiTableRowChangeEventHandler(ByVal sender As Object, ByVal e As WaribikiTableRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class WaribikiCountTableDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnnum As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "WaribikiCountTable"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property numColumn() As System.Data.DataColumn
            Get
                Return Me.columnnum
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As WaribikiCountTableRow
            Get
                Return CType(Me.Rows(index),WaribikiCountTableRow)
            End Get
        End Property
        
        Public Event WaribikiCountTableRowChanging As WaribikiCountTableRowChangeEventHandler
        
        Public Event WaribikiCountTableRowChanged As WaribikiCountTableRowChangeEventHandler
        
        Public Event WaribikiCountTableRowDeleting As WaribikiCountTableRowChangeEventHandler
        
        Public Event WaribikiCountTableRowDeleted As WaribikiCountTableRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddWaribikiCountTableRow(ByVal row As WaribikiCountTableRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddWaribikiCountTableRow(ByVal num As String) As WaribikiCountTableRow
            Dim rowWaribikiCountTableRow As WaribikiCountTableRow = CType(Me.NewRow,WaribikiCountTableRow)
            rowWaribikiCountTableRow.ItemArray = New Object() {num}
            Me.Rows.Add(rowWaribikiCountTableRow)
            Return rowWaribikiCountTableRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As WaribikiCountTableDataTable = CType(MyBase.Clone,WaribikiCountTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New WaribikiCountTableDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnum = MyBase.Columns("num")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnum = New System.Data.DataColumn("num", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnum)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewWaribikiCountTableRow() As WaribikiCountTableRow
            Return CType(Me.NewRow,WaribikiCountTableRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New WaribikiCountTableRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(WaribikiCountTableRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.WaribikiCountTableRowChangedEvent) Is Nothing) Then
                RaiseEvent WaribikiCountTableRowChanged(Me, New WaribikiCountTableRowChangeEvent(CType(e.Row,WaribikiCountTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.WaribikiCountTableRowChangingEvent) Is Nothing) Then
                RaiseEvent WaribikiCountTableRowChanging(Me, New WaribikiCountTableRowChangeEvent(CType(e.Row,WaribikiCountTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.WaribikiCountTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent WaribikiCountTableRowDeleted(Me, New WaribikiCountTableRowChangeEvent(CType(e.Row,WaribikiCountTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.WaribikiCountTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent WaribikiCountTableRowDeleting(Me, New WaribikiCountTableRowChangeEvent(CType(e.Row,WaribikiCountTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveWaribikiCountTableRow(ByVal row As WaribikiCountTableRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As WaribikiDataSet = New WaribikiDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "WaribikiCountTableDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class WaribikiTableDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnkbn As System.Data.DataColumn
        
        Private columnkameiten_cd As System.Data.DataColumn
        
        Private columnkameiten_mei As System.Data.DataColumn
        
        Private columnsyouhin_cd1 As System.Data.DataColumn
        
        Private columnsyouhin_mei1 As System.Data.DataColumn
        
        Private columnsyouhin_cd2 As System.Data.DataColumn
        
        Private columnsyouhin_mei2 As System.Data.DataColumn
        
        Private columnsyouhin_cd3 As System.Data.DataColumn
        
        Private columnsyouhin_mei3 As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "WaribikiTable"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kbnColumn() As System.Data.DataColumn
            Get
                Return Me.columnkbn
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kameiten_cdColumn() As System.Data.DataColumn
            Get
                Return Me.columnkameiten_cd
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kameiten_meiColumn() As System.Data.DataColumn
            Get
                Return Me.columnkameiten_mei
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syouhin_cd1Column() As System.Data.DataColumn
            Get
                Return Me.columnsyouhin_cd1
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syouhin_mei1Column() As System.Data.DataColumn
            Get
                Return Me.columnsyouhin_mei1
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syouhin_cd2Column() As System.Data.DataColumn
            Get
                Return Me.columnsyouhin_cd2
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syouhin_mei2Column() As System.Data.DataColumn
            Get
                Return Me.columnsyouhin_mei2
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syouhin_cd3Column() As System.Data.DataColumn
            Get
                Return Me.columnsyouhin_cd3
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syouhin_mei3Column() As System.Data.DataColumn
            Get
                Return Me.columnsyouhin_mei3
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As WaribikiTableRow
            Get
                Return CType(Me.Rows(index),WaribikiTableRow)
            End Get
        End Property
        
        Public Event WaribikiTableRowChanging As WaribikiTableRowChangeEventHandler
        
        Public Event WaribikiTableRowChanged As WaribikiTableRowChangeEventHandler
        
        Public Event WaribikiTableRowDeleting As WaribikiTableRowChangeEventHandler
        
        Public Event WaribikiTableRowDeleted As WaribikiTableRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddWaribikiTableRow(ByVal row As WaribikiTableRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddWaribikiTableRow(ByVal kbn As String, ByVal kameiten_cd As String, ByVal kameiten_mei As String, ByVal syouhin_cd1 As String, ByVal syouhin_mei1 As String, ByVal syouhin_cd2 As String, ByVal syouhin_mei2 As String, ByVal syouhin_cd3 As String, ByVal syouhin_mei3 As String) As WaribikiTableRow
            Dim rowWaribikiTableRow As WaribikiTableRow = CType(Me.NewRow,WaribikiTableRow)
            rowWaribikiTableRow.ItemArray = New Object() {kbn, kameiten_cd, kameiten_mei, syouhin_cd1, syouhin_mei1, syouhin_cd2, syouhin_mei2, syouhin_cd3, syouhin_mei3}
            Me.Rows.Add(rowWaribikiTableRow)
            Return rowWaribikiTableRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As WaribikiTableDataTable = CType(MyBase.Clone,WaribikiTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New WaribikiTableDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnkbn = MyBase.Columns("kbn")
            Me.columnkameiten_cd = MyBase.Columns("kameiten_cd")
            Me.columnkameiten_mei = MyBase.Columns("kameiten_mei")
            Me.columnsyouhin_cd1 = MyBase.Columns("syouhin_cd1")
            Me.columnsyouhin_mei1 = MyBase.Columns("syouhin_mei1")
            Me.columnsyouhin_cd2 = MyBase.Columns("syouhin_cd2")
            Me.columnsyouhin_mei2 = MyBase.Columns("syouhin_mei2")
            Me.columnsyouhin_cd3 = MyBase.Columns("syouhin_cd3")
            Me.columnsyouhin_mei3 = MyBase.Columns("syouhin_mei3")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnkbn = New System.Data.DataColumn("kbn", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkbn)
            Me.columnkameiten_cd = New System.Data.DataColumn("kameiten_cd", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkameiten_cd)
            Me.columnkameiten_mei = New System.Data.DataColumn("kameiten_mei", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkameiten_mei)
            Me.columnsyouhin_cd1 = New System.Data.DataColumn("syouhin_cd1", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyouhin_cd1)
            Me.columnsyouhin_mei1 = New System.Data.DataColumn("syouhin_mei1", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyouhin_mei1)
            Me.columnsyouhin_cd2 = New System.Data.DataColumn("syouhin_cd2", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyouhin_cd2)
            Me.columnsyouhin_mei2 = New System.Data.DataColumn("syouhin_mei2", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyouhin_mei2)
            Me.columnsyouhin_cd3 = New System.Data.DataColumn("syouhin_cd3", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyouhin_cd3)
            Me.columnsyouhin_mei3 = New System.Data.DataColumn("syouhin_mei3", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyouhin_mei3)
            Me.columnkbn.Caption = "kameiten_cd"
            Me.columnkameiten_cd.Caption = "kameiten_mei"
            Me.columnkameiten_mei.Caption = "syouhin_cd"
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewWaribikiTableRow() As WaribikiTableRow
            Return CType(Me.NewRow,WaribikiTableRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New WaribikiTableRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(WaribikiTableRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.WaribikiTableRowChangedEvent) Is Nothing) Then
                RaiseEvent WaribikiTableRowChanged(Me, New WaribikiTableRowChangeEvent(CType(e.Row,WaribikiTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.WaribikiTableRowChangingEvent) Is Nothing) Then
                RaiseEvent WaribikiTableRowChanging(Me, New WaribikiTableRowChangeEvent(CType(e.Row,WaribikiTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.WaribikiTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent WaribikiTableRowDeleted(Me, New WaribikiTableRowChangeEvent(CType(e.Row,WaribikiTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.WaribikiTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent WaribikiTableRowDeleting(Me, New WaribikiTableRowChangeEvent(CType(e.Row,WaribikiTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveWaribikiTableRow(ByVal row As WaribikiTableRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As WaribikiDataSet = New WaribikiDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "WaribikiTableDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class WaribikiCountTableRow
        Inherits System.Data.DataRow
        
        Private tableWaribikiCountTable As WaribikiCountTableDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableWaribikiCountTable = CType(Me.Table,WaribikiCountTableDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property num() As String
            Get
                Try 
                    Return CType(Me(Me.tableWaribikiCountTable.numColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'WaribikiCountTable' にある列 'num' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableWaribikiCountTable.numColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnumNull() As Boolean
            Return Me.IsNull(Me.tableWaribikiCountTable.numColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnumNull()
            Me(Me.tableWaribikiCountTable.numColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class WaribikiTableRow
        Inherits System.Data.DataRow
        
        Private tableWaribikiTable As WaribikiTableDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableWaribikiTable = CType(Me.Table,WaribikiTableDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kbn() As String
            Get
                Try 
                    Return CType(Me(Me.tableWaribikiTable.kbnColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'WaribikiTable' にある列 'kbn' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableWaribikiTable.kbnColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kameiten_cd() As String
            Get
                Try 
                    Return CType(Me(Me.tableWaribikiTable.kameiten_cdColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'WaribikiTable' にある列 'kameiten_cd' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableWaribikiTable.kameiten_cdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kameiten_mei() As String
            Get
                Try 
                    Return CType(Me(Me.tableWaribikiTable.kameiten_meiColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'WaribikiTable' にある列 'kameiten_mei' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableWaribikiTable.kameiten_meiColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syouhin_cd1() As String
            Get
                Try 
                    Return CType(Me(Me.tableWaribikiTable.syouhin_cd1Column),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'WaribikiTable' にある列 'syouhin_cd1' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableWaribikiTable.syouhin_cd1Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syouhin_mei1() As String
            Get
                Try 
                    Return CType(Me(Me.tableWaribikiTable.syouhin_mei1Column),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'WaribikiTable' にある列 'syouhin_mei1' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableWaribikiTable.syouhin_mei1Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syouhin_cd2() As String
            Get
                Try 
                    Return CType(Me(Me.tableWaribikiTable.syouhin_cd2Column),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'WaribikiTable' にある列 'syouhin_cd2' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableWaribikiTable.syouhin_cd2Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syouhin_mei2() As String
            Get
                Try 
                    Return CType(Me(Me.tableWaribikiTable.syouhin_mei2Column),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'WaribikiTable' にある列 'syouhin_mei2' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableWaribikiTable.syouhin_mei2Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syouhin_cd3() As String
            Get
                Try 
                    Return CType(Me(Me.tableWaribikiTable.syouhin_cd3Column),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'WaribikiTable' にある列 'syouhin_cd3' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableWaribikiTable.syouhin_cd3Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syouhin_mei3() As String
            Get
                Try 
                    Return CType(Me(Me.tableWaribikiTable.syouhin_mei3Column),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("テーブル 'WaribikiTable' にある列 'syouhin_mei3' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableWaribikiTable.syouhin_mei3Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IskbnNull() As Boolean
            Return Me.IsNull(Me.tableWaribikiTable.kbnColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetkbnNull()
            Me(Me.tableWaribikiTable.kbnColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iskameiten_cdNull() As Boolean
            Return Me.IsNull(Me.tableWaribikiTable.kameiten_cdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setkameiten_cdNull()
            Me(Me.tableWaribikiTable.kameiten_cdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iskameiten_meiNull() As Boolean
            Return Me.IsNull(Me.tableWaribikiTable.kameiten_meiColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setkameiten_meiNull()
            Me(Me.tableWaribikiTable.kameiten_meiColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issyouhin_cd1Null() As Boolean
            Return Me.IsNull(Me.tableWaribikiTable.syouhin_cd1Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsyouhin_cd1Null()
            Me(Me.tableWaribikiTable.syouhin_cd1Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issyouhin_mei1Null() As Boolean
            Return Me.IsNull(Me.tableWaribikiTable.syouhin_mei1Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsyouhin_mei1Null()
            Me(Me.tableWaribikiTable.syouhin_mei1Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issyouhin_cd2Null() As Boolean
            Return Me.IsNull(Me.tableWaribikiTable.syouhin_cd2Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsyouhin_cd2Null()
            Me(Me.tableWaribikiTable.syouhin_cd2Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issyouhin_mei2Null() As Boolean
            Return Me.IsNull(Me.tableWaribikiTable.syouhin_mei2Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsyouhin_mei2Null()
            Me(Me.tableWaribikiTable.syouhin_mei2Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issyouhin_cd3Null() As Boolean
            Return Me.IsNull(Me.tableWaribikiTable.syouhin_cd3Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsyouhin_cd3Null()
            Me(Me.tableWaribikiTable.syouhin_cd3Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issyouhin_mei3Null() As Boolean
            Return Me.IsNull(Me.tableWaribikiTable.syouhin_mei3Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsyouhin_mei3Null()
            Me(Me.tableWaribikiTable.syouhin_mei3Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class WaribikiCountTableRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As WaribikiCountTableRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As WaribikiCountTableRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As WaribikiCountTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class WaribikiTableRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As WaribikiTableRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As WaribikiTableRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As WaribikiTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
